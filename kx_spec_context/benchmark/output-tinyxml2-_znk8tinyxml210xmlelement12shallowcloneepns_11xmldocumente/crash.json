{
    "samples": [

    {
        "benchmark": "output-tinyxml2-_znk8tinyxml210xmlelement12shallowcloneepns_11xmldocumente",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" {\\n    #include \"tinyxml2.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size == 0) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n    std::string xmlString = dataProvider.ConsumeRandomLengthString(size);\\n\\n    tinyxml2::XMLDocument doc;\\n    tinyxml2::XMLError parseResult = doc.Parse(xmlString.c_str(), xmlString.size());\\n\\n    if (parseResult != tinyxml2::XML_SUCCESS) {\\n        return 0;\\n    }\\n\\n    tinyxml2::XMLElement* element = doc.FirstChildElement();\\n\\n    if (element == nullptr) {\\n        return 0;\\n    }\\n\\n    tinyxml2::XMLNode* clonedNode = element->ShallowClone(&doc);\\n\\n    if (clonedNode == nullptr) {\\n        return 0;\\n    }\\n\\n    if (clonedNode->ToElement() == nullptr) {\\n        return 0;\\n    }\\n\\n    delete clonedNode;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-tinyxml2-_znk8tinyxml210xmlelement12shallowcloneepns_11xmldocumente",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"tinyxml2.h\"\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n    std::string xmlString = dataProvider.ConsumeRandomLengthString(size);\\n\\n    tinyxml2::XMLDocument doc;\\n    tinyxml2::XMLError parseResult = doc.Parse(xmlString.c_str(), xmlString.size());\\n\\n    if (parseResult != tinyxml2::XML_SUCCESS) {\\n        return 0;\\n    }\\n\\n    tinyxml2::XMLElement* element = doc.FirstChildElement();\\n\\n    if (element == nullptr) {\\n        return 0;\\n    }\\n\\n    tinyxml2::XMLNode* clonedNode = element->ShallowClone(&doc);\\n\\n    if (clonedNode == nullptr) {\\n        return 0;\\n    }\\n\\n    if (clonedNode->ToElement() == nullptr) {\\n        return 0;\\n    }\\n\\n    delete clonedNode;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-tinyxml2-_znk8tinyxml210xmlelement12shallowcloneepns_11xmldocumente",
        "sample": "03",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"tinyxml2.h\"\\n\\n// Ensure C headers are wrapped with extern \"C\"\\nextern \"C\" {\\n    // No need to include tinyxml2.h here as it is a C++ header\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n    std::string xmlString = dataProvider.ConsumeRandomLengthString(size);\\n\\n    tinyxml2::XMLDocument doc;\\n    tinyxml2::XMLError parseResult = doc.Parse(xmlString.c_str(), xmlString.size());\\n\\n    if (parseResult != tinyxml2::XML_SUCCESS) {\\n        return 0;\\n    }\\n\\n    tinyxml2::XMLElement* element = doc.FirstChildElement();\\n\\n    if (element == nullptr) {\\n        return 0;\\n    }\\n\\n    tinyxml2::XMLNode* clonedNode = element->ShallowClone(&doc);\\n\\n    if (clonedNode == nullptr) {\\n        return 0;\\n    }\\n\\n    if (clonedNode->ToElement() == nullptr) {\\n        return 0;\\n    }\\n\\n    delete clonedNode;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-tinyxml2-_znk8tinyxml210xmlelement12shallowcloneepns_11xmldocumente",
        "sample": "04",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"tinyxml2.h\"  // Corrected to use double quotes for local include\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size == 0) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n    std::string xmlString = dataProvider.ConsumeRandomLengthString(size);\\n\\n    tinyxml2::XMLDocument doc;\\n    tinyxml2::XMLError parseResult = doc.Parse(xmlString.c_str(), xmlString.size());\\n\\n    if (parseResult != tinyxml2::XML_SUCCESS) {\\n        return 0;\\n    }\\n\\n    tinyxml2::XMLElement* element = doc.FirstChildElement();\\n\\n    if (element == nullptr) {\\n        return 0;\\n    }\\n\\n    tinyxml2::XMLNode* clonedNode = element->ShallowClone(&doc);\\n\\n    if (clonedNode == nullptr) {\\n        return 0;\\n    }\\n\\n    if (clonedNode->ToElement() == nullptr) {\\n        return 0;\\n    }\\n\\n    delete clonedNode;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-tinyxml2-_znk8tinyxml210xmlelement12shallowcloneepns_11xmldocumente",
        "sample": "05",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n\\nextern \"C\" {\\n#include \"tinyxml2.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    std::string xmlString = dataProvider.ConsumeRandomLengthString(size);\\n\\n    tinyxml2::XMLDocument doc;\\n    tinyxml2::XMLError parseResult = doc.Parse(xmlString.c_str(), xmlString.size());\\n\\n    if (parseResult != tinyxml2::XML_SUCCESS) {\\n        return 0;\\n    }\\n\\n    tinyxml2::XMLElement* element = doc.FirstChildElement();\\n\\n    if (element == nullptr) {\\n        return 0;\\n    }\\n\\n    tinyxml2::XMLNode* clonedNode = element->ShallowClone(&doc);\\n\\n    if (clonedNode == nullptr) {\\n        return 0;\\n    }\\n\\n    if (clonedNode->ToElement() == nullptr) {\\n        return 0;\\n    }\\n\\n    delete clonedNode;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}