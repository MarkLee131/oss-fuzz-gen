{
    "samples": [

    {
        "benchmark": "output-guetzli-_znk11butteraugli21butterauglicomparator4maskepnst3__16vectorins_5imageifeens1_9allocatoris4_eeees8_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n    #include \"butteraugli.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    size_t num_images1 = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 10);\\n    std::vector<butteraugli::ImageF> images1;\\n    for (size_t i = 0; i < num_images1; ++i) {\\n        size_t xsize = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100);\\n        size_t ysize = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100);\\n        butteraugli::ImageF image(xsize, ysize);\\n        for (size_t y = 0; y < ysize; ++y) {\\n            for (size_t x = 0; x < xsize; ++x) {\\n                image.Row(y)[x] = fuzzed_data.ConsumeFloatingPoint<float>();\\n            }\\n        }\\n        images1.push_back(image);\\n    }\\n\\n    size_t num_images2 = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 10);\\n    std::vector<butteraugli::ImageF> images2;\\n    for (size_t i = 0; i < num_images2; ++i) {\\n        size_t xsize = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100);\\n        size_t ysize = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100);\\n        butteraugli::ImageF image(xsize, ysize);\\n        for (size_t y = 0; y < ysize; ++y) {\\n            for (size_t x = 0; x < xsize; ++x) {\\n                image.Row(y)[x] = fuzzed_data.ConsumeFloatingPoint<float>();\\n            }\\n        }\\n        images2.push_back(image);\\n    }\\n\\n    std::vector<butteraugli::ImageF> diffmap;\\n    double diff_value = butteraugli::ButteraugliInterface(images1, images2, 1.0, &diffmap);\\n\\n    // Create ButteraugliComparator instance and call Mask function\\n    butteraugli::ButteraugliComparator comparator(images1, 1.0);\\n    comparator.Mask(&images1, &images2);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-guetzli-_znk11butteraugli21butterauglicomparator4maskepnst3__16vectorins_5imageifeens1_9allocatoris4_eeees8_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n    #include \"butteraugli/butteraugli.h\"\\n    #include \"butteraugli/butteraugli_comparator.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    size_t num_images1 = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 10);\\n    std::vector<butteraugli::Image<float>> images1;\\n    for (size_t i = 0; i < num_images1; ++i) {\\n        size_t xsize = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100);\\n        size_t ysize = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100);\\n        butteraugli::Image<float> image(xsize, ysize);\\n        for (size_t y = 0; y < ysize; ++y) {\\n            for (size_t x = 0; x < xsize; ++x) {\\n                image.Row(y)[x] = fuzzed_data.ConsumeFloatingPoint<float>();\\n            }\\n        }\\n        images1.push_back(image);\\n    }\\n\\n    size_t num_images2 = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 10);\\n    std::vector<butteraugli::Image<float>> images2;\\n    for (size_t i = 0; i < num_images2; ++i) {\\n        size_t xsize = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100);\\n        size_t ysize = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100);\\n        butteraugli::Image<float> image(xsize, ysize);\\n        for (size_t y = 0; y < ysize; ++y) {\\n            for (size_t x = 0; x < xsize; ++x) {\\n                image.Row(y)[x] = fuzzed_data.ConsumeFloatingPoint<float>();\\n            }\\n        }\\n        images2.push_back(image);\\n    }\\n\\n    butteraugli::ButteraugliComparator comparator;\\n    comparator.Mask(&images1, &images2);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-guetzli-_znk11butteraugli21butterauglicomparator4maskepnst3__16vectorins_5imageifeens1_9allocatoris4_eeees8_",
        "sample": "03",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n    #include \"butteraugli/butteraugli.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    size_t num_images1 = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 10);\\n    std::vector<butteraugli::ImageF> images1;\\n    for (size_t i = 0; i < num_images1; ++i) {\\n        size_t xsize = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100);\\n        size_t ysize = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100);\\n        butteraugli::ImageF image(xsize, ysize);\\n        for (size_t y = 0; y < ysize; ++y) {\\n            for (size_t x = 0; x < xsize; ++x) {\\n                image.Row(y)[x] = fuzzed_data.ConsumeFloatingPoint<float>();\\n            }\\n        }\\n        images1.push_back(image);\\n    }\\n\\n    size_t num_images2 = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 10);\\n    std::vector<butteraugli::ImageF> images2;\\n    for (size_t i = 0; i < num_images2; ++i) {\\n        size_t xsize = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100);\\n        size_t ysize = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100);\\n        butteraugli::ImageF image(xsize, ysize);\\n        for (size_t y = 0; y < ysize; ++y) {\\n            for (size_t x = 0; x < xsize; ++x) {\\n                image.Row(y)[x] = fuzzed_data.ConsumeFloatingPoint<float>();\\n            }\\n        }\\n        images2.push_back(image);\\n    }\\n\\n    std::vector<float> diffmap;\\n    butteraugli::ButteraugliInterface(images1, images2, &diffmap);\\n\\n    // Create a ButteraugliComparator instance and call the Mask function\\n    butteraugli::ButteraugliComparator comparator;\\n    comparator.Mask(&images1, &images2);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-guetzli-_znk11butteraugli21butterauglicomparator4maskepnst3__16vectorins_5imageifeens1_9allocatoris4_eeees8_",
        "sample": "04",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n    #include \"butteraugli.h\"\\n    #include \"butteraugli_comparator.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    size_t num_images1 = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 10);\\n    std::vector<butteraugli::Image<float>> images1;\\n    for (size_t i = 0; i < num_images1; ++i) {\\n        size_t xsize = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100);\\n        size_t ysize = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100);\\n        butteraugli::Image<float> image(xsize, ysize);\\n        for (size_t y = 0; y < ysize; ++y) {\\n            for (size_t x = 0; x < xsize; ++x) {\\n                image.Row(y)[x] = fuzzed_data.ConsumeFloatingPoint<float>();\\n            }\\n        }\\n        images1.push_back(image);\\n    }\\n\\n    size_t num_images2 = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 10);\\n    std::vector<butteraugli::Image<float>> images2;\\n    for (size_t i = 0; i < num_images2; ++i) {\\n        size_t xsize = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100);\\n        size_t ysize = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100);\\n        butteraugli::Image<float> image(xsize, ysize);\\n        for (size_t y = 0; y < ysize; ++y) {\\n            for (size_t x = 0; x < xsize; ++x) {\\n                image.Row(y)[x] = fuzzed_data.ConsumeFloatingPoint<float>();\\n            }\\n        }\\n        images2.push_back(image);\\n    }\\n\\n    butteraugli::ButteraugliComparator comparator;\\n    comparator.Mask(&images1, &images2);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-guetzli-_znk11butteraugli21butterauglicomparator4maskepnst3__16vectorins_5imageifeens1_9allocatoris4_eeees8_",
        "sample": "05",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n    #include \"butteraugli/butteraugli.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    size_t num_images1 = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 10);\\n    std::vector<butteraugli::ImageF> images1;\\n    for (size_t i = 0; i < num_images1; ++i) {\\n        size_t xsize = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100);\\n        size_t ysize = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100);\\n        butteraugli::ImageF image(xsize, ysize);\\n        for (size_t y = 0; y < ysize; ++y) {\\n            for (size_t x = 0; x < xsize; ++x) {\\n                image.Row(y)[x] = fuzzed_data.ConsumeFloatingPoint<float>();\\n            }\\n        }\\n        images1.push_back(image);\\n    }\\n\\n    size_t num_images2 = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 10);\\n    std::vector<butteraugli::ImageF> images2;\\n    for (size_t i = 0; i < num_images2; ++i) {\\n        size_t xsize = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100);\\n        size_t ysize = fuzzed_data.ConsumeIntegralInRange<size_t>(1, 100);\\n        butteraugli::ImageF image(xsize, ysize);\\n        for (size_t y = 0; y < ysize; ++y) {\\n            for (size_t x = 0; x < xsize; ++x) {\\n                image.Row(y)[x] = fuzzed_data.ConsumeFloatingPoint<float>();\\n            }\\n        }\\n        images2.push_back(image);\\n    }\\n\\n    std::vector<butteraugli::ImageF> diffmap;\\n    float diff_value = 0.0f;\\n    butteraugli::ButteraugliInterface(images1, images2, 1.0, &diffmap, &diff_value);\\n\\n    // Call the required function\\n    butteraugli::ButteraugliComparator comparator;\\n    comparator.Mask(&images1, &images2);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}