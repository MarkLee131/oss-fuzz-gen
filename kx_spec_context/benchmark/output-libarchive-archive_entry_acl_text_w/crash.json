{
    "samples": [

    {
        "benchmark": "output-libarchive-archive_entry_acl_text_w",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "3.59",
        "coverage_diff": "0.0032867930678546205",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"archive_entry.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    archive_entry *entry = archive_entry_new();\\n    if (entry == nullptr) {\\n        return 0;\\n    }\\n\\n    int flags = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Ensure that the entry is populated with some data\\n    std::string pathname = fuzzed_data.ConsumeRandomLengthString(100);\\n    archive_entry_set_pathname(entry, pathname.c_str());\\n\\n    // Invoke the function under test with the populated entry\\n    const wchar_t *result = archive_entry_acl_text_w(entry, flags);\\n\\n    if (result != nullptr) {\\n        size_t length = wcslen(result);\\n        (void)length;\\n    }\\n\\n    archive_entry_free(entry);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libarchive-archive_entry_acl_text_w",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "4.11",
        "coverage_diff": "0.0033139566469277994",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"archive_entry.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    archive_entry *entry = archive_entry_new();\\n    if (entry == nullptr) {\\n        return 0;\\n    }\\n\\n    // Set various properties on the entry to provide better coverage\\n    archive_entry_set_pathname(entry, fuzzed_data.ConsumeRandomLengthString(100).c_str());\\n    archive_entry_set_size(entry, fuzzed_data.ConsumeIntegral<uint64_t>());\\n    archive_entry_set_filetype(entry, fuzzed_data.ConsumeIntegral<int>());\\n    archive_entry_set_perm(entry, fuzzed_data.ConsumeIntegral<int>());\\n\\n    int flags = fuzzed_data.ConsumeIntegral<int>();\\n\\n    const wchar_t *result = archive_entry_acl_text_w(entry, flags);\\n\\n    if (result != nullptr) {\\n        size_t length = wcslen(result);\\n        (void)length;\\n    }\\n\\n    archive_entry_free(entry);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libarchive-archive_entry_acl_text_w",
        "sample": "03",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "3.99",
        "coverage_diff": "0.0033139566469277994",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"archive_entry.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Ensure there is enough data to consume\\n    if (size < sizeof(int)) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    archive_entry *entry = archive_entry_new();\\n    if (entry == nullptr) {\\n        return 0;\\n    }\\n\\n    // Consume an integer for the flags\\n    int flags = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Consume a string for the pathname\\n    std::string pathname = fuzzed_data.ConsumeRandomLengthString();\\n    if (pathname.empty()) {\\n        pathname = \"default_path\";\\n    }\\n    archive_entry_set_pathname(entry, pathname.c_str());\\n\\n    // Consume an integer for the size\\n    int64_t size_value = fuzzed_data.ConsumeIntegral<int64_t>();\\n    archive_entry_set_size(entry, size_value);\\n\\n    // Call the function under test with the non-null input\\n    const wchar_t *result = archive_entry_acl_text_w(entry, flags);\\n\\n    if (result != nullptr) {\\n        size_t length = wcslen(result);\\n        (void)length;\\n    }\\n\\n    archive_entry_free(entry);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libarchive-archive_entry_acl_text_w",
        "sample": "04",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "3.80",
        "coverage_diff": "0.0041560275981963385",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"archive_entry.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    // Initialize the library or any resources within archive_entry_acl_text_w needed for the fuzzing process here.\\n    // No specific initialization required for this function.\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Create a FuzzedDataProvider to generate fuzzed input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Generate fuzzed input for archive_entry structure\\n    archive_entry *entry = archive_entry_new();\\n    if (entry == nullptr) {\\n        return 0; // If allocation fails, return early\\n    }\\n\\n    // Generate fuzzed input for flags\\n    int flags = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Generate fuzzed input for ACL text\\n    std::string acl_text = fuzzed_data.ConsumeRandomLengthString(size);\\n    size_t w_acl_text_size = mbstowcs(nullptr, acl_text.c_str(), 0);\\n    if (w_acl_text_size == static_cast<size_t>(-1)) {\\n        archive_entry_free(entry);\\n        return 0; // If conversion fails, return early\\n    }\\n    w_acl_text_size += 1; // For null terminator\\n    wchar_t *w_acl_text = new wchar_t[w_acl_text_size];\\n    mbstowcs(w_acl_text, acl_text.c_str(), w_acl_text_size);\\n\\n    // Set the ACL text in the archive entry\\n    archive_entry_acl_clear(entry);\\n    int type = fuzzed_data.ConsumeIntegral<int>(); // Generate fuzzed input for type\\n    int permset = fuzzed_data.ConsumeIntegral<int>(); // Generate fuzzed input for permset\\n    int tag = ARCHIVE_ENTRY_ACL_USER; // Use a constant value for tag\\n    int qual = fuzzed_data.ConsumeIntegral<int>(); // Generate fuzzed input for qual\\n\\n    archive_entry_acl_add_entry_w(entry, type, permset, tag, qual, w_acl_text);\\n\\n    // Call the function under test\\n    const wchar_t *result = archive_entry_acl_text_w(entry, flags);\\n\\n    // Validate the result\\n    if (result != nullptr) {\\n        // Ensure the returned string is null-terminated\\n        size_t length = wcslen(result);\\n        (void)length; // Suppress unused variable warning\\n    }\\n\\n    // Clean up\\n    delete[] w_acl_text;\\n    archive_entry_free(entry);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libarchive-archive_entry_acl_text_w",
        "sample": "05",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.003938718965610909",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n#include <cwchar>\\n\\nextern \"C\" {\\n#include \"archive_entry.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    // Initialize the library or any resources within archive_entry_acl_text_w needed for the fuzzing process here.\\n    // No specific initialization required for this function.\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Create a FuzzedDataProvider to generate fuzzed input data\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Generate fuzzed input for archive_entry structure\\n    archive_entry *entry = archive_entry_new();\\n    if (entry == nullptr) {\\n        return 0; // If allocation fails, return early\\n    }\\n\\n    // Generate fuzzed input for flags\\n    int flags = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Generate fuzzed input for ACL entry parameters\\n    int type = fuzzed_data.ConsumeIntegral<int>();\\n    int permset = fuzzed_data.ConsumeIntegral<int>();\\n    int tag = fuzzed_data.ConsumeIntegral<int>();\\n    int qual = fuzzed_data.ConsumeIntegral<int>();\\n\\n    // Generate fuzzed input for ACL text\\n    std::string fuzzed_acl_text = fuzzed_data.ConsumeRandomLengthString(100);\\n    std::wstring w_fuzzed_acl_text(fuzzed_acl_text.begin(), fuzzed_acl_text.end());\\n    archive_entry_acl_clear(entry);\\n    archive_entry_acl_add_entry_w(entry, type, permset, tag, qual, w_fuzzed_acl_text.c_str());\\n\\n    // Call the function under test\\n    la_ssize_t len;\\n    const wchar_t *result = archive_entry_acl_to_text_w(entry, &len, flags);\\n\\n    // Validate the result\\n    if (result != nullptr) {\\n        // Ensure the returned string is null-terminated\\n        size_t length = wcslen(result);\\n        (void)length; // Suppress unused variable warning\\n    }\\n\\n    // Clean up\\n    archive_entry_free(entry);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}