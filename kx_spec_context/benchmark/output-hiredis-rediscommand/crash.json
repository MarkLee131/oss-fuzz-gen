{
    "samples": [

    {
        "benchmark": "output-hiredis-rediscommand",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include <hiredis/hiredis.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(redisContext) + 1) {\\n        return 0; // Not enough data to proceed.\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    // Create and initialize a redisContext.\\n    redisContext *c = redisConnect(\"127.0.0.1\", 6379);\\n    if (c == NULL || c->err) {\\n        if (c) {\\n            redisFree(c);\\n        }\\n        return 0; // Unable to connect to Redis server.\\n    }\\n\\n    // Extract a command string from the fuzzed data.\\n    std::string command = dataProvider.ConsumeRandomLengthString(size - sizeof(redisContext));\\n    if (command.empty()) {\\n        redisFree(c);\\n        return 0; // No command to send.\\n    }\\n\\n    // Call the function under test.\\n    void *reply = redisCommand(c, command.c_str());\\n    \\n    // Handle the reply.\\n    if (reply != NULL) {\\n        freeReplyObject(reply);\\n    }\\n\\n    // Clean up the redisContext.\\n    redisFree(c);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-hiredis-rediscommand",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include <hiredis/hiredis.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(redisContext) + 1) {\\n        return 0; // Not enough data to proceed.\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    // Create and initialize a redisContext.\\n    redisContext *c = redisConnect(\"127.0.0.1\", 6379);\\n    if (c == NULL || c->err) {\\n        if (c) {\\n            redisFree(c);\\n        }\\n        return 0; // Unable to connect to Redis server.\\n    }\\n\\n    // Extract a command string from the fuzzed data.\\n    std::string command = dataProvider.ConsumeRandomLengthString();\\n    if (command.empty()) {\\n        redisFree(c);\\n        return 0; // No command to send.\\n    }\\n\\n    // Call the function under test.\\n    void *reply = redisCommand(c, command.c_str());\\n    \\n    // Handle the reply.\\n    if (reply != NULL) {\\n        freeReplyObject(reply);\\n    }\\n\\n    // Clean up the redisContext.\\n    redisFree(c);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-hiredis-rediscommand",
        "sample": "03",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include <hiredis/hiredis.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(redisContext) + 1) {\\n        return 0; // Not enough data to proceed.\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    // Create and initialize a redisContext.\\n    redisContext *c = redisConnect(\"127.0.0.1\", 6379);\\n    if (c == NULL || c->err) {\\n        if (c) {\\n            redisFree(c);\\n        }\\n        return 0; // Unable to connect to Redis server.\\n    }\\n\\n    // Extract a command string from the fuzzed data.\\n    std::string command = dataProvider.ConsumeRandomLengthString();\\n    if (command.empty()) {\\n        redisFree(c);\\n        return 0; // No command to send.\\n    }\\n\\n    // Call the function under test.\\n    void *reply = redisCommand(c, command.c_str());\\n    \\n    // Handle the reply.\\n    if (reply != NULL) {\\n        freeReplyObject(reply);\\n    }\\n\\n    // Clean up the redisContext.\\n    redisFree(c);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-hiredis-rediscommand",
        "sample": "04",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <algorithm>\\n#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include <hiredis/hiredis.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(redisContext) + 1) {\\n        return 0; // Not enough data to proceed.\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    // Create and initialize a redisContext.\\n    redisContext *c = redisConnect(\"127.0.0.1\", 6379);\\n    if (c == NULL || c->err) {\\n        if (c) {\\n            redisFree(c);\\n        }\\n        return 0; // Unable to connect to Redis server.\\n    }\\n\\n    // Extract a command string from the fuzzed data.\\n    std::string command = dataProvider.ConsumeRandomLengthString();\\n    if (command.empty()) {\\n        redisFree(c);\\n        return 0; // No command to send.\\n    }\\n\\n    // Call the function under test.\\n    void *reply = redisCommand(c, command.c_str());\\n    \\n    // Handle the reply.\\n    if (reply != NULL) {\\n        freeReplyObject(reply);\\n    }\\n\\n    // Clean up the redisContext.\\n    redisFree(c);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-hiredis-rediscommand",
        "sample": "05",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include <hiredis/hiredis.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(redisContext) + 1) {\\n        return 0; // Not enough data to proceed.\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    // Create and initialize a redisContext.\\n    redisContext *c = redisConnect(\"127.0.0.1\", 6379);\\n    if (c == NULL || c->err) {\\n        if (c) {\\n            redisFree(c);\\n        }\\n        return 0; // Unable to connect to Redis server.\\n    }\\n\\n    // Extract a command string from the fuzzed data.\\n    std::string command = dataProvider.ConsumeRandomLengthString();\\n    if (command.empty()) {\\n        redisFree(c);\\n        return 0; // No command to send.\\n    }\\n\\n    // Call the function under test.\\n    void *reply = redisCommand(c, command.c_str());\\n    \\n    // Handle the reply.\\n    if (reply != NULL) {\\n        freeReplyObject(reply);\\n    }\\n\\n    // Clean up the redisContext.\\n    redisFree(c);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}