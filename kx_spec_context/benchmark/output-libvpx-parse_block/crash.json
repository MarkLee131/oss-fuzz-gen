{
    "samples": [

    {
        "benchmark": "output-libvpx-parse_block",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include <vpx/vpx_decoder.h>\\n#include <vpx/vp8dx.h>\\n#include <vpx/vp9.h>\\n#include <vpx/vp9/decoder/vp9_onyxd_int.h>\\n#include <vpx/vp9/common/vp9_blockd.h>\\n#include <vpx/vp9/common/vp9_common.h>\\n#include <vpx/vp9/common/vp9_enums.h>\\n#include <vpx/vp9/common/vp9_tile_common.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    // Initialize the library or any resources within parse_block needed for the fuzzing process here.\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    // Create and initialize TileWorkerData structure\\n    TileWorkerData tileWorkerData;\\n    tileWorkerData.bit_reader = {};\\n    tileWorkerData.xd = {};\\n    tileWorkerData.error_info = {};\\n\\n    // Create and initialize VP9Decoder structure\\n    VP9Decoder vp9Decoder;\\n    vp9Decoder.common = {};\\n    vp9Decoder.row_mt_worker_data = nullptr;\\n    vp9Decoder.tile_buffers = nullptr;\\n    vp9Decoder.decrypt_cb = nullptr;\\n    vp9Decoder.decrypt_state = nullptr;\\n\\n    // Generate random values for the integer parameters\\n    int mi_row = dataProvider.ConsumeIntegral<int>();\\n    int mi_col = dataProvider.ConsumeIntegral<int>();\\n    int bwl = dataProvider.ConsumeIntegral<int>();\\n    int bhl = dataProvider.ConsumeIntegral<int>();\\n\\n    // Generate a random BLOCK_SIZE value\\n    BLOCK_SIZE block_size = static_cast<BLOCK_SIZE>(dataProvider.ConsumeEnum<BLOCK_SIZE>());\\n\\n    // Call the target function\\n    parse_block(&tileWorkerData, &vp9Decoder, mi_row, mi_col, block_size, bwl, bhl);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libvpx-parse_block",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"vpx/vpx_decoder.h\"\\n#include \"vpx/vp8dx.h\"\\n#include \"vpx/vp9/decoder/vp9_decoder.h\"\\n#include \"vpx/vp9/common/vp9_blockd.h\"\\n#include \"vpx/vp9/common/vp9_common.h\"\\n#include \"vpx/vp9/common/vp9_enums.h\"\\n#include \"vpx/vp9/common/vp9_tile_common.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    // Initialize the library or any resources within parse_block needed for the fuzzing process here.\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    // Create and initialize TileWorkerData structure\\n    TileWorkerData tileWorkerData;\\n    tileWorkerData.bit_reader = {};\\n    tileWorkerData.xd = {};\\n    tileWorkerData.error_info = {};\\n\\n    // Create and initialize VP9Decoder structure\\n    VP9Decoder vp9Decoder;\\n    vp9Decoder.common = {};\\n    vp9Decoder.row_mt_worker_data = nullptr;\\n    vp9Decoder.tile_buffers = nullptr;\\n    vp9Decoder.decrypt_cb = nullptr;\\n    vp9Decoder.decrypt_state = nullptr;\\n\\n    // Generate random values for the integer parameters\\n    int mi_row = dataProvider.ConsumeIntegral<int>();\\n    int mi_col = dataProvider.ConsumeIntegral<int>();\\n    int bwl = dataProvider.ConsumeIntegral<int>();\\n    int bhl = dataProvider.ConsumeIntegral<int>();\\n\\n    // Generate a random BLOCK_SIZE value\\n    BLOCK_SIZE block_size = static_cast<BLOCK_SIZE>(dataProvider.ConsumeEnum<BLOCK_SIZE>());\\n\\n    // Call the target function\\n    parse_block(&tileWorkerData, &vp9Decoder, mi_row, mi_col, block_size, bwl, bhl);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libvpx-parse_block",
        "sample": "03",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\n// Ensure C headers are wrapped in extern \"C\"\\nextern \"C\" {\\n#include \"vpx/vpx_decoder.h\"\\n#include \"vpx/vp8dx.h\"\\n#include \"vpx/vp9/decoder/vp9_decoder.h\"\\n#include \"vpx/vp9/common/vp9_blockd.h\"\\n#include \"vpx/vp9/common/vp9_common.h\"\\n#include \"vpx/vp9/common/vp9_enums.h\"\\n#include \"vpx/vp9/common/vp9_tile_common.h\"\\n}\\n\\n// Declare the parse_block function as it is used in the fuzzing function\\nextern \"C\" void parse_block(TileWorkerData *tile_worker_data, VP9Decoder *pbi, int mi_row, int mi_col, BLOCK_SIZE bsize, int bwl, int bhl);\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    // Initialize the library or any resources within parse_block needed for the fuzzing process here.\\n    // Example: Initialize any global state or allocate resources.\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    // Create and initialize TileWorkerData structure\\n    TileWorkerData tileWorkerData;\\n    tileWorkerData.bit_reader = {};\\n    tileWorkerData.xd = {};\\n    tileWorkerData.error_info = {};\\n\\n    // Create and initialize VP9Decoder structure\\n    VP9Decoder vp9Decoder;\\n    vp9Decoder.common = {};\\n    vp9Decoder.row_mt_worker_data = nullptr;\\n    vp9Decoder.tile_buffers = nullptr;\\n    vp9Decoder.decrypt_cb = nullptr;\\n    vp9Decoder.decrypt_state = nullptr;\\n\\n    // Generate random values for the integer parameters\\n    int mi_row = dataProvider.ConsumeIntegral<int>();\\n    int mi_col = dataProvider.ConsumeIntegral<int>();\\n    int bwl = dataProvider.ConsumeIntegral<int>();\\n    int bhl = dataProvider.ConsumeIntegral<int>();\\n\\n    // Generate a random BLOCK_SIZE value\\n    BLOCK_SIZE block_size = static_cast<BLOCK_SIZE>(dataProvider.ConsumeEnum<BLOCK_SIZE>());\\n\\n    // Call the target function\\n    parse_block(&tileWorkerData, &vp9Decoder, mi_row, mi_col, block_size, bwl, bhl);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libvpx-parse_block",
        "sample": "04",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"vp9/decoder/vp9_decoder.h\"\\n#include \"vp9/common/vp9_blockd.h\"\\n#include \"vp9/common/vp9_common.h\"\\n#include \"vp9/common/vp9_enums.h\"\\n#include \"vp9/common/vp9_tile_common.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    TileWorkerData tileWorkerData;\\n    tileWorkerData.bit_reader = {};\\n    tileWorkerData.xd = {};\\n    tileWorkerData.error_info = {};\\n\\n    VP9Decoder vp9Decoder;\\n    vp9Decoder.common = {};\\n    vp9Decoder.row_mt_worker_data = nullptr;\\n    // Initialize tile_buffers properly\\n    TileBuffer tile_buffers[64];\\n    for (int i = 0; i < 64; ++i) {\\n        vp9Decoder.tile_buffers[i] = tile_buffers[i];\\n    }\\n    vp9Decoder.decrypt_cb = nullptr;\\n    vp9Decoder.decrypt_state = nullptr;\\n\\n    int mi_row = dataProvider.ConsumeIntegral<int>();\\n    int mi_col = dataProvider.ConsumeIntegral<int>();\\n    int bwl = dataProvider.ConsumeIntegral<int>();\\n    int bhl = dataProvider.ConsumeIntegral<int>();\\n\\n    // Consume a valid BLOCK_SIZE enum value\\n    BLOCK_SIZE block_size = static_cast<BLOCK_SIZE>(dataProvider.ConsumeIntegralInRange<int>(0, BLOCK_SIZES_ALL - 1));\\n\\n    // Ensure parse_block is declared\\n    extern void parse_block(TileWorkerData *tile_worker_data, VP9Decoder *pbi, int mi_row, int mi_col, BLOCK_SIZE bsize, int bwl, int bhl);\\n\\n    parse_block(&tileWorkerData, &vp9Decoder, mi_row, mi_col, block_size, bwl, bhl);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libvpx-parse_block",
        "sample": "05",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include <vpx/vpx_decoder.h>\\n#include <vpx/vp8dx.h>\\n#include <vpx/vp9/decoder/vp9_decoder.h>\\n#include <vpx/vp9/decoder/vp9_blockd.h>\\n#include <vpx/vp9/common/vp9_enums.h>\\n#include <vpx/vp9/common/vp9_tile_common.h>\\n\\n// Assuming parse_block is declared in one of these headers\\nvoid parse_block(TileWorkerData *tile_worker_data, VP9Decoder *pbi, int mi_row, int mi_col, BLOCK_SIZE bsize, int bwl, int bhl);\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    // Initialize the library or any resources within parse_block needed for the fuzzing process here.\\n    // Example: Initialize any global state or allocate resources.\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    // Create and initialize TileWorkerData structure\\n    TileWorkerData tileWorkerData;\\n    memset(&tileWorkerData, 0, sizeof(tileWorkerData));\\n\\n    // Create and initialize VP9Decoder structure\\n    VP9Decoder vp9Decoder;\\n    memset(&vp9Decoder, 0, sizeof(vp9Decoder));\\n\\n    // Generate random values for the integer parameters\\n    int mi_row = dataProvider.ConsumeIntegral<int>();\\n    int mi_col = dataProvider.ConsumeIntegral<int>();\\n    int bwl = dataProvider.ConsumeIntegral<int>();\\n    int bhl = dataProvider.ConsumeIntegral<int>();\\n\\n    // Generate a random BLOCK_SIZE value\\n    BLOCK_SIZE block_size = static_cast<BLOCK_SIZE>(dataProvider.ConsumeEnum<BLOCK_SIZE>());\\n\\n    // Call the target function\\n    parse_block(&tileWorkerData, &vp9Decoder, mi_row, mi_col, block_size, bwl, bhl);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}