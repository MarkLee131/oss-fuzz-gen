{
    "samples": [

    {
        "benchmark": "output-avahi-avahi_string_list_add_pair",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"avahi-common/strlst.h\"\\n#include \"avahi-common/malloc.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    avahi_set_allocator_malloc();\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    // Generate random AvahiStringList\\n    AvahiStringList *list = nullptr;\\n    if (dataProvider.ConsumeBool()) {\\n        std::string initialKey = dataProvider.ConsumeRandomLengthString(100);\\n        std::string initialValue = dataProvider.ConsumeRandomLengthString(100);\\n        list = avahi_string_list_add_pair(list, initialKey.c_str(), initialValue.c_str());\\n    }\\n\\n    // Generate random key and value\\n    std::string key = dataProvider.ConsumeRandomLengthString(100);\\n    std::string value = dataProvider.ConsumeRandomLengthString(100);\\n    if (key.empty()) {\\n        return 0; // Key must be non-null and non-empty\\n    }\\n\\n    // Call the function under test\\n    AvahiStringList *result = avahi_string_list_add_pair(list, key.c_str(), value.empty() ? nullptr : value.c_str());\\n\\n    // Clean up\\n    avahi_string_list_free(result);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-avahi-avahi_string_list_add_pair",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"avahi-common/strlst.h\"\\n#include \"avahi-common/malloc.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    avahi_set_allocator_malloc();\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    AvahiStringList *list = nullptr;\\n    if (dataProvider.ConsumeBool()) {\\n        std::string initialKey = dataProvider.ConsumeRandomLengthString(100);\\n        std::string initialValue = dataProvider.ConsumeRandomLengthString(100);\\n        list = avahi_string_list_add_pair(list, initialKey.c_str(), initialValue.c_str());\\n    }\\n\\n    std::string key = dataProvider.ConsumeRandomLengthString(100);\\n    std::string value = dataProvider.ConsumeRandomLengthString(100);\\n    if (key.empty()) {\\n        return 0;\\n    }\\n\\n    AvahiStringList *result = avahi_string_list_add_pair(list, key.c_str(), value.empty() ? nullptr : value.c_str());\\n\\n    avahi_string_list_free(result);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-avahi-avahi_string_list_add_pair",
        "sample": "03",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"avahi-common/strlst.h\"\\n#include \"avahi-common/malloc.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    avahi_set_allocator_malloc();\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    AvahiStringList *list = nullptr;\\n    if (dataProvider.ConsumeBool()) {\\n        std::string initialKey = dataProvider.ConsumeRandomLengthString(100);\\n        std::string initialValue = dataProvider.ConsumeRandomLengthString(100);\\n        list = avahi_string_list_add_pair(list, initialKey.c_str(), initialValue.c_str());\\n    }\\n\\n    std::string key = dataProvider.ConsumeRandomLengthString(100);\\n    std::string value = dataProvider.ConsumeRandomLengthString(100);\\n    if (key.empty()) {\\n        avahi_string_list_free(list);\\n        return 0;\\n    }\\n\\n    AvahiStringList *result = avahi_string_list_add_pair(list, key.c_str(), value.empty() ? nullptr : value.c_str());\\n\\n    avahi_string_list_free(result);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-avahi-avahi_string_list_add_pair",
        "sample": "04",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"avahi-common/strlst.h\"\\n#include \"avahi-common/malloc.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    avahi_set_allocator_malloc();\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    // Generate random AvahiStringList\\n    AvahiStringList *list = nullptr;\\n    if (dataProvider.ConsumeBool()) {\\n        std::string initialKey = dataProvider.ConsumeRandomLengthString(100);\\n        std::string initialValue = dataProvider.ConsumeRandomLengthString(100);\\n        list = avahi_string_list_add_pair(list, initialKey.c_str(), initialValue.c_str());\\n    }\\n\\n    // Generate random key and value\\n    std::string key = dataProvider.ConsumeRandomLengthString(100);\\n    std::string value = dataProvider.ConsumeRandomLengthString(100);\\n    if (key.empty()) {\\n        return 0; // Key must be non-null and non-empty\\n    }\\n\\n    // Call the function under test\\n    AvahiStringList *result = avahi_string_list_add_pair(list, key.c_str(), value.empty() ? nullptr : value.c_str());\\n\\n    // Clean up\\n    avahi_string_list_free(result);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-avahi-avahi_string_list_add_pair",
        "sample": "05",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"avahi-common/strlst.h\"\\n#include \"avahi-common/malloc.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    avahi_set_allocator_malloc();\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    AvahiStringList *list = nullptr;\\n    if (dataProvider.ConsumeBool()) {\\n        std::string initialKey = dataProvider.ConsumeRandomLengthString(100);\\n        std::string initialValue = dataProvider.ConsumeRandomLengthString(100);\\n        list = avahi_string_list_add_pair(list, initialKey.c_str(), initialValue.c_str());\\n    }\\n\\n    std::string key = dataProvider.ConsumeRandomLengthString(100);\\n    std::string value = dataProvider.ConsumeRandomLengthString(100);\\n    if (key.empty()) {\\n        return 0;\\n    }\\n\\n    AvahiStringList *result = avahi_string_list_add_pair(list, key.c_str(), value.empty() ? nullptr : value.c_str());\\n\\n    avahi_string_list_free(result);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}