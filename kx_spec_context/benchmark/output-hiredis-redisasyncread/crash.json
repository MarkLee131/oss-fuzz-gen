{
    "samples": [

    {
        "benchmark": "output-hiredis-redisasyncread",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"hiredis/async.h\"\\n#include \"hiredis/hiredis.h\"\\n#include \"hiredis/dict.h\"\\n#include \"hiredis/alloc.h\"\\n#include \"hiredis/async_private.h\"\\n#include \"hiredis/sds.h\"\\n#include \"hiredis/read.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    // Initialize the library or any resources within redisAsyncRead within the project needed for the fuzzing process here.\\n    // TODO: Initialize any necessary resources for hiredis.\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    // Create a mock `redisAsyncContext` structure for fuzzing\\n    redisAsyncContext ac;\\n    redisContext c;\\n    ac.c = c;\\n\\n    // Populate the `redisContext` buffer with fuzzed data\\n    c.reader = redisReaderCreate();\\n    c.reader->buf = static_cast<char*>(malloc(size));\\n    if (c.reader->buf == nullptr) {\\n        return 0; // Handle malloc failure\\n    }\\n    memcpy(c.reader->buf, data, size);\\n    c.reader->len = size;\\n\\n    // Call the function under test\\n    redisAsyncRead(&ac);\\n\\n    // Clean up\\n    free(c.reader->buf);\\n    redisReaderFree(c.reader);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-hiredis-redisasyncread",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <iterator>\\n#include <cctype>\\n#include <algorithm> // Ensure the algorithm header is included\\n\\n// Ensure C headers are included correctly\\nextern \"C\" {\\n#include \"hiredis/async.h\"\\n#include \"hiredis/hiredis.h\"\\n#include \"hiredis/dict.h\"\\n#include \"hiredis/alloc.h\"\\n#include \"hiredis/async_private.h\"\\n#include \"hiredis/sds.h\"\\n#include \"hiredis/read.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    // Initialize the library or any resources within redisAsyncRead within the project needed for the fuzzing process here.\\n    // TODO: Initialize any necessary resources for hiredis.\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    // Create a mock `redisAsyncContext` structure for fuzzing\\n    redisAsyncContext ac;\\n    redisContext c;\\n    ac.c = c;\\n\\n    // Populate the `redisContext` buffer with fuzzed data\\n    c.reader = redisReaderCreate();\\n    c.reader->buf = static_cast<char*>(malloc(size));\\n    if (c.reader->buf == nullptr) {\\n        // Handle allocation failure\\n        redisReaderFree(c.reader);\\n        return 0;\\n    }\\n    memcpy(c.reader->buf, data, size);\\n    c.reader->len = size;\\n\\n    // Call the function under test\\n    redisAsyncRead(&ac);\\n\\n    // Clean up\\n    free(c.reader->buf);\\n    redisReaderFree(c.reader);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-hiredis-redisasyncread",
        "sample": "03",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"hiredis/async.h\"\\n#include \"hiredis/hiredis.h\"\\n#include \"hiredis/dict.h\"\\n#include \"hiredis/alloc.h\"\\n#include \"hiredis/async_private.h\"\\n#include \"hiredis/sds.h\"\\n#include \"hiredis/read.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    // Initialize the library or any resources within redisAsyncRead within the project needed for the fuzzing process here.\\n    // TODO: Initialize any necessary resources for hiredis.\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    // Create a mock `redisAsyncContext` structure for fuzzing\\n    redisAsyncContext ac;\\n    redisContext c;\\n    ac.c = &c;\\n\\n    // Populate the `redisContext` buffer with fuzzed data\\n    c.reader = redisReaderCreate();\\n    c.reader->buf = static_cast<char*>(malloc(size));\\n    if (c.reader->buf == nullptr) {\\n        return 0; // Handle allocation failure gracefully\\n    }\\n    memcpy(c.reader->buf, data, size);\\n    c.reader->len = size;\\n\\n    // Call the function under test\\n    redisAsyncRead(&ac);\\n\\n    // Clean up\\n    free(c.reader->buf);\\n    redisReaderFree(c.reader);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-hiredis-redisasyncread",
        "sample": "04",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"hiredis/async.h\"\\n#include \"hiredis/hiredis.h\"\\n#include \"hiredis/dict.h\"\\n#include \"hiredis/alloc.h\"\\n#include \"hiredis/async_private.h\"\\n#include \"hiredis/sds.h\"\\n#include \"hiredis/read.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    // Initialize the library or any resources within redisAsyncRead within the project needed for the fuzzing process here.\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    // Create a mock `redisAsyncContext` structure for fuzzing\\n    redisAsyncContext ac;\\n    redisContext c;\\n    ac.c = c;\\n\\n    // Populate the `redisContext` buffer with fuzzed data\\n    c.reader = redisReaderCreate();\\n    c.reader->buf = static_cast<char*>(malloc(size));\\n    if (c.reader->buf == nullptr) {\\n        redisReaderFree(c.reader);\\n        return 0;\\n    }\\n    memcpy(c.reader->buf, data, size);\\n    c.reader->len = size;\\n\\n    // Call the function under test\\n    redisAsyncRead(&ac);\\n\\n    // Clean up\\n    free(c.reader->buf);\\n    redisReaderFree(c.reader);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-hiredis-redisasyncread",
        "sample": "05",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"hiredis/async.h\"\\n#include \"hiredis/hiredis.h\"\\n#include \"hiredis/dict.h\"\\n#include \"hiredis/alloc.h\"\\n#include \"hiredis/async_private.h\"\\n#include \"hiredis/sds.h\"\\n#include \"hiredis/read.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    // Initialize the library or any resources within redisAsyncRead within the project needed for the fuzzing process here.\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    // Create a mock `redisAsyncContext` structure for fuzzing\\n    redisAsyncContext ac;\\n    redisContext c;\\n    ac.c = c;\\n\\n    // Populate the `redisContext` buffer with fuzzed data\\n    c.reader = redisReaderCreate();\\n    c.reader->buf = static_cast<char*>(malloc(size));\\n    if (c.reader->buf == nullptr) {\\n        return 0; // If malloc fails, return early\\n    }\\n    memcpy(c.reader->buf, data, size);\\n    c.reader->len = size;\\n\\n    // Call the function under test\\n    redisAsyncRead(&ac);\\n\\n    // Clean up\\n    free(c.reader->buf);\\n    redisReaderFree(c.reader);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}