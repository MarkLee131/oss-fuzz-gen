{
    "samples": [

    {
        "benchmark": "output-libusb-libusb_get_bos_descriptor",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.60",
        "coverage_diff": "0.13203194321206743",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libusb.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n\\nextern \"C\" {\\n#include \"libusb.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    libusb_init(NULL);\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    libusb_device_handle *dev_handle = nullptr;\\n    libusb_bos_descriptor *bos_desc = nullptr;\\n\\n    dev_handle = libusb_open_device_with_vid_pid(NULL, fuzzed_data.ConsumeIntegral<uint16_t>(), fuzzed_data.ConsumeIntegral<uint16_t>());\\n    if (dev_handle == nullptr) {\\n        return 0;\\n    }\\n\\n    int result = libusb_get_bos_descriptor(dev_handle, &bos_desc);\\n\\n    if (result == 0 && bos_desc != nullptr) {\\n        libusb_free_bos_descriptor(bos_desc);\\n    }\\n\\n    libusb_close(dev_handle);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libusb-libusb_get_bos_descriptor",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "1.60",
        "coverage_diff": "0.13203194321206743",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libusb.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n\\nextern \"C\" {\\n#include \"libusb.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    libusb_init(NULL);\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    libusb_device_handle *dev_handle = nullptr;\\n    libusb_bos_descriptor *bos_desc = nullptr;\\n\\n    dev_handle = libusb_open_device_with_vid_pid(NULL, fuzzed_data.ConsumeIntegral<uint16_t>(), fuzzed_data.ConsumeIntegral<uint16_t>());\\n    if (dev_handle == nullptr) {\\n        return 0;\\n    }\\n\\n    int result = libusb_get_bos_descriptor(dev_handle, &bos_desc);\\n\\n    if (result == 0 && bos_desc != nullptr) {\\n        libusb_free_bos_descriptor(bos_desc);\\n    }\\n\\n    libusb_close(dev_handle);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libusb-libusb_get_bos_descriptor",
        "sample": "03",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.87",
        "coverage_diff": "0.26441881100266196",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libusb.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n\\nextern \"C\" {\\n#include \"libusb.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    libusb_init(NULL);\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    libusb_device_handle *dev_handle = nullptr;\\n    libusb_bos_descriptor *bos_desc = nullptr;\\n\\n    dev_handle = libusb_open_device_with_vid_pid(NULL, fuzzed_data.ConsumeIntegral<uint16_t>(), fuzzed_data.ConsumeIntegral<uint16_t>());\\n    if (dev_handle == nullptr) {\\n        return 0;\\n    }\\n\\n    int result = libusb_get_bos_descriptor(dev_handle, &bos_desc);\\n\\n    if (result == 0 && bos_desc != nullptr) {\\n        libusb_free_bos_descriptor(bos_desc);\\n    }\\n\\n    libusb_close(dev_handle);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libusb-libusb_get_bos_descriptor",
        "sample": "04",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.87",
        "coverage_diff": "0.26441881100266196",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libusb.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n\\nextern \"C\" {\\n#include \"libusb.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    libusb_init(NULL);\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    libusb_device_handle *dev_handle = nullptr;\\n    libusb_bos_descriptor *bos_desc = nullptr;\\n\\n    dev_handle = libusb_open_device_with_vid_pid(NULL, fuzzed_data.ConsumeIntegral<uint16_t>(), fuzzed_data.ConsumeIntegral<uint16_t>());\\n    if (dev_handle == nullptr) {\\n        return 0;\\n    }\\n\\n    int result = libusb_get_bos_descriptor(dev_handle, &bos_desc);\\n\\n    if (result == 0 && bos_desc != nullptr) {\\n        libusb_free_bos_descriptor(bos_desc);\\n    }\\n\\n    libusb_close(dev_handle);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libusb-libusb_get_bos_descriptor",
        "sample": "05",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.87",
        "coverage_diff": "0.26441881100266196",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libusb.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n\\nextern \"C\" {\\n#include \"libusb.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    libusb_init(NULL);\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    libusb_device_handle *dev_handle = nullptr;\\n    libusb_bos_descriptor *bos_desc = nullptr;\\n\\n    dev_handle = libusb_open_device_with_vid_pid(NULL, fuzzed_data.ConsumeIntegral<uint16_t>(), fuzzed_data.ConsumeIntegral<uint16_t>());\\n    if (dev_handle == nullptr) {\\n        return 0;\\n    }\\n\\n    int result = libusb_get_bos_descriptor(dev_handle, &bos_desc);\\n\\n    if (result == 0 && bos_desc != nullptr) {\\n        libusb_free_bos_descriptor(bos_desc);\\n    }\\n\\n    libusb_close(dev_handle);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}