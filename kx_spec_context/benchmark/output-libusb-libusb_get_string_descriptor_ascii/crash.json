{
    "samples": [

    {
        "benchmark": "output-libusb-libusb_get_string_descriptor_ascii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n\\nextern \"C\" {\\n#include <libusb-1.0/libusb.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    libusb_init(NULL);\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create a dummy libusb_device_handle for fuzzing\\n    libusb_device_handle dummy_handle;\\n    libusb_device_handle *dev_handle = &dummy_handle;\\n\\n    uint8_t desc_index = fuzzed_data.ConsumeIntegral<uint8_t>();\\n    int length = fuzzed_data.ConsumeIntegralInRange<int>(1, 255);\\n    unsigned char *buffer = static_cast<unsigned char *>(malloc(length));\\n\\n    if (buffer == nullptr) {\\n        return 0;\\n    }\\n\\n    int result = libusb_get_string_descriptor_ascii(dev_handle, desc_index, buffer, length);\\n\\n    free(buffer);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libusb-libusb_get_string_descriptor_ascii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.69",
        "coverage_diff": "0.25199645075421473",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n\\nextern \"C\" {\\n#include \"libusb.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    libusb_init(NULL);\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(uintptr_t) + sizeof(uint8_t) + sizeof(int)) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    libusb_device_handle *dev_handle = nullptr;\\n    libusb_device **devs;\\n    ssize_t cnt = libusb_get_device_list(NULL, &devs);\\n    if (cnt < 0) {\\n        return 0;\\n    }\\n\\n    for (ssize_t i = 0; i < cnt; i++) {\\n        libusb_device *dev = devs[i];\\n        libusb_open(dev, &dev_handle);\\n        if (dev_handle != nullptr) {\\n            break;\\n        }\\n    }\\n\\n    libusb_free_device_list(devs, 1);\\n\\n    uint8_t desc_index = fuzzed_data.ConsumeIntegral<uint8_t>();\\n    int length = fuzzed_data.ConsumeIntegralInRange<int>(1, 255);\\n    unsigned char *buffer = static_cast<unsigned char *>(malloc(length));\\n\\n    if (buffer == nullptr) {\\n        if (dev_handle != nullptr) {\\n            libusb_close(dev_handle);\\n        }\\n        return 0;\\n    }\\n\\n    if (dev_handle != nullptr) {\\n        int result = libusb_get_string_descriptor_ascii(dev_handle, desc_index, buffer, length);\\n        (void)result; // Suppress unused variable warning\\n        libusb_close(dev_handle);\\n    }\\n\\n    free(buffer);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libusb-libusb_get_string_descriptor_ascii",
        "sample": "03",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.51",
        "coverage_diff": "0.11109139307897072",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n\\nextern \"C\" {\\n#include \"libusb.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    libusb_init(NULL);\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    libusb_device_handle *dev_handle = reinterpret_cast<libusb_device_handle *>(fuzzed_data.ConsumeIntegral<uintptr_t>());\\n    uint8_t desc_index = fuzzed_data.ConsumeIntegral<uint8_t>();\\n    int length = fuzzed_data.ConsumeIntegralInRange<int>(1, 255);\\n    unsigned char *buffer = static_cast<unsigned char *>(malloc(length));\\n\\n    if (buffer == nullptr) {\\n        return 0;\\n    }\\n\\n    int result = libusb_get_string_descriptor_ascii(dev_handle, desc_index, buffer, length);\\n\\n    free(buffer);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libusb-libusb_get_string_descriptor_ascii",
        "sample": "04",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.51",
        "coverage_diff": "0.11109139307897072",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n\\nextern \"C\" {\\n#include \"libusb.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    libusb_init(NULL);\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    libusb_device_handle *dev_handle = reinterpret_cast<libusb_device_handle *>(fuzzed_data.ConsumeIntegral<uintptr_t>());\\n    uint8_t desc_index = fuzzed_data.ConsumeIntegral<uint8_t>();\\n    int length = fuzzed_data.ConsumeIntegralInRange<int>(1, 255);\\n    unsigned char *buffer = static_cast<unsigned char *>(malloc(length));\\n\\n    if (buffer == nullptr) {\\n        return 0;\\n    }\\n\\n    int result = libusb_get_string_descriptor_ascii(dev_handle, desc_index, buffer, length);\\n\\n    free(buffer);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libusb-libusb_get_string_descriptor_ascii",
        "sample": "05",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "8.24",
        "coverage_diff": "0.2571428571428571",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n\\nextern \"C\" {\\n#include \"libusb.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    libusb_init(NULL);\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Use fuzzed data to create a device handle with random VID and PID\\n    uint16_t vid = fuzzed_data.ConsumeIntegral<uint16_t>();\\n    uint16_t pid = fuzzed_data.ConsumeIntegral<uint16_t>();\\n\\n    libusb_device_handle *dev_handle = libusb_open_device_with_vid_pid(NULL, vid, pid);\\n    if (dev_handle == nullptr) {\\n        return 0;\\n    }\\n\\n    uint8_t desc_index = fuzzed_data.ConsumeIntegral<uint8_t>();\\n    int length = fuzzed_data.ConsumeIntegralInRange<int>(1, 255);\\n    unsigned char *buffer = static_cast<unsigned char *>(malloc(length));\\n\\n    if (buffer == nullptr) {\\n        libusb_close(dev_handle);\\n        return 0;\\n    }\\n\\n    int result = libusb_get_string_descriptor_ascii(dev_handle, desc_index, buffer, length);\\n\\n    // Additional interaction with the device handle for better coverage\\n    unsigned char dummy_data[4];\\n    libusb_control_transfer(dev_handle, LIBUSB_REQUEST_TYPE_STANDARD, LIBUSB_REQUEST_GET_DESCRIPTOR, \\n                            (LIBUSB_DT_STRING << 8) | desc_index, 0, dummy_data, sizeof(dummy_data), 1000);\\n\\n    free(buffer);\\n    libusb_close(dev_handle);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}