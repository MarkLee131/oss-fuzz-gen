{
    "samples": [

    {
        "benchmark": "output-libarchive-archive_entry_linkify",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.003232465909708263",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"archive_entry.h\"\\n#include \"archive.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider provider(data, size);\\n\\n    archive_entry_linkresolver *resolver = archive_entry_linkresolver_new();\\n    if (!resolver) {\\n        return 0;\\n    }\\n\\n    archive_entry *entry = archive_entry_new();\\n    archive_entry **entryp = &entry;\\n\\n    archive_entry *sparse_entry = archive_entry_new();\\n    archive_entry **sparse_entryp = &sparse_entry;\\n\\n    archive_entry_linkify(resolver, entryp, sparse_entryp);\\n\\n    archive_entry_free(entry);\\n    archive_entry_free(sparse_entry);\\n    archive_entry_linkresolver_free(resolver);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libarchive-archive_entry_linkify",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.003232465909708263",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"archive_entry.h\"\\n#include \"archive.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    // Initialize the library or any resources within archive_entry_linkify needed for the fuzzing process here.\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider provider(data, size);\\n\\n    // Create and initialize the resolver\\n    archive_entry_linkresolver *resolver = archive_entry_linkresolver_new();\\n    if (!resolver) {\\n        return 0;\\n    }\\n\\n    // Create and initialize the entryp\\n    archive_entry *entry = archive_entry_new();\\n    archive_entry **entryp = &entry;\\n\\n    // Create and initialize the sparse_entryp\\n    archive_entry *sparse_entry = archive_entry_new();\\n    archive_entry **sparse_entryp = &sparse_entry;\\n\\n    // Call the function under test\\n    archive_entry_linkify(resolver, entryp, sparse_entryp);\\n\\n    // Clean up\\n    archive_entry_free(entry);\\n    archive_entry_free(sparse_entry);\\n    archive_entry_linkresolver_free(resolver);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libarchive-archive_entry_linkify",
        "sample": "03",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.003232465909708263",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"archive_entry.h\"\\n#include \"archive.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider provider(data, size);\\n\\n    // Create and initialize the resolver\\n    archive_entry_linkresolver *resolver = archive_entry_linkresolver_new();\\n    if (!resolver) {\\n        return 0;\\n    }\\n\\n    // Create and initialize the entryp\\n    archive_entry *entry = archive_entry_new();\\n    archive_entry **entryp = &entry;\\n\\n    // Create and initialize the sparse_entryp\\n    archive_entry *sparse_entry = archive_entry_new();\\n    archive_entry **sparse_entryp = &sparse_entry;\\n\\n    // Call the function under test\\n    archive_entry_linkify(resolver, entryp, sparse_entryp);\\n\\n    // Clean up\\n    archive_entry_free(entry);\\n    archive_entry_free(sparse_entry);\\n    archive_entry_linkresolver_free(resolver);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libarchive-archive_entry_linkify",
        "sample": "04",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.003232465909708263",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"archive.h\"\\n#include \"archive_entry.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n    FuzzedDataProvider provider(data, size);\\n\\n    // Create and initialize the resolver\\n    archive_entry_linkresolver *resolver = archive_entry_linkresolver_new();\\n    if (!resolver) {\\n        return 0;\\n    }\\n\\n    // Create and initialize the entryp\\n    archive_entry *entry = archive_entry_new();\\n    archive_entry **entryp = &entry;\\n\\n    // Create and initialize the sparse_entryp\\n    archive_entry *sparse_entry = archive_entry_new();\\n    archive_entry **sparse_entryp = &sparse_entry;\\n\\n    // Call the function under test\\n    archive_entry_linkify(resolver, entryp, sparse_entryp);\\n\\n    // Clean up\\n    archive_entry_free(entry);\\n    archive_entry_free(sparse_entry);\\n    archive_entry_linkresolver_free(resolver);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libarchive-archive_entry_linkify",
        "sample": "05",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.003232465909708263",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"archive_entry.h\"\\n#include \"archive.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    // Initialize the library or any resources within archive_entry_linkify needed for the fuzzing process here.\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider provider(data, size);\\n\\n    // Create and initialize the resolver\\n    archive_entry_linkresolver *resolver = archive_entry_linkresolver_new();\\n    if (!resolver) {\\n        return 0;\\n    }\\n\\n    // Create and initialize the entryp\\n    archive_entry *entry = archive_entry_new();\\n    archive_entry **entryp = &entry;\\n\\n    // Create and initialize the sparse_entryp\\n    archive_entry *sparse_entry = archive_entry_new();\\n    archive_entry **sparse_entryp = &sparse_entry;\\n\\n    // Call the function under test\\n    archive_entry_linkify(resolver, entryp, sparse_entryp);\\n\\n    // Clean up\\n    archive_entry_free(entry);\\n    archive_entry_free(sparse_entry);\\n    archive_entry_linkresolver_free(resolver);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}