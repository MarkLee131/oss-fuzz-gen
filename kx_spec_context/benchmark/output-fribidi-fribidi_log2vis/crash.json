{
    "samples": [

    {
        "benchmark": "output-fribidi-fribidi_log2vis",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"fribidi-bidi-types.h\"\\n#include \"fribidi-flags.h\"\\n#include \"fribidi-joining-types.h\"\\n#include \"fribidi-types.h\"\\n#include \"fribidi-bidi-types-list.h\"\\n#include \"run.h\"\\n#include \"fribidi-joining-types-list.h\"\\n#include \"fribidi.h\"  // Include the main fribidi header\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size == 0) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider data_provider(data, size);\\n    \\n    std::vector<FriBidiChar> input_str = data_provider.ConsumeBytes<FriBidiChar>(data_provider.ConsumeIntegralInRange<size_t>(1, size / sizeof(FriBidiChar)));\\n    FriBidiStrIndex len = input_str.size();\\n    \\n    FriBidiParType base_dir = static_cast<FriBidiParType>(data_provider.ConsumeIntegralInRange<int>(0, 2));\\n    \\n    std::vector<FriBidiChar> visual_str(len);\\n    std::vector<FriBidiStrIndex> positions_L_to_V(len);\\n    std::vector<FriBidiStrIndex> positions_V_to_L(len);\\n    std::vector<FriBidiLevel> embedding_levels(len);\\n\\n    fribidi_log2vis(input_str.data(), len, &base_dir, visual_str.data(), positions_L_to_V.data(), positions_V_to_L.data(), embedding_levels.data());\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-fribidi-fribidi_log2vis",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"fribidi-bidi-types.h\"\\n#include \"fribidi-flags.h\"\\n#include \"fribidi-joining-types.h\"\\n#include \"fribidi-types.h\"\\n#include \"fribidi-bidi-types-list.h\"\\n#include \"run.h\"\\n#include \"fribidi-joining-types-list.h\"\\n#include \"fribidi.h\" // Ensure this header is included if it contains the function declarations.\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(FriBidiChar)) {\\n        return 0; // Avoid processing if size is too small to be valid input\\n    }\\n\\n    FuzzedDataProvider data_provider(data, size);\\n    \\n    std::vector<FriBidiChar> input_str = data_provider.ConsumeBytes<FriBidiChar>(data_provider.ConsumeIntegralInRange<size_t>(0, size / sizeof(FriBidiChar)));\\n    FriBidiStrIndex len = input_str.size();\\n    \\n    FriBidiParType base_dir = static_cast<FriBidiParType>(data_provider.ConsumeIntegralInRange<int>(0, 2));\\n    \\n    std::vector<FriBidiChar> visual_str(len);\\n    std::vector<FriBidiStrIndex> positions_L_to_V(len);\\n    std::vector<FriBidiStrIndex> positions_V_to_L(len);\\n    std::vector<FriBidiLevel> embedding_levels(len);\\n\\n    fribidi_log2vis(input_str.data(), len, &base_dir, visual_str.data(), positions_L_to_V.data(), positions_V_to_L.data(), embedding_levels.data());\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-fribidi-fribidi_log2vis",
        "sample": "03",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"fribidi-bidi-types.h\"\\n#include \"fribidi-flags.h\"\\n#include \"fribidi-joining-types.h\"\\n#include \"fribidi-types.h\"\\n#include \"fribidi-bidi-types-list.h\"\\n#include \"run.h\"\\n#include \"fribidi-joining-types-list.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size == 0) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider data_provider(data, size);\\n    \\n    size_t max_chars = size / sizeof(FriBidiChar);\\n    std::vector<FriBidiChar> input_str = data_provider.ConsumeBytes<FriBidiChar>(data_provider.ConsumeIntegralInRange<size_t>(1, max_chars));\\n    FriBidiStrIndex len = input_str.size();\\n    \\n    FriBidiParType base_dir = static_cast<FriBidiParType>(data_provider.ConsumeIntegralInRange<int>(0, 2));\\n    \\n    std::vector<FriBidiChar> visual_str(len);\\n    std::vector<FriBidiStrIndex> positions_L_to_V(len);\\n    std::vector<FriBidiStrIndex> positions_V_to_L(len);\\n    std::vector<FriBidiLevel> embedding_levels(len);\\n\\n    fribidi_log2vis(input_str.data(), len, &base_dir, visual_str.data(), positions_L_to_V.data(), positions_V_to_L.data(), embedding_levels.data());\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-fribidi-fribidi_log2vis",
        "sample": "04",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"fribidi-bidi-types.h\"\\n#include \"fribidi-flags.h\"\\n#include \"fribidi-joining-types.h\"\\n#include \"fribidi-types.h\"\\n#include \"fribidi-bidi-types-list.h\"\\n#include \"run.h\"\\n#include \"fribidi-joining-types-list.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size == 0) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider data_provider(data, size);\\n    \\n    std::vector<FriBidiChar> input_str = data_provider.ConsumeBytes<FriBidiChar>(data_provider.ConsumeIntegralInRange<size_t>(1, size / sizeof(FriBidiChar)));\\n    FriBidiStrIndex len = input_str.size();\\n    \\n    FriBidiParType base_dir = static_cast<FriBidiParType>(data_provider.ConsumeIntegralInRange<int>(0, 2));\\n    \\n    std::vector<FriBidiChar> visual_str(len);\\n    std::vector<FriBidiStrIndex> positions_L_to_V(len);\\n    std::vector<FriBidiStrIndex> positions_V_to_L(len);\\n    std::vector<FriBidiLevel> embedding_levels(len);\\n\\n    fribidi_log2vis(input_str.data(), len, &base_dir, visual_str.data(), positions_L_to_V.data(), positions_V_to_L.data(), embedding_levels.data());\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-fribidi-fribidi_log2vis",
        "sample": "05",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"fribidi-bidi-types.h\"\\n#include \"fribidi-flags.h\"\\n#include \"fribidi-joining-types.h\"\\n#include \"fribidi-types.h\"\\n#include \"fribidi-bidi-types-list.h\"\\n#include \"run.h\"\\n#include \"fribidi-joining-types-list.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider data_provider(data, size);\\n    \\n    std::vector<FriBidiChar> input_str = data_provider.ConsumeBytes<FriBidiChar>(data_provider.ConsumeIntegralInRange<size_t>(0, size / sizeof(FriBidiChar)));\\n    FriBidiStrIndex len = input_str.size();\\n    \\n    FriBidiParType base_dir = static_cast<FriBidiParType>(data_provider.ConsumeIntegralInRange<int>(0, 2));\\n    \\n    std::vector<FriBidiChar> visual_str(len);\\n    std::vector<FriBidiStrIndex> positions_L_to_V(len);\\n    std::vector<FriBidiStrIndex> positions_V_to_L(len);\\n    std::vector<FriBidiLevel> embedding_levels(len);\\n\\n    fribidi_log2vis(input_str.data(), len, &base_dir, visual_str.data(), positions_L_to_V.data(), positions_V_to_L.data(), embedding_levels.data());\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}