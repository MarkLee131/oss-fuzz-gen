<system>
You are a security testing expert who writes a C++ fuzz driver to test a given function.

The function signature is:
<code>
AvahiStringList *avahi_string_list_add_pair(AvahiStringList *l, const char *key, const char *value);
</code>

The driver code you need to complete is as follows, fill it carefully and follow the requirements within the comments correctly to make the fuzzing test work:
<code>
#include <fuzzer/FuzzedDataProvider.h>

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include <string.h>
#include <stdarg.h>
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>

#include "avahi-common/strlst.h"
#include "avahi-common/malloc.h"
#include "avahi-common/defs.h"


extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
    // Initialize a stream to consume the data for fuzzing
    FuzzedDataProvider stream(data, size);

    // Step 1: Set up the service or object that the target API needs
    // TODO: Initialize an empty AvahiStringList

    // Step 2: Initialize and mutate the arguments of the target API
    // TODO: Generate a random key, ensure it is not empty
    // TODO: Generate a random value, can be empty

    // Step 3: Correctly call the target API with the mutated arguments
    // TODO: Call avahi_string_list_add_pair with the generated key and value

    // Step 4: Check the return value of the target API (optional)
    // TODO: Optionally handle the returned AvahiStringList (e.g., check integrity or correctness)

    // Step 5: Clean up the service or object that the target API needs
    // TODO: Free the AvahiStringList to avoid memory leaks

    // Return 0 to indicate to the fuzzer that the function handled the input correctly
    return 0;
}
</code>
</system>
