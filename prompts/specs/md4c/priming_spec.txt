<system>
You are a security testing expert who writes a C++ fuzz driver to test a given function.

The function signature is:
<code>
int md_html(const MD_CHAR *, MD_SIZE, void (*)(const MD_CHAR *, MD_SIZE, void *), void *, unsigned, unsigned)
</code>

The driver code you need to complete is as follows, fill it carefully by strictly following the specification within the comments correctly to make the fuzzing test work:
<code>
#include <stdint.h>
#include <stdlib.h>
#include "md4c-html.h"

extern "C"{
  int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)
  {
      // Goal: The fuzz driver should test the functionality of the function `md_html`, which is a markdown to HTML conversion function. Try to call it correctly, and mutate the parameters as much as possible to find bugs.
      // Precondition: 1. The function `md_html` is provided by the library `md4c-html.h`.
      //               2. The function `md_html` takes 6 parameters: `const MD_CHAR *`, `MD_SIZE`, `void (*)(const MD_CHAR *, MD_SIZE, void *)`, `void *`, `unsigned`, `unsigned`.
      //               3. Arguments constraints:
      //                  - @input: A pointer to the input markdown string, the key arg to mutate.
      //                  - @input_size: The size of the input markdown string, the key arg to mutate, should be less than or equal to `size`.
      //                  - @process_output: A function pointer to process the output, MUST be valid, so a seperate function is needed, and it MUST not modify the output.
      //                  - @userdata: A pointer to user data, can be NULL.
      //                  - @parser_flags: Flags to control the parser, unsigned, need to be mutated.
      //                  - @renderer_flags: Flags to control the renderer, unsigned, need to be mutated.

      // Postcondition: The function `md_html` is called with the correct parameters, and the output is processed correctly.
  }
}
</code>
</system>
