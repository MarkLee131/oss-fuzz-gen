{
    "samples": [

    {
        "benchmark": "output-icu-_zn6icu_7513messageformat12applypatternerkns_13unicodestringer11uparseerrorr10uerrorcode",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.71",
        "coverage_diff": "0.0029110819314718925",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <unicode/unistr.h>\\n#include <unicode/parseerr.h>\\n#include <unicode/utypes.h>\\n#include <unicode/msgfmt.h>\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    std::string patternStr = dataProvider.ConsumeRandomLengthString();\\n    icu::UnicodeString pattern(patternStr.c_str(), \"UTF-8\");\\n\\n    UParseError parseError;\\n    UErrorCode errorCode = U_ZERO_ERROR;\\n\\n    // Initialize the message format with a valid pattern\\n    icu::MessageFormat messageFormat(pattern, errorCode);\\n\\n    // Apply a new pattern to the message format\\n    messageFormat.applyPattern(pattern, parseError, errorCode);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-icu-_zn6icu_7513messageformat12applypatternerkns_13unicodestringer11uparseerrorr10uerrorcode",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.72",
        "coverage_diff": "0.00291727572281545",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <unicode/unistr.h>\\n#include <unicode/parseerr.h>\\n#include <unicode/utypes.h>\\n#include <unicode/msgfmt.h>\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    std::string patternStr = dataProvider.ConsumeRandomLengthString();\\n    icu::UnicodeString pattern(patternStr.c_str(), \"UTF-8\");\\n\\n    UParseError parseError;\\n    UErrorCode errorCode = U_ZERO_ERROR;\\n\\n    // Using a valid constructor for MessageFormat\\n    icu::MessageFormat messageFormat(pattern, errorCode);\\n\\n    // Apply the pattern again to test the function\\n    messageFormat.applyPattern(pattern, parseError, errorCode);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-icu-_zn6icu_7513messageformat12applypatternerkns_13unicodestringer11uparseerrorr10uerrorcode",
        "sample": "03",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.72",
        "coverage_diff": "0.00291727572281545",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <unicode/unistr.h>\\n#include <unicode/parseerr.h>\\n#include <unicode/utypes.h>\\n#include <unicode/msgfmt.h>\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    std::string patternStr = dataProvider.ConsumeRandomLengthString();\\n    icu::UnicodeString pattern(patternStr.c_str(), \"UTF-8\");\\n\\n    UParseError parseError;\\n    UErrorCode errorCode = U_ZERO_ERROR;\\n\\n    // Create a MessageFormat object with a valid pattern\\n    icu::MessageFormat messageFormat(pattern, errorCode);\\n\\n    // Apply a new pattern to the existing MessageFormat object\\n    messageFormat.applyPattern(pattern, parseError, errorCode);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-icu-_zn6icu_7513messageformat12applypatternerkns_13unicodestringer11uparseerrorr10uerrorcode",
        "sample": "04",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.73",
        "coverage_diff": "0.00291727572281545",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <unicode/unistr.h>\\n#include <unicode/parseerr.h>\\n#include <unicode/utypes.h>\\n#include <unicode/msgfmt.h>\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    // Initialize the library or any resources within icu_75::MessageFormat needed for the fuzzing process here.\\n    // For ICU, no specific initialization is required.\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    // Create a UnicodeString from the fuzzed data.\\n    std::string patternStr = dataProvider.ConsumeRandomLengthString();\\n    icu::UnicodeString pattern(patternStr.c_str(), \"UTF-8\");\\n\\n    // Initialize UParseError and UErrorCode.\\n    UParseError parseError;\\n    UErrorCode errorCode = U_ZERO_ERROR;\\n\\n    // Create a MessageFormat object with a valid locale.\\n    icu::Locale locale = icu::Locale::getDefault();\\n    icu::MessageFormat messageFormat(pattern, locale, errorCode);\\n\\n    // Apply the pattern.\\n    messageFormat.applyPattern(pattern, parseError, errorCode);\\n\\n    // Postconditions:\\n    // - Check if errorCode is set to an error value.\\n    // - If errorCode is not U_ZERO_ERROR, parseError should contain error details.\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-icu-_zn6icu_7513messageformat12applypatternerkns_13unicodestringer11uparseerrorr10uerrorcode",
        "sample": "05",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.71",
        "coverage_diff": "0.0029110819314718925",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <unicode/unistr.h>\\n#include <unicode/parseerr.h>\\n#include <unicode/utypes.h>\\n#include <unicode/msgfmt.h>\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    std::string patternStr = dataProvider.ConsumeRandomLengthString();\\n    icu::UnicodeString pattern(patternStr.c_str(), \"UTF-8\");\\n\\n    UParseError parseError;\\n    UErrorCode errorCode = U_ZERO_ERROR;\\n\\n    // Create a MessageFormat object with a valid pattern to avoid using the deleted default constructor\\n    icu::MessageFormat messageFormat(pattern, errorCode);\\n\\n    // Apply a new pattern to the existing MessageFormat object\\n    messageFormat.applyPattern(pattern, parseError, errorCode);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}