{
    "samples": [

    {
        "benchmark": "output-icu-_zn6icu_7513messageformat12applypatternerkns_13unicodestringer11uparseerrorr10uerrorcode",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.85",
        "coverage_diff": "0.0029482446795332357",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <unicode/unistr.h>\\n#include <unicode/parseerr.h>\\n#include <unicode/utypes.h>\\n#include <unicode/msgfmt.h>\\n#include <unicode/uclean.h>\\n\\nextern \"C\" {\\n    #include <unicode/ucnv.h>\\n    #include <unicode/ustring.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    UErrorCode status = U_ZERO_ERROR;\\n    u_init(&status);\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 1) {\\n        return 0; // Not enough data to proceed\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    std::string patternString = dataProvider.ConsumeRandomLengthString(size);\\n    icu::UnicodeString pattern(patternString.c_str(), patternString.length(), \"UTF-8\");\\n\\n    UParseError parseError;\\n    UErrorCode status = U_ZERO_ERROR;\\n\\n    // Create a MessageFormat object with a valid pattern\\n    icu::MessageFormat messageFormat(\"{0}\", status);\\n\\n    // Apply the fuzzed pattern to the MessageFormat object\\n    messageFormat.applyPattern(pattern, parseError, status);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-icu-_zn6icu_7513messageformat12applypatternerkns_13unicodestringer11uparseerrorr10uerrorcode",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.80",
        "coverage_diff": "0.0029358570968461215",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <unicode/unistr.h>\\n#include <unicode/parseerr.h>\\n#include <unicode/utypes.h>\\n#include <unicode/msgfmt.h>\\n#include <unicode/uclean.h>\\n\\nextern \"C\" {\\n    #include <unicode/uclean.h>\\n    #include <unicode/uenum.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    UErrorCode status = U_ZERO_ERROR;\\n    u_init(&status);\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 1) {\\n        return 0; // Not enough data to proceed\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    std::string patternString = dataProvider.ConsumeRandomLengthString(size);\\n    icu::UnicodeString pattern(patternString.c_str(), patternString.length(), \"UTF-8\");\\n\\n    UParseError parseError;\\n    UErrorCode status = U_ZERO_ERROR;\\n\\n    icu::MessageFormat *messageFormat = new icu::MessageFormat(pattern, status);\\n\\n    if (U_SUCCESS(status)) {\\n        // Apply the pattern to the message format\\n        messageFormat->applyPattern(pattern, parseError, status);\\n    }\\n\\n    delete messageFormat;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}