{
    "samples": [

    {
        "benchmark": "output-inih-ini_parse_string",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "86.17",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"src/inih/ini.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    std::string fuzzed_string = fuzzed_data.ConsumeRandomLengthString(size);\\n    fuzzed_string.push_back('\\0');\\n\\n    auto dummy_handler = [](void* user, const char* section, const char* name, const char* value) -> int {\\n        return 1;\\n    };\\n\\n    void* fuzzed_user = reinterpret_cast<void*>(fuzzed_data.ConsumeIntegral<uintptr_t>());\\n\\n    ini_parse_string(fuzzed_string.c_str(), dummy_handler, fuzzed_user);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-inih-ini_parse_string",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "86.17",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"src/inih/ini.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    std::string fuzzed_string = fuzzed_data.ConsumeRandomLengthString(size);\\n    fuzzed_string.push_back('\\0');\\n\\n    auto dummy_handler = [](void* user, const char* section, const char* name, const char* value) -> int {\\n        return 1;\\n    };\\n\\n    void* fuzzed_user = reinterpret_cast<void*>(fuzzed_data.ConsumeIntegral<uintptr_t>());\\n\\n    ini_parse_string(fuzzed_string.c_str(), dummy_handler, fuzzed_user);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-inih-ini_parse_string",
        "sample": "03",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "86.17",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"src/inih/ini.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    std::string fuzzed_string = fuzzed_data.ConsumeRandomLengthString(size);\\n\\n    fuzzed_string.push_back('\\0');\\n\\n    auto dummy_handler = [](void* user, const char* section, const char* name, const char* value) -> int {\\n        return 1;\\n    };\\n\\n    void* fuzzed_user = reinterpret_cast<void*>(fuzzed_data.ConsumeIntegral<uintptr_t>());\\n\\n    ini_parse_string(fuzzed_string.c_str(), dummy_handler, fuzzed_user);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-inih-ini_parse_string",
        "sample": "04",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "86.17",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"src/inih/ini.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    std::string fuzzed_string = fuzzed_data.ConsumeRandomLengthString(size);\\n    fuzzed_string.push_back('\\0');\\n\\n    auto dummy_handler = [](void* user, const char* section, const char* name, const char* value) -> int {\\n        return 1;\\n    };\\n\\n    void* fuzzed_user = reinterpret_cast<void*>(fuzzed_data.ConsumeIntegral<uintptr_t>());\\n\\n    ini_parse_string(fuzzed_string.c_str(), dummy_handler, fuzzed_user);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-inih-ini_parse_string",
        "sample": "05",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "86.17",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"src/inih/ini.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    std::string fuzzed_string = fuzzed_data.ConsumeRandomLengthString(size);\\n    fuzzed_string.push_back('\\0');\\n\\n    auto dummy_handler = [](void* user, const char* section, const char* name, const char* value) -> int {\\n        return 1;\\n    };\\n\\n    void* fuzzed_user = reinterpret_cast<void*>(fuzzed_data.ConsumeIntegral<uintptr_t>());\\n\\n    ini_parse_string(fuzzed_string.c_str(), dummy_handler, fuzzed_user);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}