{
    "samples": [

    {
        "benchmark": "output-avahi-avahi_string_list_add_pair",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "8.16",
        "coverage_diff": "0.003447087211306446",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cassert>\\n#include \"avahi-common/strlst.h\"\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    AvahiStringList *list = nullptr;\\n    if (dataProvider.ConsumeBool()) {\\n        list = avahi_string_list_new(dataProvider.ConsumeRandomLengthString(100).c_str());\\n    }\\n\\n    std::string key = dataProvider.ConsumeRandomLengthString(100);\\n    const char *key_cstr = key.c_str();\\n\\n    const char *value_cstr = nullptr;\\n    if (dataProvider.ConsumeBool()) {\\n        std::string value = dataProvider.ConsumeRandomLengthString(100);\\n        value_cstr = value.c_str();\\n    }\\n\\n    assert(key_cstr);\\n\\n    AvahiStringList *result = avahi_string_list_add_pair(list, key_cstr, value_cstr);\\n\\n    avahi_string_list_free(result);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-avahi-avahi_string_list_add_pair",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.57",
        "coverage_diff": "0.003447087211306446",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cassert>\\n#include <string>\\n#include \"avahi-common/strlst.h\" // Assuming this header defines AvahiStringList and related functions\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    AvahiStringList *list = nullptr;\\n    if (dataProvider.ConsumeBool()) {\\n        std::string randomStr = dataProvider.ConsumeRandomLengthString(100);\\n        if (!randomStr.empty()) {\\n            list = avahi_string_list_new(randomStr.c_str());\\n        }\\n    }\\n\\n    std::string key = dataProvider.ConsumeRandomLengthString(100);\\n    if (key.empty()) {\\n        if (list) {\\n            avahi_string_list_free(list);\\n        }\\n        return 0; // Skip if key is empty to avoid assertion failure\\n    }\\n\\n    std::string value = dataProvider.ConsumeRandomLengthString(100);\\n    const char *valuePtr = value.empty() ? nullptr : value.c_str();\\n\\n    AvahiStringList *result = avahi_string_list_add_pair(list, key.c_str(), valuePtr);\\n\\n    avahi_string_list_free(result);\\n    return 0;\\n}",
        "model": ""
    }

    ]
}