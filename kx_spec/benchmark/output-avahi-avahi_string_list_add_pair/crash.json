{
    "samples": [

    {
        "benchmark": "output-avahi-avahi_string_list_add_pair",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.001034126163391934",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"avahi-common/strlst.h\"\\n#include <assert.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 1) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider provider(data, size);\\n\\n    AvahiStringList *list = nullptr;\\n    std::string initialTxt = provider.ConsumeRandomLengthString();\\n    if (!initialTxt.empty()) {\\n        list = avahi_string_list_new(initialTxt.c_str());\\n    }\\n\\n    std::string key = provider.ConsumeRandomLengthString();\\n    if (key.empty()) {\\n        if (list) {\\n            avahi_string_list_free(list);\\n        }\\n        return 0;\\n    }\\n\\n    const char *value = nullptr;\\n    if (provider.ConsumeBool()) {\\n        std::string valueStr = provider.ConsumeRandomLengthString();\\n        if (!valueStr.empty()) {\\n            value = strdup(valueStr.c_str());\\n        }\\n    }\\n\\n    // Ensure list is initialized before using it\\n    if (!list) {\\n        list = avahi_string_list_new(\"\");\\n    }\\n\\n    // Check if key and value are valid C strings\\n    if (!key.empty() && (value == nullptr || strlen(value) > 0)) {\\n        AvahiStringList *result = avahi_string_list_add_pair(list, key.c_str(), value);\\n\\n        if (value) {\\n            free((void *)value);\\n        }\\n        avahi_string_list_free(result);\\n    } else {\\n        if (value) {\\n            free((void *)value);\\n        }\\n        avahi_string_list_free(list);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-avahi-avahi_string_list_add_pair",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "3.56",
        "coverage_diff": "0.001034126163391934",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"avahi-common/strlst.h\"\\n#include <assert.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 1) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider provider(data, size);\\n\\n    AvahiStringList *list = nullptr;\\n    if (provider.ConsumeBool()) {\\n        std::string txt = provider.ConsumeRandomLengthString();\\n        list = avahi_string_list_new(txt.c_str(), nullptr);\\n    }\\n\\n    std::string key = provider.ConsumeRandomLengthString();\\n    if (key.empty()) {\\n        return 0;\\n    }\\n\\n    const char *value = nullptr;\\n    if (provider.ConsumeBool()) {\\n        std::string valueStr = provider.ConsumeRandomLengthString();\\n        if (!valueStr.empty()) {\\n            value = strdup(valueStr.c_str());\\n        }\\n    }\\n\\n    AvahiStringList *result = avahi_string_list_add_pair(list, key.c_str(), value);\\n\\n    if (value) {\\n        free((void *)value);\\n    }\\n    avahi_string_list_free(result);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-avahi-avahi_string_list_add_pair",
        "sample": "03",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.66",
        "coverage_diff": "0.003447087211306446",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"avahi-common/strlst.h\"\\n#include <assert.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 1) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider provider(data, size);\\n\\n    AvahiStringList *list = nullptr;\\n    if (provider.ConsumeBool()) {\\n        const char *dummyTxt = \"dummy\";\\n        list = avahi_string_list_new(dummyTxt);\\n    }\\n\\n    std::string key = provider.ConsumeRandomLengthString();\\n    if (key.empty()) {\\n        return 0;\\n    }\\n\\n    const char *value = nullptr;\\n    if (provider.ConsumeBool()) {\\n        std::string valueStr = provider.ConsumeRandomLengthString();\\n        if (!valueStr.empty()) {\\n            value = strdup(valueStr.c_str());\\n        }\\n    }\\n\\n    AvahiStringList *result = avahi_string_list_add_pair(list, key.c_str(), value);\\n\\n    if (value) {\\n        free((void *)value);\\n    }\\n    avahi_string_list_free(result);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-avahi-avahi_string_list_add_pair",
        "sample": "04",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "20.09",
        "coverage_diff": "0.019303688383316097",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"avahi-common/strlst.h\"\\n#include <assert.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 1) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider provider(data, size);\\n\\n    AvahiStringList *list = nullptr;\\n    std::string initialTxt = provider.ConsumeRandomLengthString();\\n    if (!initialTxt.empty()) {\\n        list = avahi_string_list_new(initialTxt.c_str(), nullptr);\\n    }\\n\\n    std::string key = provider.ConsumeRandomLengthString();\\n    if (key.empty()) {\\n        if (list) {\\n            avahi_string_list_free(list);\\n        }\\n        return 0;\\n    }\\n\\n    const char *value = nullptr;\\n    if (provider.ConsumeBool()) {\\n        std::string valueStr = provider.ConsumeRandomLengthString();\\n        if (!valueStr.empty()) {\\n            value = strdup(valueStr.c_str());\\n        }\\n    }\\n\\n    AvahiStringList *result = avahi_string_list_add_pair(list, key.c_str(), value);\\n\\n    if (value) {\\n        free((void *)value);\\n    }\\n    avahi_string_list_free(result);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-avahi-avahi_string_list_add_pair",
        "sample": "05",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.66",
        "coverage_diff": "0.003447087211306446",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"avahi-common/strlst.h\"\\n#include <assert.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 1) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider provider(data, size);\\n\\n    AvahiStringList *list = nullptr;\\n    if (provider.ConsumeBool()) {\\n        // Provide a non-null argument to avahi_string_list_new\\n        const char *txt = \"example\";\\n        list = avahi_string_list_new(txt);\\n    }\\n\\n    std::string key = provider.ConsumeRandomLengthString();\\n    if (key.empty()) {\\n        return 0;\\n    }\\n\\n    const char *value = nullptr;\\n    if (provider.ConsumeBool()) {\\n        std::string valueStr = provider.ConsumeRandomLengthString();\\n        if (!valueStr.empty()) {\\n            value = strdup(valueStr.c_str());\\n        }\\n    }\\n\\n    AvahiStringList *result = avahi_string_list_add_pair(list, key.c_str(), value);\\n\\n    if (value) {\\n        free((void *)value);\\n    }\\n    avahi_string_list_free(result);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}