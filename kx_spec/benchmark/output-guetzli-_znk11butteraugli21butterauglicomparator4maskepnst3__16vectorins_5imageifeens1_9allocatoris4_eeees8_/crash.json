{
    "samples": [

    {
        "benchmark": "output-guetzli-_znk11butteraugli21butterauglicomparator4maskepnst3__16vectorins_5imageifeens1_9allocatoris4_eeees8_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"butteraugli.h\"\\n#include \"butteraugli_comparator.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    size_t num_images_mask = data_provider.ConsumeIntegralInRange<size_t>(1, 10);\\n    std::vector<butteraugli::Image<float>> mask;\\n    for (size_t i = 0; i < num_images_mask; ++i) {\\n        size_t width = data_provider.ConsumeIntegralInRange<size_t>(1, 100);\\n        size_t height = data_provider.ConsumeIntegralInRange<size_t>(1, 100);\\n        butteraugli::Image<float> image(width, height);\\n        for (size_t y = 0; y < height; ++y) {\\n            for (size_t x = 0; x < width; ++x) {\\n                image.Row(y)[x] = data_provider.ConsumeFloatingPoint<float>();\\n            }\\n        }\\n        mask.push_back(std::move(image));\\n    }\\n\\n    size_t num_images_mask_dc = data_provider.ConsumeIntegralInRange<size_t>(1, 10);\\n    std::vector<butteraugli::Image<float>> mask_dc;\\n    for (size_t i = 0; i < num_images_mask_dc; ++i) {\\n        size_t width = data_provider.ConsumeIntegralInRange<size_t>(1, 100);\\n        size_t height = data_provider.ConsumeIntegralInRange<size_t>(1, 100);\\n        butteraugli::Image<float> image(width, height);\\n        for (size_t y = 0; y < height; ++y) {\\n            for (size_t x = 0; x < width; ++x) {\\n                image.Row(y)[x] = data_provider.ConsumeFloatingPoint<float>();\\n            }\\n        }\\n        mask_dc.push_back(std::move(image));\\n    }\\n\\n    butteraugli::ButteraugliComparator comparator;\\n    comparator.Mask(&mask, &mask_dc);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-guetzli-_znk11butteraugli21butterauglicomparator4maskepnst3__16vectorins_5imageifeens1_9allocatoris4_eeees8_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"butteraugli.h\"\\n#include \"butteraugli_comparator.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    // Initialize the library or any resources within ButteraugliComparator needed for the fuzzing process here.\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    // Generate fuzzed vector of Image<float> for mask\\n    size_t num_images_mask = data_provider.ConsumeIntegralInRange<size_t>(1, 10);\\n    std::vector<butteraugli::ImageF> mask;\\n    for (size_t i = 0; i < num_images_mask; ++i) {\\n        size_t width = data_provider.ConsumeIntegralInRange<size_t>(1, 100);\\n        size_t height = data_provider.ConsumeIntegralInRange<size_t>(1, 100);\\n        butteraugli::ImageF image(width, height);\\n        for (size_t y = 0; y < height; ++y) {\\n            for (size_t x = 0; x < width; ++x) {\\n                image.Row(y)[x] = data_provider.ConsumeFloatingPoint<float>();\\n            }\\n        }\\n        mask.push_back(std::move(image));\\n    }\\n\\n    // Generate fuzzed vector of Image<float> for mask_dc\\n    size_t num_images_mask_dc = data_provider.ConsumeIntegralInRange<size_t>(1, 10);\\n    std::vector<butteraugli::ImageF> mask_dc;\\n    for (size_t i = 0; i < num_images_mask_dc; ++i) {\\n        size_t width = data_provider.ConsumeIntegralInRange<size_t>(1, 100);\\n        size_t height = data_provider.ConsumeIntegralInRange<size_t>(1, 100);\\n        butteraugli::ImageF image(width, height);\\n        for (size_t y = 0; y < height; ++y) {\\n            for (size_t x = 0; x < width; ++x) {\\n                image.Row(y)[x] = data_provider.ConsumeFloatingPoint<float>();\\n            }\\n        }\\n        mask_dc.push_back(std::move(image));\\n    }\\n\\n    // Create a ButteraugliComparator instance\\n    guetzli::ButteraugliComparator comparator;\\n\\n    // Call the Mask function with fuzzed data\\n    comparator.Mask(&mask, &mask_dc);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-guetzli-_znk11butteraugli21butterauglicomparator4maskepnst3__16vectorins_5imageifeens1_9allocatoris4_eeees8_",
        "sample": "03",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"butteraugli/butteraugli.h\"\\n}\\n\\n#include \"guetzli/butteraugli_comparator.h\"\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    size_t num_images_mask = data_provider.ConsumeIntegralInRange<size_t>(1, 10);\\n    std::vector<butteraugli::Image<float>> mask;\\n    for (size_t i = 0; i < num_images_mask; ++i) {\\n        size_t width = data_provider.ConsumeIntegralInRange<size_t>(1, 100);\\n        size_t height = data_provider.ConsumeIntegralInRange<size_t>(1, 100);\\n        butteraugli::Image<float> image(width, height);\\n        for (size_t y = 0; y < height; ++y) {\\n            for (size_t x = 0; x < width; ++x) {\\n                image.Row(y)[x] = data_provider.ConsumeFloatingPoint<float>();\\n            }\\n        }\\n        mask.push_back(std::move(image));\\n    }\\n\\n    size_t num_images_mask_dc = data_provider.ConsumeIntegralInRange<size_t>(1, 10);\\n    std::vector<butteraugli::Image<float>> mask_dc;\\n    for (size_t i = 0; i < num_images_mask_dc; ++i) {\\n        size_t width = data_provider.ConsumeIntegralInRange<size_t>(1, 100);\\n        size_t height = data_provider.ConsumeIntegralInRange<size_t>(1, 100);\\n        butteraugli::Image<float> image(width, height);\\n        for (size_t y = 0; y < height; ++y) {\\n            for (size_t x = 0; x < width; ++x) {\\n                image.Row(y)[x] = data_provider.ConsumeFloatingPoint<float>();\\n            }\\n        }\\n        mask_dc.push_back(std::move(image));\\n    }\\n\\n    butteraugli::ButteraugliComparator comparator;\\n    comparator.Mask(&mask, &mask_dc);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-guetzli-_znk11butteraugli21butterauglicomparator4maskepnst3__16vectorins_5imageifeens1_9allocatoris4_eeees8_",
        "sample": "04",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"butteraugli.h\"\\n#include \"butteraugli_comparator.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    size_t num_images_mask = data_provider.ConsumeIntegralInRange<size_t>(1, 10);\\n    std::vector<butteraugli::ImageF> mask;\\n    for (size_t i = 0; i < num_images_mask; ++i) {\\n        size_t width = data_provider.ConsumeIntegralInRange<size_t>(1, 100);\\n        size_t height = data_provider.ConsumeIntegralInRange<size_t>(1, 100);\\n        butteraugli::ImageF image(width, height);\\n        for (size_t y = 0; y < height; ++y) {\\n            for (size_t x = 0; x < width; ++x) {\\n                image.Row(y)[x] = data_provider.ConsumeFloatingPoint<float>();\\n            }\\n        }\\n        mask.push_back(std::move(image));\\n    }\\n\\n    size_t num_images_mask_dc = data_provider.ConsumeIntegralInRange<size_t>(1, 10);\\n    std::vector<butteraugli::ImageF> mask_dc;\\n    for (size_t i = 0; i < num_images_mask_dc; ++i) {\\n        size_t width = data_provider.ConsumeIntegralInRange<size_t>(1, 100);\\n        size_t height = data_provider.ConsumeIntegralInRange<size_t>(1, 100);\\n        butteraugli::ImageF image(width, height);\\n        for (size_t y = 0; y < height; ++y) {\\n            for (size_t x = 0; x < width; ++x) {\\n                image.Row(y)[x] = data_provider.ConsumeFloatingPoint<float>();\\n            }\\n        }\\n        mask_dc.push_back(std::move(image));\\n    }\\n\\n    guetzli::ButteraugliComparator comparator;\\n    comparator.Mask(&mask, &mask_dc);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-guetzli-_znk11butteraugli21butterauglicomparator4maskepnst3__16vectorins_5imageifeens1_9allocatoris4_eeees8_",
        "sample": "05",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"butteraugli.h\"\\n#include \"butteraugli_comparator.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    size_t num_images_mask = data_provider.ConsumeIntegralInRange<size_t>(1, 10);\\n    std::vector<butteraugli::ImageF> mask;\\n    for (size_t i = 0; i < num_images_mask; ++i) {\\n        size_t width = data_provider.ConsumeIntegralInRange<size_t>(1, 100);\\n        size_t height = data_provider.ConsumeIntegralInRange<size_t>(1, 100);\\n        butteraugli::ImageF image(width, height);\\n        for (size_t y = 0; y < height; ++y) {\\n            for (size_t x = 0; x < width; ++x) {\\n                image.Row(y)[x] = data_provider.ConsumeFloatingPoint<float>();\\n            }\\n        }\\n        mask.push_back(std::move(image));\\n    }\\n\\n    size_t num_images_mask_dc = data_provider.ConsumeIntegralInRange<size_t>(1, 10);\\n    std::vector<butteraugli::ImageF> mask_dc;\\n    for (size_t i = 0; i < num_images_mask_dc; ++i) {\\n        size_t width = data_provider.ConsumeIntegralInRange<size_t>(1, 100);\\n        size_t height = data_provider.ConsumeIntegralInRange<size_t>(1, 100);\\n        butteraugli::ImageF image(width, height);\\n        for (size_t y = 0; y < height; ++y) {\\n            for (size_t x = 0; x < width; ++x) {\\n                image.Row(y)[x] = data_provider.ConsumeFloatingPoint<float>();\\n            }\\n        }\\n        mask_dc.push_back(std::move(image));\\n    }\\n\\n    butteraugli::ButteraugliComparator comparator;\\n    comparator.Mask(&mask, &mask_dc);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}