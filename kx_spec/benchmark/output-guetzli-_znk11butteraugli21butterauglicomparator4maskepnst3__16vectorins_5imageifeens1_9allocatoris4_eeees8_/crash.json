{
    "samples": [

    {
        "benchmark": "output-guetzli-_znk11butteraugli21butterauglicomparator4maskepnst3__16vectorins_5imageifeens1_9allocatoris4_eeees8_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include \"butteraugli/butteraugli.h\" // Adjust the include path based on the actual location of the header file.\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    std::vector<butteraugli::ImageF> mask;\\n    std::vector<butteraugli::ImageF> mask_dc;\\n\\n    size_t num_images = data_provider.ConsumeIntegralInRange<size_t>(1, 10);\\n    for (size_t i = 0; i < num_images; ++i) {\\n        size_t width = data_provider.ConsumeIntegralInRange<size_t>(1, 1000);\\n        size_t height = data_provider.ConsumeIntegralInRange<size_t>(1, 1000);\\n        butteraugli::ImageF image(width, height);\\n        for (size_t y = 0; y < height; ++y) {\\n            for (size_t x = 0; x < width; ++x) {\\n                image.Row(y)[x] = data_provider.ConsumeFloatingPoint<float>();\\n            }\\n        }\\n        mask.push_back(image);\\n        mask_dc.push_back(image);\\n    }\\n\\n    butteraugli::ButteraugliComparator comparator;\\n    comparator.Mask(&mask, &mask_dc);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-guetzli-_znk11butteraugli21butterauglicomparator4maskepnst3__16vectorins_5imageifeens1_9allocatoris4_eeees8_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <cmath>\\n#include <memory>\\n#include <butteraugli/butteraugli.h>  // Corrected path to the header file\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    std::vector<std::unique_ptr<butteraugli::ImageF>> mask;\\n    std::vector<std::unique_ptr<butteraugli::ImageF>> mask_dc;\\n\\n    size_t num_images = data_provider.ConsumeIntegralInRange<size_t>(1, 10);\\n    for (size_t i = 0; i < num_images; ++i) {\\n        size_t width = data_provider.ConsumeIntegralInRange<size_t>(1, 1000);\\n        size_t height = data_provider.ConsumeIntegralInRange<size_t>(1, 1000);\\n        auto image = std::make_unique<butteraugli::ImageF>(width, height);\\n        for (size_t y = 0; y < height; ++y) {\\n            for (size_t x = 0; x < width; ++x) {\\n                image->Row(y)[x] = data_provider.ConsumeFloatingPoint<float>();\\n            }\\n        }\\n        mask.push_back(std::move(image));\\n        mask_dc.push_back(std::move(image));\\n    }\\n\\n    butteraugli::ButteraugliComparator comparator;\\n    comparator.Mask(mask, mask_dc);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}