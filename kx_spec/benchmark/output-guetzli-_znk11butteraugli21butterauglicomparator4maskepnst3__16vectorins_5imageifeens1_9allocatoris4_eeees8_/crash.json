{
    "samples": [

    {
        "benchmark": "output-guetzli-_znk11butteraugli21butterauglicomparator4maskepnst3__16vectorins_5imageifeens1_9allocatoris4_eeees8_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <algorithm>\\n\\nextern \"C\" {\\n    #include \"butteraugli/butteraugli.h\"\\n}\\n\\n#include \"guetzli/butteraugli_comparator.h\"\\n#include \"guetzli/output_image.h\"\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    // Initialize the library or any resources within ButteraugliComparator::Mask needed for the fuzzing process here.\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    size_t mask_size = data_provider.ConsumeIntegralInRange<size_t>(1, 100);\\n    size_t mask_dc_size = data_provider.ConsumeIntegralInRange<size_t>(1, 100);\\n\\n    std::vector<butteraugli::ImageF> mask(mask_size);\\n    std::vector<butteraugli::ImageF> mask_dc(mask_dc_size);\\n\\n    // Initialize the images with some fuzzed data\\n    for (size_t i = 0; i < mask_size; i++) {\\n        mask[i] = butteraugli::ImageF(data_provider.ConsumeIntegralInRange<size_t>(1, 100), data_provider.ConsumeIntegralInRange<size_t>(1, 100));\\n    }\\n    for (size_t i = 0; i < mask_dc_size; i++) {\\n        mask_dc[i] = butteraugli::ImageF(data_provider.ConsumeIntegralInRange<size_t>(1, 100), data_provider.ConsumeIntegralInRange<size_t>(1, 100));\\n    }\\n\\n    guetzli::ButteraugliComparator comparator;\\n\\n    comparator.Mask(&mask, &mask_dc);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-guetzli-_znk11butteraugli21butterauglicomparator4maskepnst3__16vectorins_5imageifeens1_9allocatoris4_eeees8_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <algorithm>\\n\\n// Include the relevant headers from the project\\n#include \"guetzli/butteraugli_comparator.h\"\\n#include \"guetzli/output_image.h\"\\n\\n// Wrap C headers with extern \"C\"\\nextern \"C\" {\\n#include \"butteraugli/butteraugli.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    // Initialize the library or any resources within ButteraugliComparator::Mask needed for the fuzzing process here.\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    // Generate random sizes for the vectors\\n    size_t mask_size = data_provider.ConsumeIntegralInRange<size_t>(1, 100);\\n    size_t mask_dc_size = data_provider.ConsumeIntegralInRange<size_t>(1, 100);\\n\\n    // Create and initialize the vectors\\n    std::vector<butteraugli::ImageF> mask(mask_size);\\n    std::vector<butteraugli::ImageF> mask_dc(mask_dc_size);\\n\\n    // Initialize the images with some data\\n    for (auto &image : mask) {\\n        image = butteraugli::ImageF(data_provider.ConsumeIntegralInRange<int>(1, 10), data_provider.ConsumeIntegralInRange<int>(1, 10));\\n        std::fill(image.Row(0), image.Row(0) + image.xsize() * image.ysize(), data_provider.ConsumeFloatingPoint<float>());\\n    }\\n\\n    for (auto &image : mask_dc) {\\n        image = butteraugli::ImageF(data_provider.ConsumeIntegralInRange<int>(1, 10), data_provider.ConsumeIntegralInRange<int>(1, 10));\\n        std::fill(image.Row(0), image.Row(0) + image.xsize() * image.ysize(), data_provider.ConsumeFloatingPoint<float>());\\n    }\\n\\n    // Create a ButteraugliComparator object\\n    guetzli::ButteraugliComparator comparator;\\n\\n    // Call the Mask function\\n    comparator.Mask(&mask, &mask_dc);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}