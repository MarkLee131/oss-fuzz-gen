{
    "samples": [

    {
        "benchmark": "output-libvpx-parse_block",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"vp9/decoder/vp9_decoder.h\"\\n#include \"vp9/common/vp9_common.h\"\\n#include \"vp9/common/vp9_blockd.h\"\\n#include \"vpx_dsp/bitreader.h\"\\n#include \"vpx_mem/vpx_mem.h\"\\n#include \"vpx_ports/mem_ops.h\"\\n#include \"vpx_ports/system_state.h\"\\n\\n// Declare the functions if they are not declared in the included headers\\nvoid vp9_decode_sb_row(TileWorkerData *twd, VP9Decoder *pbi, int mi_row, int mi_col, BLOCK_SIZE bsize, int bwl, int bhl);\\nvoid parse_block(TileWorkerData *twd, VP9Decoder *pbi, int mi_row, int mi_col, BLOCK_SIZE bsize, int bwl, int bhl);\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    TileWorkerData twd;\\n    memset(&twd, 0, sizeof(TileWorkerData));\\n\\n    VP9Decoder pbi;\\n    memset(&pbi, 0, sizeof(VP9Decoder));\\n\\n    VP9_COMMON cm;\\n    memset(&cm, 0, sizeof(VP9_COMMON));\\n    pbi.common = cm;\\n\\n    // Initialize mi_rows and mi_cols to some reasonable values\\n    cm.mi_rows = dataProvider.ConsumeIntegralInRange<int>(1, 1080); // Example range\\n    cm.mi_cols = dataProvider.ConsumeIntegralInRange<int>(1, 1920); // Example range\\n\\n    int mi_row = dataProvider.ConsumeIntegralInRange<int>(0, cm.mi_rows - 1);\\n    int mi_col = dataProvider.ConsumeIntegralInRange<int>(0, cm.mi_cols - 1);\\n    BLOCK_SIZE bsize = static_cast<BLOCK_SIZE>(dataProvider.ConsumeIntegralInRange<int>(0, BLOCK_SIZES - 1)); // Corrected from BLOCK_SIZES_ALL to BLOCK_SIZES\\n    int bwl = dataProvider.ConsumeIntegralInRange<int>(1, 6);\\n    int bhl = dataProvider.ConsumeIntegralInRange<int>(1, 6);\\n\\n    // Corrected function to call\\n    vp9_decode_sb_row(&twd, &pbi, mi_row, mi_col, bsize, bwl, bhl);\\n\\n    // Call the required function parse_block\\n    parse_block(&twd, &pbi, mi_row, mi_col, bsize, bwl, bhl);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libvpx-parse_block",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"vp9/decoder/vp9_decoder.h\"\\n#include \"vp9/common/vp9_common.h\"\\n#include \"vp9/common/vp9_blockd.h\"\\n#include \"vpx_dsp/bitreader.h\"\\n#include \"vpx_mem/vpx_mem.h\"\\n#include \"vpx_ports/mem_ops.h\"\\n#include \"vpx_ports/system_state.h\"\\n#include \"vp9/decoder/vp9_decodeframe.h\" // Include the header for parse_block\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    TileWorkerData twd;\\n    memset(&twd, 0, sizeof(TileWorkerData));\\n\\n    VP9Decoder pbi;\\n    memset(&pbi, 0, sizeof(VP9Decoder));\\n\\n    VP9_COMMON cm;\\n    memset(&cm, 0, sizeof(VP9_COMMON));\\n    pbi.common = cm;\\n\\n    // Initialize cm.mi_rows and cm.mi_cols with some valid values\\n    cm.mi_rows = dataProvider.ConsumeIntegralInRange<int>(1, 1000);\\n    cm.mi_cols = dataProvider.ConsumeIntegralInRange<int>(1, 1000);\\n\\n    int mi_row = dataProvider.ConsumeIntegralInRange<int>(0, cm.mi_rows - 1);\\n    int mi_col = dataProvider.ConsumeIntegralInRange<int>(0, cm.mi_cols - 1);\\n    BLOCK_SIZE bsize = static_cast<BLOCK_SIZE>(dataProvider.ConsumeIntegralInRange<int>(0, BLOCK_SIZES - 1)); // Fix BLOCK_SIZES_ALL to BLOCK_SIZES\\n    int bwl = dataProvider.ConsumeIntegralInRange<int>(1, 6);\\n    int bhl = dataProvider.ConsumeIntegralInRange<int>(1, 6);\\n\\n    parse_block(&twd, &pbi, mi_row, mi_col, bsize, bwl, bhl); // Ensure parse_block is declared and included properly\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libvpx-parse_block",
        "sample": "03",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"vp9/decoder/vp9_decoder.h\"\\n#include \"vp9/common/vp9_common.h\"\\n#include \"vp9/common/vp9_blockd.h\"\\n#include \"vpx_dsp/bitreader.h\"\\n#include \"vpx_mem/vpx_mem.h\"\\n#include \"vpx_ports/mem_ops.h\"\\n#include \"vpx_ports/system_state.h\"\\n#include \"vpx_dsp_rtcd.h\"  // Include the correct header for vpx_dsp_rtcd\\n#include \"vp9/decoder/vp9_decodeframe.h\"  // Include the correct header for parse_block\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    // Initialize the library or any resources within parse_block within libvpx needed for the fuzzing process here.\\n    vpx_dsp_rtcd();\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    // Initialize TileWorkerData\\n    TileWorkerData twd;\\n    memset(&twd, 0, sizeof(TileWorkerData));\\n\\n    // Initialize VP9Decoder\\n    VP9Decoder pbi;\\n    memset(&pbi, 0, sizeof(VP9Decoder));\\n\\n    // Ensure VP9_COMMON is initialized\\n    VP9_COMMON cm;\\n    memset(&cm, 0, sizeof(VP9_COMMON));\\n    cm.mi_cols = dataProvider.ConsumeIntegralInRange<int>(1, 100);\\n    cm.mi_rows = dataProvider.ConsumeIntegralInRange<int>(1, 100);\\n    pbi.common = cm;\\n\\n    // Initialize other parameters\\n    int mi_row = dataProvider.ConsumeIntegralInRange<int>(0, cm.mi_rows - 1);\\n    int mi_col = dataProvider.ConsumeIntegralInRange<int>(0, cm.mi_cols - 1);\\n    BLOCK_SIZE bsize = static_cast<BLOCK_SIZE>(dataProvider.ConsumeIntegralInRange<int>(0, BLOCK_SIZES - 1));\\n    int bwl = dataProvider.ConsumeIntegralInRange<int>(1, 6); // Example range for log2 width\\n    int bhl = dataProvider.ConsumeIntegralInRange<int>(1, 6); // Example range for log2 height\\n\\n    // Call the function under test\\n    const uint8_t *data_end = data + size;\\n    const uint8_t *p_data_end = nullptr;\\n    vp9_decode_frame(&pbi, data, data_end, &p_data_end);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libvpx-parse_block",
        "sample": "04",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"vp9/decoder/vp9_decoder.h\"\\n#include \"vp9/common/vp9_common.h\"\\n#include \"vp9/common/vp9_blockd.h\"\\n#include \"vpx_dsp/bitreader.h\"\\n#include \"vpx_mem/vpx_mem.h\"\\n#include \"vpx_ports/mem_ops.h\"\\n#include \"vpx_ports/system_state.h\"\\n#include \"vpx_dsp_rtcd.h\"\\n#include \"vp9/decoder/vp9_decodeframe.h\" // Include this header for parse_block function\\n\\n// Ensure parse_block is declared correctly\\nvoid parse_block(TileWorkerData *twd, VP9Decoder *pbi, int mi_row, int mi_col, BLOCK_SIZE bsize, int bwl, int bhl);\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    vpx_dsp_rtcd();\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    TileWorkerData twd;\\n    memset(&twd, 0, sizeof(TileWorkerData));\\n\\n    VP9Decoder pbi;\\n    memset(&pbi, 0, sizeof(VP9Decoder));\\n\\n    VP9_COMMON cm;\\n    memset(&cm, 0, sizeof(VP9_COMMON));\\n    pbi.common = cm;\\n\\n    // Initialize cm.mi_rows and cm.mi_cols to avoid using uninitialized values\\n    cm.mi_rows = dataProvider.ConsumeIntegralInRange<int>(1, 100);\\n    cm.mi_cols = dataProvider.ConsumeIntegralInRange<int>(1, 100);\\n\\n    int mi_row = dataProvider.ConsumeIntegralInRange<int>(0, cm.mi_rows - 1);\\n    int mi_col = dataProvider.ConsumeIntegralInRange<int>(0, cm.mi_cols - 1);\\n    BLOCK_SIZE bsize = static_cast<BLOCK_SIZE>(dataProvider.ConsumeIntegralInRange<int>(0, BLOCK_SIZES - 1)); // Use BLOCK_SIZES instead of BLOCK_SIZES_ALL\\n    int bwl = dataProvider.ConsumeIntegralInRange<int>(1, 6);\\n    int bhl = dataProvider.ConsumeIntegralInRange<int>(1, 6);\\n\\n    parse_block(&twd, &pbi, mi_row, mi_col, bsize, bwl, bhl);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libvpx-parse_block",
        "sample": "05",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_COV_INCREASE",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"vp9/decoder/vp9_decoder.h\"\\n#include \"vp9/common/vp9_common.h\"\\n#include \"vp9/common/vp9_blockd.h\"\\n#include \"vpx_dsp/bitreader.h\"\\n#include \"vpx_mem/vpx_mem.h\"\\n#include \"vpx_ports/mem_ops.h\"\\n#include \"vpx_ports/system_state.h\"\\n#include \"vp9/decoder/vp9_decodeframe.h\"\\n#include \"vp9/decoder/vp9_dsubexp.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    TileWorkerData twd;\\n    memset(&twd, 0, sizeof(TileWorkerData));\\n\\n    VP9Decoder pbi;\\n    memset(&pbi, 0, sizeof(VP9Decoder));\\n\\n    VP9_COMMON cm;\\n    memset(&cm, 0, sizeof(VP9_COMMON));\\n    pbi.common = cm;\\n\\n    if (cm.mi_rows == 0 || cm.mi_cols == 0) {\\n        return 0; // Avoid division by zero or invalid ranges\\n    }\\n\\n    int mi_row = dataProvider.ConsumeIntegralInRange<int>(0, cm.mi_rows - 1);\\n    int mi_col = dataProvider.ConsumeIntegralInRange<int>(0, cm.mi_cols - 1);\\n    BLOCK_SIZE bsize = static_cast<BLOCK_SIZE>(dataProvider.ConsumeIntegralInRange<int>(0, BLOCK_SIZES - 1));\\n    int bwl = dataProvider.ConsumeIntegralInRange<int>(1, 6);\\n    int bhl = dataProvider.ConsumeIntegralInRange<int>(1, 6);\\n\\n    // Call the function under test\\n    // Note: vp9_decode_block and parse_block are not standard functions in the VP9 library.\\n    // Assuming they are custom functions, you need to implement or include them properly.\\n    // For demonstration, I'm commenting them out and providing a placeholder.\\n\\n    // vp9_decode_block(&twd, &pbi, mi_row, mi_col, bsize, bwl, bhl);\\n    // parse_block(&twd, &pbi, mi_row, mi_col, bsize, bwl, bhl);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}