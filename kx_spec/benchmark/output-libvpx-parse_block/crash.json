{
    "samples": [

    {
        "benchmark": "output-libvpx-parse_block",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"vp9/decoder/vp9_decoder.h\"\\n#include \"vp9/common/vp9_blockd.h\"\\n#include \"vp9/common/vp9_enums.h\"\\n#include \"vp9/common/vp9_onyxc_int.h\"\\n#include \"vp9/common/vp9_tile_common.h\"\\n\\n// Include necessary libraries for the undeclared identifier\\nextern \"C\" {\\n    #include \"vp9/decoder/vp9_decodeframe.h\"\\n    #include \"vp9/common/vp9_systemdependent.h\"\\n}\\n\\n// Ensure BLOCK_SIZES_ALL is defined\\n#ifndef BLOCK_SIZES_ALL\\n#define BLOCK_SIZES_ALL (BLOCK_SIZE_GROUPS * 2)\\n#endif\\n\\n// Forward declare the parse_block function\\nextern \"C\" void parse_block(TileWorkerData *twd, VP9Decoder *pbi, int mi_row, int mi_col, BLOCK_SIZE bsize, int bwl, int bhl);\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    TileWorkerData twd;\\n    // Proper initialization of twd fields\\n    vp9_zero(twd);\\n    vp9_zero(twd.bit_reader);\\n    vp9_zero(twd.xd);\\n\\n    VP9Decoder pbi;\\n    // Proper initialization of pbi fields\\n    vp9_zero(pbi);\\n    vp9_zero(pbi.common);\\n\\n    int mi_row = dataProvider.ConsumeIntegral<int>();\\n    int mi_col = dataProvider.ConsumeIntegral<int>();\\n    BLOCK_SIZE bsize = static_cast<BLOCK_SIZE>(dataProvider.ConsumeIntegralInRange<int>(0, BLOCK_SIZES_ALL - 1));\\n    int bwl = dataProvider.ConsumeIntegral<int>();\\n    int bhl = dataProvider.ConsumeIntegral<int>();\\n\\n    // Ensure the function parse_block is declared\\n    parse_block(&twd, &pbi, mi_row, mi_col, bsize, bwl, bhl);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libvpx-parse_block",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"vp9/decoder/vp9_decoder.h\"\\n#include \"vp9/common/vp9_blockd.h\"\\n#include \"vp9/common/vp9_enums.h\"\\n#include \"vp9/common/vp9_onyxc_int.h\"\\n#include \"vp9/common/vp9_tile_common.h\"\\n\\nextern \"C\" {\\n    #include \"vp9/decoder/vp9_decodeframe.h\"\\n    #include \"vp9/decoder/vp9_detokenize.h\"\\n}\\n\\n// Define BLOCK_SIZES_ALL if not already defined\\n#ifndef BLOCK_SIZES_ALL\\n#define BLOCK_SIZES_ALL 22\\n#endif\\n\\n// Declare parse_block function if not already declared\\nextern \"C\" void parse_block(TileWorkerData *twd, VP9Decoder *pbi, int mi_row, int mi_col, BLOCK_SIZE bsize, int bwl, int bhl);\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    TileWorkerData twd;\\n    // Proper initialization of twd fields\\n    vp9_zero(twd);\\n    vp9_zero(twd.bit_reader);\\n    vp9_zero(twd.xd);\\n\\n    VP9Decoder pbi;\\n    // Proper initialization of pbi fields\\n    vp9_zero(pbi);\\n    vp9_zero(pbi.common);\\n\\n    int mi_row = dataProvider.ConsumeIntegral<int>();\\n    int mi_col = dataProvider.ConsumeIntegral<int>();\\n    BLOCK_SIZE bsize = static_cast<BLOCK_SIZE>(dataProvider.ConsumeIntegralInRange<int>(0, BLOCK_SIZES_ALL - 1));\\n    int bwl = dataProvider.ConsumeIntegral<int>();\\n    int bhl = dataProvider.ConsumeIntegral<int>();\\n\\n    parse_block(&twd, &pbi, mi_row, mi_col, bsize, bwl, bhl);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}