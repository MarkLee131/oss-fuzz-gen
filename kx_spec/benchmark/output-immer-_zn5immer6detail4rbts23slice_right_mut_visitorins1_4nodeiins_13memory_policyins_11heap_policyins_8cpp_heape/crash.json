{
    "samples": [

    {
        "benchmark": "output-immer-_zn5immer6detail4rbts23slice_right_mut_visitorins1_4nodeiins_13memory_policyins_11heap_policyins_8cpp_heape",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tuple>\\n#include <immer/memory_policy.hpp>\\n#include <immer/detail/rbts/node.hpp>\\n#include <immer/detail/rbts/visitor.hpp>\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    size_t regular_sub_pos_size = data_provider.ConsumeIntegral<size_t>();\\n    auto edit = data_provider.ConsumeIntegral<unsigned>();\\n\\n    using node_t = immer::detail::rbts::node<int, immer::memory_policy<immer::heap_policy<immer::cpp_heap>, immer::unsafe_refcount_policy, immer::no_lock_policy, immer::no_transience_policy, true, true>, 3U, 3U>;\\n    node_t* dummy_node = nullptr;\\n    immer::detail::rbts::node<node_t, immer::memory_policy<immer::heap_policy<immer::cpp_heap>, immer::unsafe_refcount_policy, immer::no_lock_policy, immer::no_transience_policy, true, true>, 3U, 3U> regular_sub_pos{dummy_node, 0};\\n\\n    auto result = immer::detail::rbts::slice_right_visitor<node_t, true, true>::visit_regular(regular_sub_pos, regular_sub_pos_size, edit);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-immer-_zn5immer6detail4rbts23slice_right_mut_visitorins1_4nodeiins_13memory_policyins_11heap_policyins_8cpp_heape",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <immer/detail/rbts/visitor.hpp>\\n#include <immer/detail/rbts/node.hpp>\\n#include <immer/memory_policy.hpp>\\n\\nextern \"C\" {\\n#include <immer/detail/rbts/visitor.hpp>\\n#include <immer/detail/rbts/node.hpp>\\n#include <immer/memory_policy.hpp>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    size_t regular_sub_pos_size = data_provider.ConsumeIntegral<size_t>();\\n    immer::detail::rbts::edit_t edit = data_provider.ConsumeIntegral<immer::detail::rbts::edit_t>();\\n\\n    using node_t = immer::detail::rbts::node<int, immer::memory_policy<immer::heap_policy<immer::cpp_heap>, immer::unsafe_refcount_policy, immer::no_lock_policy, immer::no_transience_policy, true, true>, 3U, 3U>;\\n    node_t* dummy_node = nullptr;\\n    immer::detail::rbts::regular_sub_pos<node_t> regular_sub_pos{dummy_node, 0};\\n\\n    // Call the function as required by the error message\\n    auto result = immer::detail::rbts::slice_right_mut_visitor<node_t, true, true>::visit_regular(regular_sub_pos, regular_sub_pos_size, edit);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-immer-_zn5immer6detail4rbts23slice_right_mut_visitorins1_4nodeiins_13memory_policyins_11heap_policyins_8cpp_heape",
        "sample": "03",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tuple>\\n#include <immer/memory_policy.hpp>\\n#include <immer/detail/rbts/node.hpp>\\n#include <immer/detail/rbts/algorithms.hpp>\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    size_t regular_sub_pos_size = data_provider.ConsumeIntegral<size_t>();\\n    auto edit = data_provider.ConsumeIntegral<unsigned>();\\n\\n    using node_t = immer::detail::rbts::node<int, immer::memory_policy<immer::heap_policy<immer::cpp_heap>, immer::unsafe_refcount_policy, immer::no_lock_policy, immer::no_transience_policy, true, true>, 3U, 3U>;\\n    node_t* dummy_node = nullptr;\\n    immer::detail::rbts::algorithms::visit_regular_sub_pos<node_t> regular_sub_pos{dummy_node, 0};\\n\\n    auto result = immer::detail::rbts::algorithms::slice_right_mut_visitor<node_t, true, true>::visit_regular(regular_sub_pos, regular_sub_pos_size, edit);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-immer-_zn5immer6detail4rbts23slice_right_mut_visitorins1_4nodeiins_13memory_policyins_11heap_policyins_8cpp_heape",
        "sample": "04",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tuple>\\n#include <immer/memory_policy.hpp>\\n\\n// Ensure only C headers are wrapped with extern \"C\"\\nextern \"C\" {\\n#include <stdint.h>\\n}\\n\\n#include <immer/detail/rbts/visitor.hpp>\\n#include <immer/detail/rbts/node.hpp>\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    size_t regular_sub_pos_size = data_provider.ConsumeIntegral<size_t>();\\n    using node_t = immer::detail::rbts::node<int, immer::memory_policy<immer::heap_policy<immer::cpp_heap>, immer::unsafe_refcount_policy, immer::no_lock_policy, immer::no_transience_policy, true, true>, 3U, 3U>;\\n    using edit_t = typename node_t::edit;\\n    auto* edit = reinterpret_cast<edit_t*>(data_provider.ConsumeIntegral<uintptr_t>());\\n\\n    node_t* dummy_node = nullptr;\\n    immer::detail::rbts::regular_sub_pos_t<node_t> regular_sub_pos{dummy_node, 0};\\n\\n    auto result = immer::detail::rbts::slice_right_mut_visitor<node_t, true, true>::visit_regular(regular_sub_pos, regular_sub_pos_size, edit);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-immer-_zn5immer6detail4rbts23slice_right_mut_visitorins1_4nodeiins_13memory_policyins_11heap_policyins_8cpp_heape",
        "sample": "05",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tuple>\\n#include <immer/memory_policy.hpp>\\n#include <immer/detail/rbts/visitor.hpp>\\n#include <immer/detail/rbts/node.hpp>\\n#include <immer/detail/rbts/operations.hpp>\\n#include <immer/detail/rbts/position.hpp>\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    size_t regular_sub_pos_size = data_provider.ConsumeIntegral<size_t>();\\n\\n    using node_t = immer::detail::rbts::node<int, immer::memory_policy<immer::heap_policy<immer::cpp_heap>, immer::unsafe_refcount_policy, immer::no_lock_policy, immer::no_transience_policy, true, true>, 3U, 3U>;\\n    node_t* dummy_node = nullptr;\\n    immer::detail::rbts::regular_sub_pos<node_t> regular_sub_pos{dummy_node, 0};\\n\\n    // Create an edit object compatible with the expected type\\n    using edit_t = typename immer::detail::rbts::slice_right_mut_visitor<node_t, true, true>::edit_t;\\n    edit_t edit = nullptr; // Assuming nullptr is a valid edit object\\n\\n    auto result = immer::detail::rbts::slice_right_mut_visitor<node_t, true, true>::visit_regular(regular_sub_pos, regular_sub_pos_size, edit);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}