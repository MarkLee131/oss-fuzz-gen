{
    "samples": [

    {
        "benchmark": "output-icu-_znk6icu_7521rulebasednumberformat6formatelrkns_13unicodestringers1_rns_13fieldpositioner10uerrorcode",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "3.17",
        "coverage_diff": "0.001331665138864802",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <unicode/unistr.h>\\n#include <unicode/rbnf.h>\\n#include <unicode/fieldpos.h>\\n#include <unicode/utypes.h>\\n#include <unicode/locid.h>\\n#include <unicode/numfmt.h>\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    int64_t number = dataProvider.ConsumeIntegral<int64_t>();\\n    icu::UnicodeString appendTo;\\n    icu::UnicodeString ruleSetName = icu::UnicodeString::fromUTF8(dataProvider.ConsumeRandomLengthString());\\n    icu::FieldPosition pos;\\n    UErrorCode status = U_ZERO_ERROR;\\n\\n    icu::Locale locale(\"en\");\\n    icu::RuleBasedNumberFormat rbnf(icu::URBNF_SPELLOUT, locale, status);\\n\\n    rbnf.format(number, ruleSetName, appendTo, pos, status);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-icu-_znk6icu_7521rulebasednumberformat6formatelrkns_13unicodestringers1_rns_13fieldpositioner10uerrorcode",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "3.17",
        "coverage_diff": "0.001331665138864802",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <unicode/unistr.h>\\n#include <unicode/rbnf.h>\\n#include <unicode/fieldpos.h>\\n#include <unicode/utypes.h>\\n#include <unicode/locid.h> // For icu::Locale\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    int64_t number = dataProvider.ConsumeIntegral<int64_t>();\\n    icu::UnicodeString appendTo;\\n    std::string ruleSetNameStr = dataProvider.ConsumeRandomLengthString(100);\\n    icu::UnicodeString ruleSetName = icu::UnicodeString::fromUTF8(ruleSetNameStr);\\n    icu::FieldPosition pos;\\n    UErrorCode status = U_ZERO_ERROR;\\n\\n    icu::Locale locale(\"en\");\\n    icu::RuleBasedNumberFormat rbnf(icu::URBNF_SPELLOUT, locale, status);\\n\\n    if (U_SUCCESS(status)) {\\n        rbnf.format(number, ruleSetName, appendTo, pos, status);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}