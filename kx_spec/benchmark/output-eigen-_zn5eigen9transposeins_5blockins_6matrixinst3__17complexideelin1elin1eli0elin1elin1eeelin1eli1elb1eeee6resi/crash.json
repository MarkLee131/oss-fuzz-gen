{
    "samples": [

    {
        "benchmark": "output-eigen-_zn5eigen9transposeins_5blockins_6matrixinst3__17complexideelin1elin1eli0elin1elin1eeelin1eli1elb1eeee6resi",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "37.01",
        "coverage_diff": "0.011570247933884297",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <Eigen/Core>\\n#include <Eigen/Dense>\\n#include <complex>\\n#include <cstdint>\\n#include <cstddef>\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    // Ensure the rows and cols are within a reasonable range to avoid excessive memory usage\\n    Eigen::Index rows = data_provider.ConsumeIntegralInRange<Eigen::Index>(1, 100);\\n    Eigen::Index cols = data_provider.ConsumeIntegralInRange<Eigen::Index>(1, 100);\\n\\n    // Initialize a random matrix with the given dimensions\\n    Eigen::Matrix<int, Eigen::Dynamic, Eigen::Dynamic> matrix = Eigen::Matrix<int, Eigen::Dynamic, Eigen::Dynamic>::Random(rows, cols);\\n\\n    // Perform the transpose operation\\n    Eigen::Matrix<int, Eigen::Dynamic, Eigen::Dynamic> transpose_matrix = matrix.transpose();\\n\\n    // Resize the transposed matrix back to original dimensions\\n    transpose_matrix.resize(rows, cols);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-eigen-_zn5eigen9transposeins_5blockins_6matrixinst3__17complexideelin1elin1eli0elin1elin1eeelin1eli1elb1eeee6resi",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "40.74",
        "coverage_diff": "0.011570247933884297",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <Eigen/Core>\\n#include <Eigen/Dense>\\n#include <complex>\\n#include <limits>\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    // Ensure rows and cols are within a reasonable range to avoid excessive memory allocation\\n    constexpr Eigen::Index kMaxSize = 1000; // Adjust this value as needed\\n    Eigen::Index rows = data_provider.ConsumeIntegralInRange<Eigen::Index>(1, kMaxSize);\\n    Eigen::Index cols = data_provider.ConsumeIntegralInRange<Eigen::Index>(1, kMaxSize);\\n\\n    Eigen::Matrix<int, Eigen::Dynamic, Eigen::Dynamic> matrix = Eigen::Matrix<int, Eigen::Dynamic, Eigen::Dynamic>::Random(rows, cols);\\n    Eigen::Matrix<int, Eigen::Dynamic, Eigen::Dynamic> transpose_matrix = matrix.transpose();\\n\\n    // Ensure the resize operation is valid by resizing to a different size\\n    Eigen::Index new_rows = data_provider.ConsumeIntegralInRange<Eigen::Index>(1, kMaxSize);\\n    Eigen::Index new_cols = data_provider.ConsumeIntegralInRange<Eigen::Index>(1, kMaxSize);\\n    transpose_matrix.resize(new_rows, new_cols);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}