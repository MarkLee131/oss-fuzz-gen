{
    "samples": [

    {
        "benchmark": "output-libusb-libusb_get_string_descriptor_ascii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_COV_INCREASE",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libusb.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    libusb_init(NULL);\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size == 0) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    libusb_context *ctx = nullptr;\\n    libusb_device_handle *dev_handle = nullptr;\\n    int result = libusb_init(&ctx);\\n    if (result != 0) {\\n        return 0;\\n    }\\n\\n    // Use a fake device address for fuzzing purposes\\n    dev_handle = libusb_open_device_with_vid_pid(ctx, 0x1234, 0x5678);\\n    if (dev_handle == nullptr) {\\n        libusb_exit(ctx);\\n        return 0;\\n    }\\n\\n    uint8_t desc_index = dataProvider.ConsumeIntegral<uint8_t>();\\n    int length = dataProvider.ConsumeIntegralInRange<int>(1, 255);\\n    unsigned char *buffer = static_cast<unsigned char*>(malloc(length));\\n\\n    if (buffer == nullptr) {\\n        libusb_close(dev_handle);\\n        libusb_exit(ctx);\\n        return 0;\\n    }\\n\\n    result = libusb_get_string_descriptor_ascii(dev_handle, desc_index, buffer, length);\\n\\n    // Check the result and print some debug information to ensure coverage\\n    if (result < 0) {\\n        std::cerr << \"Error getting string descriptor: \" << libusb_error_name(result) << std::endl;\\n    } else {\\n        std::cout << \"Descriptor: \" << std::string(reinterpret_cast<char*>(buffer), result) << std::endl;\\n    }\\n\\n    free(buffer);\\n    libusb_close(dev_handle);\\n    libusb_exit(ctx);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libusb-libusb_get_string_descriptor_ascii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.31",
        "coverage_diff": "0.11109139307897072",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libusb.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    libusb_init(NULL);\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    libusb_device_handle *dev_handle = reinterpret_cast<libusb_device_handle*>(dataProvider.ConsumeIntegral<uintptr_t>());\\n    uint8_t desc_index = dataProvider.ConsumeIntegral<uint8_t>();\\n    int length = dataProvider.ConsumeIntegralInRange<int>(1, 255);\\n    unsigned char *buffer = static_cast<unsigned char*>(malloc(length));\\n\\n    if (buffer == nullptr) {\\n        return 0;\\n    }\\n\\n    int result = libusb_get_string_descriptor_ascii(dev_handle, desc_index, buffer, length);\\n\\n    free(buffer);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}