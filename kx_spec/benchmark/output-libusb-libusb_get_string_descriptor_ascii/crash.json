{
    "samples": [

    {
        "benchmark": "output-libusb-libusb_get_string_descriptor_ascii",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libusb-1.0/libusb.h> // Correctly include the necessary header file for libusb\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    // Initialize the libusb library or any resources needed for the fuzzing process.\\n    libusb_init(NULL);\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create a mock or dummy libusb_device_handle for fuzzing purposes\\n    libusb_device_handle *dev_handle = reinterpret_cast<libusb_device_handle*>(fuzzed_data.ConsumeIntegral<uintptr_t>());\\n\\n    // Consume data for the desc_index parameter\\n    uint8_t desc_index = fuzzed_data.ConsumeIntegral<uint8_t>();\\n\\n    // Allocate a buffer for the data parameter\\n    int length = fuzzed_data.ConsumeIntegralInRange<int>(1, 256); // Reasonable range for buffer length\\n    unsigned char *data_buffer = new unsigned char[length];\\n\\n    // Call the target function with fuzzed parameters\\n    int result = libusb_get_string_descriptor_ascii(dev_handle, desc_index, data_buffer, length);\\n\\n    // Clean up\\n    delete[] data_buffer;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libusb-libusb_get_string_descriptor_ascii",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.31",
        "coverage_diff": "0.11109139307897072",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libusb.h>\\n#include <cstdint>\\n#include <cstdlib>\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    // Initialize the libusb library or any resources needed for the fuzzing process.\\n    if (libusb_init(NULL) != 0) {\\n        // Initialization failed, return non-zero to indicate an error.\\n        return 1;\\n    }\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Create a mock or dummy libusb_device_handle for fuzzing purposes\\n    libusb_device_handle *dev_handle = reinterpret_cast<libusb_device_handle*>(fuzzed_data.ConsumeIntegral<uintptr_t>());\\n\\n    // Consume data for the desc_index parameter\\n    uint8_t desc_index = fuzzed_data.ConsumeIntegral<uint8_t>();\\n\\n    // Allocate a buffer for the data parameter\\n    int length = fuzzed_data.ConsumeIntegralInRange<int>(1, 256); // Reasonable range for buffer length\\n    unsigned char *data_buffer = new unsigned char[length];\\n\\n    // Call the target function with fuzzed parameters\\n    int result = libusb_get_string_descriptor_ascii(dev_handle, desc_index, data_buffer, length);\\n\\n    // Clean up\\n    delete[] data_buffer;\\n\\n    return 0;\\n}\\n\\nextern \"C\" void LLVMFuzzerCleanup() {\\n    // Clean up the libusb library\\n    libusb_exit(NULL);\\n}",
        "model": ""
    }

    ]
}