{
    "samples": [

    {
        "benchmark": "output-libusb-libusb_get_bos_descriptor",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.10",
        "coverage_diff": "0.2574977817213842",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libusb.h>\\n#include <cstring> // For memset\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return libusb_init(NULL);\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 1) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    libusb_device_handle *dev_handle = nullptr;\\n    libusb_bos_descriptor *bos_desc = nullptr;\\n\\n    libusb_device **list;\\n    ssize_t cnt = libusb_get_device_list(NULL, &list);\\n    if (cnt > 0) {\\n        libusb_open(list[0], &dev_handle);\\n    }\\n\\n    if (dev_handle != nullptr) {\\n        int result = libusb_get_bos_descriptor(dev_handle, &bos_desc);\\n\\n        if (bos_desc) {\\n            libusb_free_bos_descriptor(bos_desc);\\n        }\\n        libusb_close(dev_handle);\\n    }\\n\\n    libusb_free_device_list(list, 1);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libusb-libusb_get_bos_descriptor",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libusb-1.0/libusb.h> // Corrected include path for libusb\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    // Initialize the library or any resources `libusb_get_bos_descriptor` within `libusb` project needed for the fuzzing process.\\n    return libusb_init(NULL); // Initialize libusb\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    // Create a FuzzedDataProvider to provide data to the function\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    // Create a dummy libusb_device_handle for testing\\n    libusb_device_handle *dev_handle = nullptr;\\n    libusb_bos_descriptor *bos_desc = nullptr;\\n\\n    // Open a device handle (this would normally be done with a real device, but for fuzzing, we simulate it)\\n    libusb_device **list = nullptr;\\n    ssize_t cnt = libusb_get_device_list(NULL, &list);\\n    if (cnt > 0) {\\n        libusb_open(list[0], &dev_handle);\\n    }\\n\\n    // Call the function with the fuzzed data\\n    int result = libusb_get_bos_descriptor(dev_handle, &bos_desc);\\n\\n    // Clean up\\n    if (bos_desc) {\\n        libusb_free_bos_descriptor(bos_desc);\\n    }\\n    if (dev_handle) {\\n        libusb_close(dev_handle);\\n    }\\n    if (list) {\\n        libusb_free_device_list(list, 1);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}