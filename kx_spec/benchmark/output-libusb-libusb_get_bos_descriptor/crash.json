{
    "samples": [

    {
        "benchmark": "output-libusb-libusb_get_bos_descriptor",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "12.12",
        "coverage_diff": "0.27861579414374443",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libusb.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <iostream>\\n\\nextern \"C\" {\\n#include <libusb.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    libusb_init(NULL);\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size == 0) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    libusb_device_handle *dev_handle = nullptr;\\n    libusb_context *ctx = nullptr;\\n    libusb_device **list = nullptr;\\n    ssize_t cnt;\\n    int result;\\n\\n    // Initialize libusb context\\n    result = libusb_init(&ctx);\\n    if (result != LIBUSB_SUCCESS) {\\n        return 0;\\n    }\\n\\n    // Get the list of USB devices\\n    cnt = libusb_get_device_list(ctx, &list);\\n    if (cnt < 0) {\\n        libusb_exit(ctx);\\n        return 0;\\n    }\\n\\n    // Open the first device in the list\\n    if (cnt > 0) {\\n        result = libusb_open(list[0], &dev_handle);\\n        if (result != LIBUSB_SUCCESS) {\\n            libusb_free_device_list(list, 1);\\n            libusb_exit(ctx);\\n            return 0;\\n        }\\n    } else {\\n        libusb_free_device_list(list, 1);\\n        libusb_exit(ctx);\\n        return 0;\\n    }\\n\\n    libusb_bos_descriptor *bos_desc = nullptr;\\n\\n    // Use a valid device handle to get the BOS descriptor\\n    result = libusb_get_bos_descriptor(dev_handle, &bos_desc);\\n\\n    if (bos_desc) {\\n        // Simulate some usage of the BOS descriptor\\n        uint8_t dev_capability_type = data_provider.ConsumeIntegral<uint8_t>();\\n        for (int i = 0; i < bos_desc->bNumDeviceCaps; ++i) {\\n            if (bos_desc->dev_capability[i]->bDevCapabilityType == dev_capability_type) {\\n                // Do something with the matching device capability\\n                std::cout << \"Found matching device capability type: \" << static_cast<int>(dev_capability_type) << std::endl;\\n            }\\n        }\\n        libusb_free_bos_descriptor(bos_desc);\\n    }\\n\\n    if (dev_handle) {\\n        libusb_close(dev_handle);\\n    }\\n    libusb_free_device_list(list, 1);\\n    libusb_exit(ctx);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libusb-libusb_get_bos_descriptor",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.17",
        "coverage_diff": "0.25820763087843834",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libusb.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <iostream>\\n\\nextern \"C\" {\\n#include <libusb.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    libusb_init(NULL);\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    // Ensure we have enough data to create a valid pointer\\n    if (size < sizeof(uintptr_t)) {\\n        return 0;\\n    }\\n\\n    // Create a dummy libusb_device_handle for fuzzing\\n    libusb_device_handle *dev_handle = nullptr;\\n\\n    // Use a valid USB device handle for testing\\n    libusb_device **devs;\\n    ssize_t cnt = libusb_get_device_list(NULL, &devs);\\n    if (cnt < 0) {\\n        return 0;\\n    }\\n\\n    if (cnt > 0) {\\n        // Open the first device in the list\\n        if (libusb_open(devs[0], &dev_handle) != 0) {\\n            libusb_free_device_list(devs, 1);\\n            return 0;\\n        }\\n    }\\n\\n    libusb_bos_descriptor *bos_desc = nullptr;\\n\\n    // Call the function under test\\n    int result = libusb_get_bos_descriptor(dev_handle, &bos_desc);\\n\\n    // Free resources if they were allocated\\n    if (bos_desc) {\\n        libusb_free_bos_descriptor(bos_desc);\\n    }\\n\\n    if (dev_handle) {\\n        libusb_close(dev_handle);\\n    }\\n\\n    libusb_free_device_list(devs, 1);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}