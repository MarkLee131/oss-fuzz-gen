{
    "samples": [

    {
        "benchmark": "output-libusb-libusb_get_bos_descriptor",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include <libusb.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    libusb_init(NULL);\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(libusb_device_handle)) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    libusb_device_handle* handle = reinterpret_cast<libusb_device_handle*>(malloc(sizeof(libusb_device_handle)));\\n    if (!handle) {\\n        return 0;\\n    }\\n\\n    libusb_bos_descriptor* bos_desc = nullptr;\\n\\n    int result = libusb_get_bos_descriptor(handle, &bos_desc);\\n\\n    if (result == 0 && bos_desc != nullptr) {\\n        libusb_free_bos_descriptor(bos_desc);\\n    }\\n\\n    free(handle);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libusb-libusb_get_bos_descriptor",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include <libusb-1.0/libusb.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    libusb_init(NULL);\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(libusb_device_handle)) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    libusb_device_handle* handle = reinterpret_cast<libusb_device_handle*>(malloc(sizeof(libusb_device_handle)));\\n    if (!handle) {\\n        return 0;\\n    }\\n\\n    libusb_bos_descriptor* bos_desc = nullptr;\\n\\n    int result = libusb_get_bos_descriptor(handle, &bos_desc);\\n\\n    if (result == 0 && bos_desc != nullptr) {\\n        libusb_free_bos_descriptor(bos_desc);\\n    }\\n\\n    free(handle);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libusb-libusb_get_bos_descriptor",
        "sample": "03",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include <libusb-1.0/libusb.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    libusb_init(NULL);\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(libusb_device_handle)) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    libusb_device_handle* handle = reinterpret_cast<libusb_device_handle*>(malloc(sizeof(libusb_device_handle)));\\n    if (!handle) {\\n        return 0;\\n    }\\n\\n    libusb_bos_descriptor* bos_desc = nullptr;\\n\\n    int result = libusb_get_bos_descriptor(handle, &bos_desc);\\n\\n    if (result == 0 && bos_desc != nullptr) {\\n        libusb_free_bos_descriptor(bos_desc);\\n    }\\n\\n    free(handle);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libusb-libusb_get_bos_descriptor",
        "sample": "04",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include <libusb.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    libusb_init(NULL);\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(libusb_device_handle)) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    libusb_device_handle* handle = reinterpret_cast<libusb_device_handle*>(malloc(sizeof(libusb_device_handle)));\\n    if (!handle) {\\n        return 0;\\n    }\\n\\n    libusb_bos_descriptor* bos_desc = nullptr;\\n\\n    int result = libusb_get_bos_descriptor(handle, &bos_desc);\\n\\n    if (result == 0 && bos_desc != nullptr) {\\n        libusb_free_bos_descriptor(bos_desc);\\n    }\\n\\n    free(handle);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libusb-libusb_get_bos_descriptor",
        "sample": "05",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include <libusb-1.0/libusb.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    libusb_init(NULL);\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(libusb_device_handle)) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    libusb_device_handle* handle = reinterpret_cast<libusb_device_handle*>(malloc(sizeof(libusb_device_handle)));\\n    if (!handle) {\\n        return 0;\\n    }\\n\\n    libusb_bos_descriptor* bos_desc = nullptr;\\n\\n    int result = libusb_get_bos_descriptor(handle, &bos_desc);\\n\\n    if (result == 0 && bos_desc != nullptr) {\\n        libusb_free_bos_descriptor(bos_desc);\\n    }\\n\\n    free(handle);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}