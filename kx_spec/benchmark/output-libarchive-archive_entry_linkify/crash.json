{
    "samples": [

    {
        "benchmark": "output-libarchive-archive_entry_linkify",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" { \\n#include <archive.h>\\n#include <archive_entry.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    struct archive_entry_linkresolver *resolver = archive_entry_linkresolver_new();\\n    if (!resolver) {\\n        return 0;\\n    }\\n\\n    struct archive_entry *entry = archive_entry_new();\\n    struct archive_entry *sparse_entry = archive_entry_new();\\n\\n    if (!entry || !sparse_entry) {\\n        if (entry) archive_entry_free(entry);\\n        if (sparse_entry) archive_entry_free(sparse_entry);\\n        archive_entry_linkresolver_free(resolver);\\n        return 0;\\n    }\\n\\n    // Simulate some fuzzing actions on the archive entries\\n    std::string entryPath = dataProvider.ConsumeRandomLengthString(100);\\n    std::string sparseEntryPath = dataProvider.ConsumeRandomLengthString(100);\\n\\n    archive_entry_set_pathname(entry, entryPath.c_str());\\n    archive_entry_set_pathname(sparse_entry, sparseEntryPath.c_str());\\n\\n    archive_entry_linkify(resolver, &entry, &sparse_entry);\\n\\n    if (entry) archive_entry_free(entry);\\n    if (sparse_entry) archive_entry_free(sparse_entry);\\n    archive_entry_linkresolver_free(resolver);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libarchive-archive_entry_linkify",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" { \\n#include <archive.h>\\n#include <archive_entry.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    struct archive_entry_linkresolver *resolver = archive_entry_linkresolver_new();\\n    if (!resolver) {\\n        return 0;\\n    }\\n\\n    struct archive_entry *entry = archive_entry_new();\\n    struct archive_entry *sparse_entry = archive_entry_new();\\n\\n    if (!entry || !sparse_entry) {\\n        if (entry) archive_entry_free(entry);\\n        if (sparse_entry) archive_entry_free(sparse_entry);\\n        archive_entry_linkresolver_free(resolver);\\n        return 0;\\n    }\\n\\n    // Populate the archive_entry with some data from the fuzzer\\n    std::string pathname = dataProvider.ConsumeRandomLengthString(100);\\n    archive_entry_set_pathname(entry, pathname.c_str());\\n    archive_entry_set_size(entry, dataProvider.ConsumeIntegral<int64_t>());\\n    archive_entry_set_filetype(entry, AE_IFREG);\\n    archive_entry_set_perm(entry, dataProvider.ConsumeIntegral<int>());\\n\\n    // Perform the linkify operation\\n    archive_entry_linkify(resolver, &entry, &sparse_entry);\\n\\n    // Free the allocated resources\\n    if (entry) archive_entry_free(entry);\\n    if (sparse_entry) archive_entry_free(sparse_entry);\\n    archive_entry_linkresolver_free(resolver);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}