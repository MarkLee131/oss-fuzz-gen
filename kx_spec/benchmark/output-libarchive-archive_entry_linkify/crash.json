{
    "samples": [

    {
        "benchmark": "output-libarchive-archive_entry_linkify",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"archive_entry.h\"\\n#include \"archive.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 1) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    struct archive *a = archive_write_new();\\n    if (!a) {\\n        return 0;\\n    }\\n\\n    struct archive_entry *entry = archive_entry_new();\\n    struct archive_entry *linked_entry = archive_entry_new();\\n    struct archive_entry_linkresolver *resolver = archive_entry_linkresolver_new();\\n\\n    std::vector<uint8_t> entry_data = dataProvider.ConsumeRemainingBytes<uint8_t>();\\n    if (!entry_data.empty()) {\\n        archive_entry_copy_pathname(entry, reinterpret_cast<const char *>(entry_data.data()));\\n    }\\n\\n    // Call the archive_entry_linkify function as required\\n    archive_entry_linkify(resolver, &entry, &linked_entry);\\n\\n    // Add the entry to the archive and then free it.\\n    archive_write_header(a, entry);\\n\\n    archive_entry_free(entry);\\n    archive_entry_free(linked_entry);\\n    archive_entry_linkresolver_free(resolver);\\n    archive_write_free(a);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libarchive-archive_entry_linkify",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_COV_INCREASE",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"archive_entry.h\"\\n#include \"archive.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 2 * sizeof(struct archive_entry *)) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    struct archive_entry_linkresolver *resolver = archive_entry_linkresolver_new();\\n    if (!resolver) {\\n        return 0;\\n    }\\n\\n    struct archive_entry *entry = archive_entry_new();\\n    struct archive_entry *linked_entry = nullptr;\\n\\n    std::vector<uint8_t> entry_data = dataProvider.ConsumeRemainingBytes<uint8_t>();\\n    if (!entry_data.empty()) {\\n        // Ensure the data is null-terminated to prevent buffer overflow\\n        entry_data.push_back('\\0');\\n        archive_entry_copy_pathname(entry, reinterpret_cast<const char *>(entry_data.data()));\\n    }\\n\\n    archive_entry_linkify(resolver, &entry, &linked_entry);\\n\\n    archive_entry_free(entry);\\n    if (linked_entry) {\\n        archive_entry_free(linked_entry);\\n    }\\n    archive_entry_linkresolver_free(resolver);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libarchive-archive_entry_linkify",
        "sample": "03",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"archive_entry.h\"\\n#include \"archive.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(struct archive_entry *) + sizeof(struct archive_entry *)) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    struct archive_entry_linkresolver *resolver = archive_entry_linkresolver_new();\\n    if (!resolver) {\\n        return 0;\\n    }\\n\\n    struct archive_entry *entry = archive_entry_new();\\n    struct archive_entry *linked_entry = nullptr;\\n\\n    std::vector<uint8_t> entry_data = dataProvider.ConsumeRemainingBytes<uint8_t>();\\n    if (!entry_data.empty()) {\\n        archive_entry_copy_pathname(entry, reinterpret_cast<const char *>(entry_data.data()));\\n    }\\n\\n    archive_entry_linkify(resolver, &entry, &linked_entry);\\n\\n    archive_entry_free(entry);\\n    if (linked_entry) {\\n        archive_entry_free(linked_entry);\\n    }\\n    archive_entry_linkresolver_free(resolver);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libarchive-archive_entry_linkify",
        "sample": "04",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"archive_entry.h\"\\n#include \"archive.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 2 * sizeof(archive_entry *)) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    archive_entry_linkresolver *resolver = archive_entry_linkresolver_new();\\n    if (!resolver) {\\n        return 0;\\n    }\\n\\n    archive_entry *entry = archive_entry_new();\\n    archive_entry *linked_entry = nullptr;\\n\\n    std::vector<uint8_t> entry_data = dataProvider.ConsumeRemainingBytes<uint8_t>();\\n    if (!entry_data.empty()) {\\n        archive_entry_copy_pathname(entry, reinterpret_cast<const char *>(entry_data.data()));\\n    }\\n\\n    archive_entry_linkify(resolver, &entry, &linked_entry);\\n\\n    archive_entry_free(entry);\\n    if (linked_entry) {\\n        archive_entry_free(linked_entry);\\n    }\\n    archive_entry_linkresolver_free(resolver);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libarchive-archive_entry_linkify",
        "sample": "05",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "FP_NEAR_INIT_CRASH",
        "bug": "False",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"archive_entry.h\"\\n#include \"archive.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 2 * sizeof(archive_entry *)) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    archive_entry_linkresolver *resolver = archive_entry_linkresolver_new();\\n    if (!resolver) {\\n        return 0;\\n    }\\n\\n    archive_entry *entry = archive_entry_new();\\n    archive_entry *linked_entry = nullptr;\\n\\n    std::vector<uint8_t> entry_data = dataProvider.ConsumeRemainingBytes<uint8_t>();\\n    if (!entry_data.empty()) {\\n        archive_entry_copy_pathname(entry, reinterpret_cast<const char *>(entry_data.data()));\\n    }\\n\\n    archive_entry_linkify(resolver, &entry, &linked_entry);\\n\\n    archive_entry_free(entry);\\n    if (linked_entry) {\\n        archive_entry_free(linked_entry);\\n    }\\n    archive_entry_linkresolver_free(resolver);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}