{
    "samples": [

    {
        "benchmark": "output-libvpx-decode_tiles_row_wise_mt",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <vector>\\n\\nextern \"C\" {\\n#include <vpx/vpx_decoder.h>\\n#include <vpx/vp8dx.h>\\n#include <vpx/vp9/decoder/vp9_decoder.h>\\n#include <vpx/vp9/common/vp9_common.h>\\n#include <vpx/vp9/common/vp9_loopfilter.h>\\n#include <vpx/vp9/common/vp9_tile_common.h>\\n#include <vpx/vp9/decoder/vp9_job_queue.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 2) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    VP9Decoder pbi;\\n    // Initialize the pbi structure here (omitted for brevity)\\n    // Proper initialization should be done according to the VP9Decoder structure requirements\\n\\n    std::vector<uint8_t> data_vector = fuzzed_data.ConsumeBytes<uint8_t>(size / 2);\\n    const uint8_t *data_ptr = data_vector.data();\\n    const uint8_t *data_end_ptr = data_ptr + data_vector.size();\\n\\n    const uint8_t *result = decode_tiles_row_wise_mt(&pbi, data_ptr, data_end_ptr);\\n\\n    // Postcondition checks (if any)\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libvpx-decode_tiles_row_wise_mt",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint> // for uint8_t, size_t\\n#include <cstdlib> // for size_t\\n#include <vector>  // for std::vector\\n\\nextern \"C\" {\\n    #include \"vpx/vpx_decoder.h\"\\n    #include \"vpx/vp8dx.h\"\\n    #include \"vpx/vp9/decoder/vp9_decoder.h\"\\n    #include \"vpx/vp9/decoder/vp9_decodeframe.h\"\\n    #include \"vpx/vp9/decoder/vp9_tile_worker.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < 2) {\\n        return 0; // Not enough data to proceed\\n    }\\n\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    VP9Decoder pbi;\\n    // Proper initialization of pbi structure (omitted for brevity)\\n\\n    std::vector<uint8_t> data_part1 = fuzzed_data.ConsumeBytes<uint8_t>(size / 2);\\n    std::vector<uint8_t> data_part2 = fuzzed_data.ConsumeBytes<uint8_t>(size / 2);\\n\\n    if (data_part1.empty() || data_part2.empty()) {\\n        return 0; // Ensure non-empty data parts\\n    }\\n\\n    const uint8_t *data_ptr = data_part1.data();\\n    const uint8_t *data_end_ptr = data_part2.data();\\n\\n    const uint8_t *result = decode_tiles_row_wise_mt(&pbi, data_ptr, data_end_ptr);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}