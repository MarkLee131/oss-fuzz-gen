{
    "samples": [

    {
        "benchmark": "output-libplist-plist_from_memory",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "14.95",
        "coverage_diff": "0.006412005457025921",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <plist/plist.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n    #include \"plist/plist.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider provider(data, size);\\n\\n    std::vector<uint8_t> plist_data_vector = provider.ConsumeBytes<uint8_t>(provider.remaining_bytes());\\n    const char *plist_data = reinterpret_cast<const char *>(plist_data_vector.data());\\n\\n    uint32_t length = static_cast<uint32_t>(plist_data_vector.size());\\n\\n    plist_t plist = nullptr;\\n\\n    plist_format_t format;\\n\\n    plist_err_t result = plist_from_memory(plist_data, length, &plist, &format);\\n\\n    if (plist) {\\n        plist_free(plist);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libplist-plist_from_memory",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "14.77",
        "coverage_diff": "0.006412005457025921",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <plist/plist.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n    #include \"plist/plist.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider provider(data, size);\\n\\n    std::vector<uint8_t> plist_data_vector = provider.ConsumeBytes<uint8_t>(provider.remaining_bytes());\\n    const char *plist_data = reinterpret_cast<const char *>(plist_data_vector.data());\\n\\n    uint32_t length = static_cast<uint32_t>(plist_data_vector.size());\\n\\n    plist_t plist = nullptr;\\n\\n    plist_format_t format;\\n\\n    plist_err_t result = plist_from_memory(plist_data, length, &plist, &format);\\n\\n    if (plist) {\\n        plist_free(plist);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libplist-plist_from_memory",
        "sample": "03",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "15.26",
        "coverage_diff": "0.006412005457025921",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <plist/plist.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n    #include \"plist/plist.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider provider(data, size);\\n\\n    std::vector<uint8_t> plist_data_vector = provider.ConsumeBytes<uint8_t>(provider.remaining_bytes());\\n    const char *plist_data = reinterpret_cast<const char *>(plist_data_vector.data());\\n\\n    uint32_t length = static_cast<uint32_t>(plist_data_vector.size());\\n\\n    plist_t plist = nullptr;\\n\\n    plist_format_t format;\\n\\n    plist_err_t result = plist_from_memory(plist_data, length, &plist, &format);\\n\\n    if (plist) {\\n        plist_free(plist);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libplist-plist_from_memory",
        "sample": "04",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "15.76",
        "coverage_diff": "0.006412005457025921",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <plist/plist.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n    #include \"plist/plist.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider provider(data, size);\\n\\n    std::vector<uint8_t> plist_data_vector = provider.ConsumeBytes<uint8_t>(provider.remaining_bytes());\\n    const char *plist_data = reinterpret_cast<const char *>(plist_data_vector.data());\\n\\n    uint32_t length = static_cast<uint32_t>(plist_data_vector.size());\\n\\n    plist_t plist = nullptr;\\n\\n    plist_format_t format;\\n\\n    plist_err_t result = plist_from_memory(plist_data, length, &plist, &format);\\n\\n    if (plist) {\\n        plist_free(plist);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libplist-plist_from_memory",
        "sample": "05",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "14.46",
        "coverage_diff": "0.006412005457025921",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <plist/plist.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <vector>\\n\\nextern \"C\" {\\n    #include \"plist/plist.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider provider(data, size);\\n\\n    std::vector<uint8_t> plist_data_vector = provider.ConsumeBytes<uint8_t>(provider.remaining_bytes());\\n    const char *plist_data = reinterpret_cast<const char *>(plist_data_vector.data());\\n\\n    uint32_t length = static_cast<uint32_t>(plist_data_vector.size());\\n\\n    plist_t plist = nullptr;\\n\\n    plist_format_t format;\\n\\n    plist_err_t result = plist_from_memory(plist_data, length, &plist, &format);\\n\\n    if (plist) {\\n        plist_free(plist);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}