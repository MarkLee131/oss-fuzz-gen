{
    "samples": [

    {
        "benchmark": "output-flex-main2",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <string>\\n#include <vector>\\n\\nextern \"C\" {\\n    extern int main2(int, char **);\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    int argc = data_provider.ConsumeIntegralInRange<int>(1, 100);\\n\\n    std::vector<char *> argv(argc + 1, nullptr);\\n\\n    for (int i = 0; i < argc; ++i) {\\n        std::string arg = data_provider.ConsumeRandomLengthString(100);\\n        argv[i] = static_cast<char *>(malloc(arg.size() + 1));\\n        if (!argv[i]) {\\n            for (int j = 0; j < i; ++j) {\\n                free(argv[j]);\\n            }\\n            return 0;\\n        }\\n        std::memcpy(argv[i], arg.c_str(), arg.size() + 1);\\n    }\\n\\n    int result = main2(argc, argv.data());\\n\\n    for (int i = 0; i < argc; ++i) {\\n        free(argv[i]);\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-flex-main2",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <cstring>\\n#include <string>\\n\\nextern \"C\" {\\n    extern int main2(int, char **);\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    int argc = data_provider.ConsumeIntegralInRange<int>(1, 100);\\n\\n    char **argv = static_cast<char **>(malloc((argc + 1) * sizeof(char *)));\\n    if (!argv) {\\n        return 0;\\n    }\\n\\n    for (int i = 0; i < argc; ++i) {\\n        std::string arg = data_provider.ConsumeRandomLengthString(100);\\n        argv[i] = static_cast<char *>(malloc(arg.size() + 1));\\n        if (!argv[i]) {\\n            for (int j = 0; j < i; ++j) {\\n                free(argv[j]);\\n            }\\n            free(argv);\\n            return 0;\\n        }\\n        std::memcpy(argv[i], arg.c_str(), arg.size() + 1);\\n    }\\n    argv[argc] = nullptr;\\n\\n    int result = main2(argc, argv);\\n\\n    for (int i = 0; i < argc; ++i) {\\n        free(argv[i]);\\n    }\\n    free(argv);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}