{
    "samples": [

    {
        "benchmark": "output-jsonnet-jsonnet_evaluate_file",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.60",
        "coverage_diff": "0.0009295713035870516",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\nextern \"C\" {\\n    #include \"libjsonnet.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    JsonnetVm *vm = jsonnet_make();\\n    if (vm == nullptr) {\\n        return 0;\\n    }\\n\\n    std::string filename_str = fuzzed_data.ConsumeRandomLengthString();\\n    const char *filename = filename_str.c_str();\\n\\n    int error = 0;\\n\\n    char *result = jsonnet_evaluate_file(vm, filename, &error);\\n\\n    if (result != nullptr) {\\n        jsonnet_realloc(vm, result, 0);\\n    }\\n\\n    jsonnet_destroy(vm);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-jsonnet-jsonnet_evaluate_file",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include \"libjsonnet.h\" // Ensure the correct header file is included for the function declaration\\n\\nextern \"C\" {\\n    #include \"libjsonnet.h\" // Ensure the correct header file is included for the function declaration\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    // Initialize the library or any resources `jsonnet_evaluate_file` within the `jsonnet` project needs for the fuzzing process.\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    JsonnetVm *vm = jsonnet_make();\\n    if (vm == nullptr) {\\n        return 0;\\n    }\\n\\n    std::string filename_str = fuzzed_data.ConsumeRandomLengthString(size);\\n    const char *filename = filename_str.c_str();\\n    \\n    int error = 0;\\n\\n    char *result = jsonnet_evaluate_file(vm, filename, &error);\\n\\n    if (result != nullptr) {\\n        jsonnet_realloc(vm, result, 0);\\n    }\\n\\n    jsonnet_destroy(vm);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}