{
    "samples": [

    {
        "benchmark": "output-jsonnet-jsonnet_evaluate_file",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.60",
        "coverage_diff": "0.000929520476789327",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"libjsonnet.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    std::string fuzzed_filename = fuzzed_data.ConsumeRandomLengthString();\\n    fuzzed_filename.push_back('\\0');\\n\\n    JsonnetVm *vm = jsonnet_make();\\n\\n    int error = 0;\\n    char *result = jsonnet_evaluate_file(vm, fuzzed_filename.c_str(), &error);\\n\\n    if (result != nullptr) {\\n        jsonnet_realloc(vm, result, 0);\\n    }\\n\\n    jsonnet_destroy(vm);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-jsonnet-jsonnet_evaluate_file",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.60",
        "coverage_diff": "0.000929520476789327",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"libjsonnet.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    std::string fuzzed_filename = fuzzed_data.ConsumeRandomLengthString();\\n    fuzzed_filename.push_back('\\0');\\n\\n    JsonnetVm *vm = jsonnet_make();\\n    int error = 0;\\n\\n    char *result = jsonnet_evaluate_file(vm, fuzzed_filename.c_str(), &error);\\n\\n    if (result != nullptr) {\\n        jsonnet_realloc(vm, result, 0);\\n    }\\n\\n    jsonnet_destroy(vm);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-jsonnet-jsonnet_evaluate_file",
        "sample": "03",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.60",
        "coverage_diff": "0.000929520476789327",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"libjsonnet.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n    std::string fuzzed_filename = fuzzed_data.ConsumeRandomLengthString();\\n    fuzzed_filename.push_back('\\0');\\n\\n    JsonnetVm *vm = jsonnet_make();\\n    int error = 0;\\n    char *result = jsonnet_evaluate_file(vm, fuzzed_filename.c_str(), &error);\\n\\n    if (result != nullptr) {\\n        jsonnet_realloc(vm, result, 0);\\n    }\\n\\n    jsonnet_destroy(vm);\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-jsonnet-jsonnet_evaluate_file",
        "sample": "04",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.60",
        "coverage_diff": "0.000929520476789327",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"libjsonnet.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n    std::string fuzzed_filename = fuzzed_data.ConsumeRandomLengthString();\\n    fuzzed_filename.push_back('\\0');\\n\\n    JsonnetVm *vm = jsonnet_make();\\n    int error = 0;\\n    char *result = jsonnet_evaluate_file(vm, fuzzed_filename.c_str(), &error);\\n\\n    if (result != nullptr) {\\n        jsonnet_realloc(vm, result, 0);\\n    }\\n\\n    jsonnet_destroy(vm);\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-jsonnet-jsonnet_evaluate_file",
        "sample": "05",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.60",
        "coverage_diff": "0.000929520476789327",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"libjsonnet.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    std::string fuzzed_filename = fuzzed_data.ConsumeRandomLengthString();\\n    fuzzed_filename.push_back('\\0');\\n\\n    JsonnetVm *vm = jsonnet_make();\\n    int error = 0;\\n\\n    char *result = jsonnet_evaluate_file(vm, fuzzed_filename.c_str(), &error);\\n\\n    if (result != nullptr) {\\n        jsonnet_realloc(vm, result, 0);\\n    }\\n\\n    jsonnet_destroy(vm);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}