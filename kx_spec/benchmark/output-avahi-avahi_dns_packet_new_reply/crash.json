{
    "samples": [

    {
        "benchmark": "output-avahi-avahi_dns_packet_new_reply",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.11",
        "coverage_diff": "0.001034126163391934",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cassert>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n\\nextern \"C\" {\\n#include \"avahi-core/dns.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(AvahiDnsPacket)) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    AvahiDnsPacket *p = reinterpret_cast<AvahiDnsPacket*>(malloc(sizeof(AvahiDnsPacket)));\\n    if (!p) {\\n        return 0;\\n    }\\n\\n    p->rindex = data_provider.ConsumeIntegral<unsigned>();\\n\\n    unsigned mtu = data_provider.ConsumeIntegral<unsigned>();\\n    int copy_queries = data_provider.ConsumeIntegralInRange<int>(0, 1);\\n    int aa = data_provider.ConsumeIntegralInRange<int>(0, 1);\\n\\n    AvahiDnsPacket *result = avahi_dns_packet_new_reply(p, mtu, copy_queries, aa);\\n\\n    if (result) {\\n        free(result);\\n    }\\n    free(p);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-avahi-avahi_dns_packet_new_reply",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.11",
        "coverage_diff": "0.001034126163391934",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cassert>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n\\nextern \"C\" {\\n#include \"avahi-core/dns.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(AvahiDnsPacket)) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    AvahiDnsPacket *p = reinterpret_cast<AvahiDnsPacket*>(malloc(sizeof(AvahiDnsPacket)));\\n    if (!p) {\\n        return 0;\\n    }\\n\\n    p->rindex = data_provider.ConsumeIntegral<unsigned>();\\n\\n    unsigned mtu = data_provider.ConsumeIntegral<unsigned>();\\n    int copy_queries = data_provider.ConsumeIntegral<int>();\\n    int aa = data_provider.ConsumeIntegral<int>();\\n\\n    AvahiDnsPacket *result = avahi_dns_packet_new_reply(p, mtu, copy_queries, aa);\\n\\n    if (result) {\\n        free(result);\\n    }\\n    free(p);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}