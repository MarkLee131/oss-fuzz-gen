{
    "samples": [

    {
        "benchmark": "output-fribidi-fribidi_log2vis",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "47.94",
        "coverage_diff": "0.1453416149068323",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"fribidi-types.h\"\\n#include \"fribidi-bidi-types.h\"\\n#include \"fribidi-flags.h\"\\n#include \"fribidi-joining-types.h\"\\n#include \"fribidi-joining-types-list.h\"\\n#include \"run.h\"\\n}\\n\\nextern \"C\" FriBidiLevel fribidi_log2vis(const FriBidiChar *, const FriBidiStrIndex, FriBidiParType *, FriBidiChar *, FriBidiStrIndex *, FriBidiStrIndex *, FriBidiLevel *);\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    FriBidiStrIndex len = data_provider.ConsumeIntegralInRange<FriBidiStrIndex>(0, 1024);\\n    std::vector<FriBidiChar> str(len);\\n    for (FriBidiStrIndex i = 0; i < len; ++i) {\\n        str[i] = data_provider.ConsumeIntegral<FriBidiChar>();\\n    }\\n\\n    FriBidiParType base_dir = data_provider.ConsumeIntegral<FriBidiParType>();\\n    std::vector<FriBidiChar> visual_str(len);\\n    std::vector<FriBidiStrIndex> positions_L_to_V(len);\\n    std::vector<FriBidiStrIndex> positions_V_to_L(len);\\n    std::vector<FriBidiLevel> embedding_levels(len);\\n\\n    FriBidiLevel result = fribidi_log2vis(\\n        str.data(),\\n        len,\\n        &base_dir,\\n        visual_str.data(),\\n        positions_L_to_V.data(),\\n        positions_V_to_L.data(),\\n        embedding_levels.data()\\n    );\\n\\n    if (result < 0) {\\n        // Handle error condition\\n    }\\n\\n    for (FriBidiStrIndex i = 0; i < len; ++i) {\\n        // Validate visual_str[i] if necessary\\n    }\\n\\n    for (FriBidiStrIndex i = 0; i < len; ++i) {\\n        // Validate positions_L_to_V[i] and positions_V_to_L[i] if necessary\\n    }\\n\\n    for (FriBidiStrIndex i = 0; i < len; ++i) {\\n        // Validate embedding_levels[i] if necessary\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-fribidi-fribidi_log2vis",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "48.73",
        "coverage_diff": "0.14347826086956522",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"fribidi-types.h\"\\n#include \"fribidi-bidi-types.h\"\\n#include \"fribidi-flags.h\"\\n#include \"fribidi-joining-types.h\"\\n#include \"fribidi-joining-types-list.h\"\\n#include \"run.h\"\\n}\\n\\nextern \"C\" FriBidiLevel fribidi_log2vis(const FriBidiChar *, const FriBidiStrIndex, FriBidiParType *, FriBidiChar *, FriBidiStrIndex *, FriBidiStrIndex *, FriBidiLevel *);\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    FriBidiStrIndex len = data_provider.ConsumeIntegralInRange<FriBidiStrIndex>(0, 1024);\\n    std::vector<FriBidiChar> str(len);\\n    for (FriBidiStrIndex i = 0; i < len; ++i) {\\n        str[i] = data_provider.ConsumeIntegral<FriBidiChar>();\\n    }\\n\\n    FriBidiParType base_dir = data_provider.ConsumeIntegral<FriBidiParType>();\\n    std::vector<FriBidiChar> visual_str(len);\\n    std::vector<FriBidiStrIndex> positions_L_to_V(len);\\n    std::vector<FriBidiStrIndex> positions_V_to_L(len);\\n    std::vector<FriBidiLevel> embedding_levels(len);\\n\\n    FriBidiLevel result = fribidi_log2vis(\\n        str.data(),\\n        len,\\n        &base_dir,\\n        visual_str.data(),\\n        positions_L_to_V.data(),\\n        positions_V_to_L.data(),\\n        embedding_levels.data()\\n    );\\n\\n    if (result < 0) {\\n        // Handle error condition\\n    }\\n\\n    for (FriBidiStrIndex i = 0; i < len; ++i) {\\n        // Validate visual_str[i] if necessary\\n    }\\n\\n    for (FriBidiStrIndex i = 0; i < len; ++i) {\\n        // Validate positions_L_to_V[i] and positions_V_to_L[i] if necessary\\n    }\\n\\n    for (FriBidiStrIndex i = 0; i < len; ++i) {\\n        // Validate embedding_levels[i] if necessary\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-fribidi-fribidi_log2vis",
        "sample": "03",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "50.04",
        "coverage_diff": "0.14596273291925466",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"fribidi-types.h\"\\n#include \"fribidi-bidi-types.h\"\\n#include \"fribidi-flags.h\"\\n#include \"fribidi-joining-types.h\"\\n#include \"fribidi-joining-types-list.h\"\\n#include \"run.h\"\\n}\\n\\n// Forward declaration of the function under test\\nextern \"C\" FriBidiLevel fribidi_log2vis(const FriBidiChar *, const FriBidiStrIndex, FriBidiParType *, FriBidiChar *, FriBidiStrIndex *, FriBidiStrIndex *, FriBidiLevel *);\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    // Initialize the library or any resources within FriBidi needed for the fuzzing process here.\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    // Generate input parameters\\n    FriBidiStrIndex len = data_provider.ConsumeIntegralInRange<FriBidiStrIndex>(0, 1024);\\n    std::vector<FriBidiChar> str(len);\\n    for (FriBidiStrIndex i = 0; i < len; ++i) {\\n        str[i] = data_provider.ConsumeIntegral<FriBidiChar>();\\n    }\\n\\n    FriBidiParType base_dir = data_provider.ConsumeIntegral<FriBidiParType>();\\n    std::vector<FriBidiChar> visual_str(len);\\n    std::vector<FriBidiStrIndex> positions_L_to_V(len);\\n    std::vector<FriBidiStrIndex> positions_V_to_L(len);\\n    std::vector<FriBidiLevel> embedding_levels(len);\\n\\n    // Call the function under test\\n    FriBidiLevel result = fribidi_log2vis(\\n        str.data(),\\n        len,\\n        &base_dir,\\n        visual_str.data(),\\n        positions_L_to_V.data(),\\n        positions_V_to_L.data(),\\n        embedding_levels.data()\\n    );\\n\\n    // Postconditions\\n    // Ensure the function returns a valid FriBidiLevel\\n    if (result < 0) {\\n        // Handle error condition\\n    }\\n\\n    // Ensure the visual_str array is properly populated\\n    for (FriBidiStrIndex i = 0; i < len; ++i) {\\n        // Validate visual_str[i] if necessary\\n    }\\n\\n    // Ensure the positions_L_to_V and positions_V_to_L arrays are properly populated\\n    for (FriBidiStrIndex i = 0; i < len; ++i) {\\n        // Validate positions_L_to_V[i] and positions_V_to_L[i] if necessary\\n    }\\n\\n    // Ensure the embedding_levels array is properly populated\\n    for (FriBidiStrIndex i = 0; i < len; ++i) {\\n        // Validate embedding_levels[i] if necessary\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-fribidi-fribidi_log2vis",
        "sample": "04",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "51.62",
        "coverage_diff": "0.16273291925465838",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"fribidi-types.h\"\\n#include \"fribidi-bidi-types.h\"\\n#include \"fribidi-flags.h\"\\n#include \"fribidi-joining-types.h\"\\n#include \"fribidi-joining-types-list.h\"\\n#include \"run.h\"\\n}\\n\\nextern \"C\" FriBidiLevel fribidi_log2vis(const FriBidiChar *, const FriBidiStrIndex, FriBidiParType *, FriBidiChar *, FriBidiStrIndex *, FriBidiStrIndex *, FriBidiLevel *);\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    FriBidiStrIndex len = data_provider.ConsumeIntegralInRange<FriBidiStrIndex>(0, 1024);\\n    std::vector<FriBidiChar> str(len);\\n    for (FriBidiStrIndex i = 0; i < len; ++i) {\\n        str[i] = data_provider.ConsumeIntegral<FriBidiChar>();\\n    }\\n\\n    FriBidiParType base_dir = data_provider.ConsumeIntegral<FriBidiParType>();\\n    std::vector<FriBidiChar> visual_str(len);\\n    std::vector<FriBidiStrIndex> positions_L_to_V(len);\\n    std::vector<FriBidiStrIndex> positions_V_to_L(len);\\n    std::vector<FriBidiLevel> embedding_levels(len);\\n\\n    FriBidiLevel result = fribidi_log2vis(\\n        str.data(),\\n        len,\\n        &base_dir,\\n        visual_str.data(),\\n        positions_L_to_V.data(),\\n        positions_V_to_L.data(),\\n        embedding_levels.data()\\n    );\\n\\n    if (result < 0) {\\n        // Handle error condition\\n    }\\n\\n    for (FriBidiStrIndex i = 0; i < len; ++i) {\\n        // Validate visual_str[i] if necessary\\n    }\\n\\n    for (FriBidiStrIndex i = 0; i < len; ++i) {\\n        // Validate positions_L_to_V[i] and positions_V_to_L[i] if necessary\\n    }\\n\\n    for (FriBidiStrIndex i = 0; i < len; ++i) {\\n        // Validate embedding_levels[i] if necessary\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-fribidi-fribidi_log2vis",
        "sample": "05",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "51.53",
        "coverage_diff": "0.16273291925465838",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"fribidi-types.h\"\\n#include \"fribidi-bidi-types.h\"\\n#include \"fribidi-flags.h\"\\n#include \"fribidi-joining-types.h\"\\n#include \"fribidi-joining-types-list.h\"\\n#include \"run.h\"\\n}\\n\\nextern \"C\" FriBidiLevel fribidi_log2vis(const FriBidiChar *, const FriBidiStrIndex, FriBidiParType *, FriBidiChar *, FriBidiStrIndex *, FriBidiStrIndex *, FriBidiLevel *);\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider data_provider(data, size);\\n\\n    FriBidiStrIndex len = data_provider.ConsumeIntegralInRange<FriBidiStrIndex>(0, 1024);\\n    std::vector<FriBidiChar> str(len);\\n    for (FriBidiStrIndex i = 0; i < len; ++i) {\\n        str[i] = data_provider.ConsumeIntegral<FriBidiChar>();\\n    }\\n\\n    FriBidiParType base_dir = data_provider.ConsumeIntegral<FriBidiParType>();\\n    std::vector<FriBidiChar> visual_str(len);\\n    std::vector<FriBidiStrIndex> positions_L_to_V(len);\\n    std::vector<FriBidiStrIndex> positions_V_to_L(len);\\n    std::vector<FriBidiLevel> embedding_levels(len);\\n\\n    FriBidiLevel result = fribidi_log2vis(\\n        str.data(),\\n        len,\\n        &base_dir,\\n        visual_str.data(),\\n        positions_L_to_V.data(),\\n        positions_V_to_L.data(),\\n        embedding_levels.data()\\n    );\\n\\n    if (result < 0) {\\n        // Handle error condition\\n    }\\n\\n    for (FriBidiStrIndex i = 0; i < len; ++i) {\\n        // Validate visual_str[i] if necessary\\n    }\\n\\n    for (FriBidiStrIndex i = 0; i < len; ++i) {\\n        // Validate positions_L_to_V[i] and positions_V_to_L[i] if necessary\\n    }\\n\\n    for (FriBidiStrIndex i = 0; i < len; ++i) {\\n        // Validate embedding_levels[i] if necessary\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}