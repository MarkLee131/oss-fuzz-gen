{
    "samples": [

    {
        "benchmark": "output-libarchive-archive_entry_acl_text_w",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n#include <cwchar>\\n\\nextern \"C\" { \\n#include <archive_entry.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    archive_entry *entry = archive_entry_new();\\n    if (entry == nullptr) {\\n        return 0;\\n    }\\n\\n    int flags = dataProvider.ConsumeIntegral<int>();\\n\\n    // Create a non-null input for archive_entry_acl_text_w\\n    archive_entry_set_pathname(entry, \"test\");\\n    archive_entry_set_filetype(entry, AE_IFREG);\\n    archive_entry_set_perm(entry, 0644);\\n\\n    const wchar_t *result = archive_entry_acl_text_w(entry, flags);\\n\\n    if (result != nullptr) {\\n        size_t len = wcslen(result);\\n        if (len > 0) {\\n            std::wcout << result << std::endl;\\n        }\\n    }\\n\\n    archive_entry_free(entry);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libarchive-archive_entry_acl_text_w",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n#include <cwchar> // For wcslen\\n\\nextern \"C\" {\\n#include \"archive_entry.h\"\\n#include \"archive.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    archive_entry *entry = archive_entry_new();\\n    if (entry == nullptr) {\\n        return 0;\\n    }\\n\\n    int flags = dataProvider.ConsumeIntegral<int>();\\n\\n    // Create a dummy ACL entry to ensure archive_entry_acl_text_w has something to process\\n    int qual = dataProvider.ConsumeIntegral<int>(); // Consuming an integer for the 'qual' argument\\n    archive_entry_acl_add_entry_w(entry, ARCHIVE_ENTRY_ACL_TYPE_ACCESS, ARCHIVE_ENTRY_ACL_EXECUTE, ARCHIVE_ENTRY_ACL_USER, qual, L\"user\");\\n\\n    const wchar_t *result = archive_entry_acl_text_w(entry, flags);\\n\\n    if (result != nullptr) {\\n        size_t len = wcslen(result);\\n        if (len > 0) {\\n            std::wcout << result << std::endl;\\n        }\\n    }\\n\\n    archive_entry_free(entry);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}