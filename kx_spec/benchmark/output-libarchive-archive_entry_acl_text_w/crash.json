{
    "samples": [

    {
        "benchmark": "output-libarchive-archive_entry_acl_text_w",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <cstdint>\\n\\n// Wrap C code with extern \"C\"\\nextern \"C\" {\\n    #include <archive.h>\\n    #include <archive_entry.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider data_provider(data, size);\\n    int flags = data_provider.ConsumeIntegral<int>();\\n\\n    struct archive_entry *entry = archive_entry_new();\\n    if (entry == nullptr) {\\n        return 0;\\n    }\\n\\n    // Consume some data to create a non-null input for archive_entry_acl_text_w\\n    std::string acl_string = data_provider.ConsumeRandomLengthString(size);\\n    archive_entry_copy_pathname(entry, acl_string.c_str());\\n\\n    const wchar_t *acl_text = archive_entry_acl_text_w(entry, flags);\\n\\n    if (acl_text != nullptr) {\\n        // Do something with acl_text if needed\\n    }\\n\\n    archive_entry_free(entry);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libarchive-archive_entry_acl_text_w",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <archive.h>  // Required for the archive structure and related functions\\n#include <archive_entry.h>  // Required for the archive_entry structure and related functions\\n#include <wchar.h>  // Required for wide character functions\\n\\nextern \"C\" {\\n    #include <archive.h>\\n    #include <archive_entry.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider data_provider(data, size);\\n    int flags = data_provider.ConsumeIntegral<int>();\\n    struct archive_entry *entry = archive_entry_new();\\n    if (entry == nullptr) {\\n        return 0;\\n    }\\n    \\n    // Generate some dummy ACL text to ensure the function under test has non-null input\\n    const wchar_t dummy_acl_text[] = L\"user::rwx\\\ngroup::r-x\\\nother::r--\\\n\";\\n    archive_entry_acl_clear(entry);\\n    archive_entry_acl_add_entry_w(entry, ARCHIVE_ENTRY_ACL_TYPE_ACCESS, ARCHIVE_ENTRY_ACL_READ, ARCHIVE_ENTRY_ACL_USER, 0, dummy_acl_text);\\n\\n    const wchar_t *acl_text = archive_entry_acl_text_w(entry, flags);\\n    if (acl_text != nullptr) {\\n        // Do something with the result if needed (e.g., validate the ACL text format)\\n    }\\n    archive_entry_free(entry);\\n    return 0;\\n}",
        "model": ""
    }

    ]
}