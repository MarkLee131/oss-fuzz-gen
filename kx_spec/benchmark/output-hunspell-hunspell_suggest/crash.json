{
    "samples": [

    {
        "benchmark": "output-hunspell-hunspell_suggest",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.60",
        "coverage_diff": "0.005680119581464873",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"hunspell.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider provider(data, size);\\n\\n    std::string word = provider.ConsumeRandomLengthString();\\n\\n    Hunhandle* pHunspell = Hunspell_create(\"path/to/dictionary.aff\", \"path/to/dictionary.dic\");\\n    if (!pHunspell) {\\n        return 0;\\n    }\\n\\n    char** slst = nullptr;\\n\\n    int result = Hunspell_suggest(pHunspell, &slst, word.c_str());\\n\\n    if (slst) {\\n        for (int i = 0; i < result; ++i) {\\n            free(slst[i]);\\n        }\\n        free(slst);\\n    }\\n\\n    Hunspell_destroy(pHunspell);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-hunspell-hunspell_suggest",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.47",
        "coverage_diff": "0.005680119581464873",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"hunspell.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider provider(data, size);\\n\\n    std::string word = provider.ConsumeRandomLengthString();\\n\\n    Hunhandle* pHunspell = Hunspell_create(\"path/to/dictionary.aff\", \"path/to/dictionary.dic\");\\n    if (!pHunspell) {\\n        return 0;\\n    }\\n\\n    char** slst = nullptr;\\n\\n    int result = Hunspell_suggest(pHunspell, &slst, word.c_str());\\n\\n    if (slst) {\\n        for (int i = 0; i < result; ++i) {\\n            free(slst[i]);\\n        }\\n        free(slst);\\n    }\\n\\n    Hunspell_destroy(pHunspell);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-hunspell-hunspell_suggest",
        "sample": "03",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.62",
        "coverage_diff": "0.005680119581464873",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"hunspell.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider provider(data, size);\\n\\n    std::string word = provider.ConsumeRandomLengthString();\\n\\n    Hunhandle* pHunspell = Hunspell_create(\"path/to/dictionary.aff\", \"path/to/dictionary.dic\");\\n    if (!pHunspell) {\\n        return 0;\\n    }\\n\\n    char** slst = nullptr;\\n\\n    int result = Hunspell_suggest(pHunspell, &slst, word.c_str());\\n\\n    if (slst) {\\n        for (int i = 0; i < result; ++i) {\\n            free(slst[i]);\\n        }\\n        free(slst);\\n    }\\n\\n    Hunspell_destroy(pHunspell);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-hunspell-hunspell_suggest",
        "sample": "04",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.39",
        "coverage_diff": "0.005680119581464873",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"hunspell.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider provider(data, size);\\n\\n    std::string word = provider.ConsumeRandomLengthString();\\n\\n    Hunhandle* pHunspell = Hunspell_create(\"path/to/dictionary.aff\", \"path/to/dictionary.dic\");\\n    if (!pHunspell) {\\n        return 0;\\n    }\\n\\n    char** slst = nullptr;\\n\\n    int result = Hunspell_suggest(pHunspell, &slst, word.c_str());\\n\\n    if (slst) {\\n        for (int i = 0; i < result; ++i) {\\n            free(slst[i]);\\n        }\\n        free(slst);\\n    }\\n\\n    Hunspell_destroy(pHunspell);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-hunspell-hunspell_suggest",
        "sample": "05",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "7.49",
        "coverage_diff": "0.005680119581464873",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"hunspell.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider provider(data, size);\\n\\n    std::string word = provider.ConsumeRandomLengthString();\\n\\n    Hunhandle* pHunspell = Hunspell_create(\"path/to/dictionary.aff\", \"path/to/dictionary.dic\");\\n    if (!pHunspell) {\\n        return 0;\\n    }\\n\\n    char** slst = nullptr;\\n\\n    int result = Hunspell_suggest(pHunspell, &slst, word.c_str());\\n\\n    if (slst) {\\n        for (int i = 0; i < result; ++i) {\\n            free(slst[i]);\\n        }\\n        free(slst);\\n    }\\n\\n    Hunspell_destroy(pHunspell);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}