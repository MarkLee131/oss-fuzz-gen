{
    "samples": [

    {
        "benchmark": "output-eigen-_zn5eigen6matrixidlin1elin1eli0elin1elin1eed2ev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "10.75",
        "coverage_diff": "0.04426078971533517",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <Eigen/Core>\\n#include <Eigen/Dense>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <iostream>\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(int)) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    int rows = dataProvider.ConsumeIntegralInRange<int>(1, 100);\\n    int cols = dataProvider.ConsumeIntegralInRange<int>(1, 100);\\n\\n    Eigen::Matrix<int, Eigen::Dynamic, Eigen::Dynamic> *intMatrix = new Eigen::Matrix<int, Eigen::Dynamic, Eigen::Dynamic>(rows, cols);\\n\\n    for (int i = 0; i < rows; ++i) {\\n        for (int j = 0; j < cols; ++j) {\\n            (*intMatrix)(i, j) = dataProvider.ConsumeIntegral<int>();\\n        }\\n    }\\n\\n    Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> *doubleMatrix = new Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(rows, cols);\\n\\n    for (int i = 0; i < rows; ++i) {\\n        for (int j = 0; j < cols; ++j) {\\n            (*doubleMatrix)(i, j) = dataProvider.ConsumeFloatingPoint<double>();\\n        }\\n    }\\n\\n    // Perform some operations on matrices to maximize fuzzing result\\n    Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> resultMatrix = (*doubleMatrix) * intMatrix->template cast<double>();\\n\\n    // Clean up\\n    delete intMatrix;\\n    delete doubleMatrix;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-eigen-_zn5eigen6matrixidlin1elin1eli0elin1elin1eed2ev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "52.04",
        "coverage_diff": "0.0005509641873278236",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <Eigen/Core>\\n#include <Eigen/Dense>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <iostream>\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(int)) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    int rows = dataProvider.ConsumeIntegralInRange<int>(1, 100);\\n    int cols = dataProvider.ConsumeIntegralInRange<int>(1, 100);\\n\\n    Eigen::Matrix<int, Eigen::Dynamic, Eigen::Dynamic> *intMatrix = new Eigen::Matrix<int, Eigen::Dynamic, Eigen::Dynamic>(rows, cols);\\n\\n    for (int i = 0; i < rows; ++i) {\\n        for (int j = 0; j < cols; ++j) {\\n            (*intMatrix)(i, j) = dataProvider.ConsumeIntegral<int>();\\n        }\\n    }\\n\\n    Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> *doubleMatrix = new Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(rows, cols);\\n\\n    for (int i = 0; i < rows; ++i) {\\n        for (int j = 0; j < cols; ++j) {\\n            (*doubleMatrix)(i, j) = dataProvider.ConsumeFloatingPoint<double>();\\n        }\\n    }\\n\\n    // Correctly delete the matrices without calling the destructor directly\\n    delete intMatrix;\\n    delete doubleMatrix;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-eigen-_zn5eigen6matrixidlin1elin1eli0elin1elin1eed2ev",
        "sample": "03",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "52.04",
        "coverage_diff": "0.0005509641873278236",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <Eigen/Core>\\n#include <Eigen/Dense>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <iostream>\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(int)) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    int rows = dataProvider.ConsumeIntegralInRange<int>(1, 100);\\n    int cols = dataProvider.ConsumeIntegralInRange<int>(1, 100);\\n\\n    Eigen::Matrix<int, Eigen::Dynamic, Eigen::Dynamic> *intMatrix = new Eigen::Matrix<int, Eigen::Dynamic, Eigen::Dynamic>(rows, cols);\\n\\n    for (int i = 0; i < rows; ++i) {\\n        for (int j = 0; j < cols; ++j) {\\n            (*intMatrix)(i, j) = dataProvider.ConsumeIntegral<int>();\\n        }\\n    }\\n\\n    Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> *doubleMatrix = new Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(rows, cols);\\n\\n    for (int i = 0; i < rows; ++i) {\\n        for (int j = 0; j < cols; ++j) {\\n            (*doubleMatrix)(i, j) = dataProvider.ConsumeFloatingPoint<double>();\\n        }\\n    }\\n\\n    // Corrected the destructor call\\n    // doubleMatrix->~Matrix(intMatrix); // Incorrect\\n\\n    delete intMatrix;\\n    delete doubleMatrix;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-eigen-_zn5eigen6matrixidlin1elin1eli0elin1elin1eed2ev",
        "sample": "04",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "14.12",
        "coverage_diff": "0.05528007346189164",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <Eigen/Core>\\n#include <Eigen/Dense>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <iostream>\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(int)) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    int rows = dataProvider.ConsumeIntegralInRange<int>(1, 100);\\n    int cols = dataProvider.ConsumeIntegralInRange<int>(1, 100);\\n\\n    Eigen::Matrix<int, Eigen::Dynamic, Eigen::Dynamic> intMatrix(rows, cols);\\n\\n    for (int i = 0; i < rows; ++i) {\\n        for (int j = 0; j < cols; ++j) {\\n            intMatrix(i, j) = dataProvider.ConsumeIntegral<int>();\\n        }\\n    }\\n\\n    Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> doubleMatrix(rows, cols);\\n\\n    for (int i = 0; i < rows; ++i) {\\n        for (int j = 0; j < cols; ++j) {\\n            doubleMatrix(i, j) = dataProvider.ConsumeFloatingPoint<double>();\\n        }\\n    }\\n\\n    // Perform some operations on the matrices to utilize them\\n    Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> result = doubleMatrix * intMatrix.cast<double>();\\n\\n    // Print the result matrix (optional, for debugging purposes)\\n    std::cout << result << std::endl;\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-eigen-_zn5eigen6matrixidlin1elin1eli0elin1elin1eed2ev",
        "sample": "05",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "52.04",
        "coverage_diff": "0.0005509641873278236",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <Eigen/Core>\\n#include <Eigen/Dense>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <iostream>\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size < sizeof(int)) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    int rows = dataProvider.ConsumeIntegralInRange<int>(1, 100);\\n    int cols = dataProvider.ConsumeIntegralInRange<int>(1, 100);\\n\\n    Eigen::Matrix<int, Eigen::Dynamic, Eigen::Dynamic> *intMatrix = new Eigen::Matrix<int, Eigen::Dynamic, Eigen::Dynamic>(rows, cols);\\n\\n    for (int i = 0; i < rows; ++i) {\\n        for (int j = 0; j < cols; ++j) {\\n            (*intMatrix)(i, j) = dataProvider.ConsumeIntegral<int>();\\n        }\\n    }\\n\\n    Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> *doubleMatrix = new Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(rows, cols);\\n\\n    for (int i = 0; i < rows; ++i) {\\n        for (int j = 0; j < cols; ++j) {\\n            (*doubleMatrix)(i, j) = dataProvider.ConsumeFloatingPoint<double>();\\n        }\\n    }\\n\\n    // Remove the incorrect destructor call\\n    // doubleMatrix->~Matrix(intMatrix);\\n\\n    delete intMatrix;\\n    delete doubleMatrix;\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}