{
    "samples": [

    {
        "benchmark": "output-hiredis-rediscommand",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"hiredis/hiredis.h\"\\n#include \"hiredis/async.h\"\\n#include \"hiredis/read.h\"\\n#include \"hiredis/sds.h\"\\n#include \"hiredis/alloc.h\"\\n#include \"hiredis/dict.h\"\\n#include \"hiredis/async_private.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    redisContext *context = redisConnect(\"127.0.0.1\", 6379);\\n    if (context == NULL || context->err) {\\n        if (context) {\\n            redisFree(context);\\n        }\\n        return 0;\\n    }\\n\\n    std::string format = fuzzed_data.ConsumeRandomLengthString(size);\\n\\n    if (format.empty()) {\\n        redisFree(context);\\n        return 0;\\n    }\\n\\n    void *reply = redisCommand(context, format.c_str());\\n\\n    if (reply != NULL) {\\n        freeReplyObject(reply);\\n    }\\n    redisFree(context);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-hiredis-rediscommand",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include <hiredis/hiredis.h>\\n#include <hiredis/async.h>\\n#include <hiredis/read.h>\\n#include <hiredis/sds.h>\\n#include <hiredis/alloc.h>\\n#include <hiredis/dict.h>\\n#include <hiredis/async_private.h>\\n}\\n\\n// Initialize the fuzzer\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\n// Fuzzing entry point\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    // Connect to Redis server\\n    redisContext *context = redisConnect(\"127.0.0.1\", 6379);\\n    if (context == NULL || context->err) {\\n        if (context) {\\n            redisFree(context);\\n        }\\n        return 0;\\n    }\\n\\n    // Generate a random command string\\n    std::string format = fuzzed_data.ConsumeRandomLengthString(size);\\n\\n    // Execute the command\\n    void *reply = redisCommand(context, format.c_str());\\n\\n    // Free the reply object if it is not NULL\\n    if (reply != NULL) {\\n        freeReplyObject(reply);\\n    }\\n\\n    // Free the Redis context\\n    redisFree(context);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-hiredis-rediscommand",
        "sample": "03",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"hiredis/hiredis.h\"\\n#include \"hiredis/async.h\"\\n#include \"hiredis/read.h\"\\n#include \"hiredis/sds.h\"\\n#include \"hiredis/alloc.h\"\\n#include \"hiredis/dict.h\"\\n#include \"hiredis/async_private.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size == 0) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    redisContext *context = redisConnect(\"127.0.0.1\", 6379);\\n    if (context == NULL || context->err) {\\n        if (context) {\\n            redisFree(context);\\n        }\\n        return 0;\\n    }\\n\\n    std::string format = fuzzed_data.ConsumeRandomLengthString(size);\\n\\n    void *reply = redisCommand(context, format.c_str());\\n\\n    if (reply != NULL) {\\n        freeReplyObject(reply);\\n    }\\n    redisFree(context);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-hiredis-rediscommand",
        "sample": "04",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"hiredis/hiredis.h\"\\n#include \"hiredis/async.h\"\\n#include \"hiredis/read.h\"\\n#include \"hiredis/sds.h\"\\n#include \"hiredis/alloc.h\"\\n#include \"hiredis/dict.h\"\\n#include \"hiredis/async_private.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    redisContext *context = redisConnect(\"127.0.0.1\", 6379);\\n    if (context == NULL || context->err) {\\n        if (context) {\\n            redisFree(context);\\n        }\\n        return 0;\\n    }\\n\\n    std::string format = fuzzed_data.ConsumeRandomLengthString(size);\\n\\n    if (format.empty()) {\\n        redisFree(context);\\n        return 0;\\n    }\\n\\n    void *reply = redisCommand(context, format.c_str());\\n\\n    if (reply != NULL) {\\n        freeReplyObject(reply);\\n    }\\n    redisFree(context);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-hiredis-rediscommand",
        "sample": "05",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n#include \"hiredis/hiredis.h\"\\n#include \"hiredis/async.h\"\\n#include \"hiredis/read.h\"\\n#include \"hiredis/sds.h\"\\n#include \"hiredis/alloc.h\"\\n#include \"hiredis/dict.h\"\\n#include \"hiredis/async_private.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (data == nullptr || size == 0) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider fuzzed_data(data, size);\\n\\n    redisContext *context = redisConnect(\"127.0.0.1\", 6379);\\n    if (context == NULL || context->err) {\\n        if (context) {\\n            redisFree(context);\\n        }\\n        return 0;\\n    }\\n\\n    std::string format = fuzzed_data.ConsumeRandomLengthString(size);\\n\\n    void *reply = redisCommand(context, format.c_str());\\n\\n    if (reply != NULL) {\\n        freeReplyObject(reply);\\n    }\\n    redisFree(context);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}