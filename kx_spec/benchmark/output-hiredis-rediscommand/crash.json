{
    "samples": [

    {
        "benchmark": "output-hiredis-rediscommand",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n#include \"../src/hiredis/hiredis.h\"\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size == 0) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    redisContext *context = redisConnect(\"127.0.0.1\", 6379);\\n    if (context == nullptr || context->err) {\\n        if (context) {\\n            redisFree(context);\\n        }\\n        return 0;\\n    }\\n\\n    std::string format = dataProvider.ConsumeRandomLengthString(size);\\n\\n    if (!format.empty()) {\\n        void *reply = redisCommand(context, format.c_str());\\n\\n        if (reply != nullptr) {\\n            freeReplyObject(reply);\\n        }\\n    }\\n\\n    redisFree(context);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-hiredis-rediscommand",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n#include <vector>\\n#include <cstdint>\\n#include <cstddef>\\n#include <cstdlib>\\n#include <cstring>\\n#include <iostream>\\n#include <sstream>\\n#include <algorithm>\\n#include <iterator>\\n#include <cctype>\\n\\nextern \"C\" {\\n    #include \"../src/hiredis/hiredis.h\"\\n}\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size == 0) {\\n        return 0;\\n    }\\n\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    redisContext *context = redisConnect(\"127.0.0.1\", 6379);\\n    if (context == nullptr || context->err) {\\n        if (context) {\\n            redisFree(context);\\n        }\\n        return 0;\\n    }\\n\\n    std::string format = dataProvider.ConsumeRandomLengthString(size);\\n\\n    void *reply = redisCommand(context, format.c_str());\\n\\n    if (reply != nullptr) {\\n        freeReplyObject(reply);\\n    }\\n\\n    redisFree(context);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}