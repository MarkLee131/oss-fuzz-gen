{
    "samples": [

    {
        "benchmark": "output-tinyxml2-_znk8tinyxml210xmlelement12shallowcloneepns_11xmldocumente",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstring>\\n#include <string>\\n#include \"tinyxml2.h\"\\n\\nextern \"C\" int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n    return 0;\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider dataProvider(data, size);\\n\\n    tinyxml2::XMLDocument doc;\\n    tinyxml2::XMLElement* element = doc.NewElement(\"test\");\\n\\n    // Feed some data to the element to maximize fuzzing result\\n    std::string elementText = dataProvider.ConsumeRandomLengthString(size);\\n    element->SetText(elementText.c_str());\\n\\n    tinyxml2::XMLNode* clonedElement = element->ShallowClone(&doc);\\n\\n    if (clonedElement) {\\n        delete clonedElement;\\n    }\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-tinyxml2-_znk8tinyxml210xmlelement12shallowcloneepns_11xmldocumente",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <tinyxml2.h>\\n#include <cstring>\\n\\n// Ensure that the C++ compiler does not mangle the names of the functions\\nextern \"C\" {\\n    int LLVMFuzzerInitialize(int *argc, char ***argv) {\\n        return 0;\\n    }\\n\\n    int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n        if (size == 0) {\\n            return 0;\\n        }\\n\\n        FuzzedDataProvider dataProvider(data, size);\\n\\n        tinyxml2::XMLDocument doc;\\n        tinyxml2::XMLError eResult = doc.Parse(reinterpret_cast<const char*>(data), size);\\n        if (eResult != tinyxml2::XML_SUCCESS) {\\n            return 0;\\n        }\\n\\n        tinyxml2::XMLElement* element = doc.NewElement(\"test\");\\n\\n        tinyxml2::XMLNode* clonedElement = element->ShallowClone(&doc);\\n\\n        if (clonedElement) {\\n            delete clonedElement;\\n        }\\n\\n        return 0;\\n    }\\n}",
        "model": ""
    }

    ]
}