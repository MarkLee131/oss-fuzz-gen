<!doctype html>

<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Experiment results</title>
<style>
* {
    box-sizing: border-box;
}

html {
    line-height: 1.15;
}

body {
    font-family: sans-serif;
    font-size: 16px;
}

table {
    border-collapse: collapse;
    border-spacing: 0;
}

td, th {
    border-right: 1px #dedede solid;
    border-bottom: 1px #dedede solid;
    padding: 5px;
    text-align: left;
}
td:first-child, th:first-child {
    border-left: 1px #dedede solid;
}
th {
    border-top: 1px #dedede solid;
}

tbody tr:nth-child(odd) {
    background-color: #f4f5ff;
}
</style>
<body>
    LLM:

<h1>output-fribidi-fribidi_log2vis / 02</h1>
Bug: False
<br>
Crash reason: NO_SEMANTIC_ERR
<br>
<br>




<h3>Final code</h3>

<pre>
#include &lt;fuzzer/FuzzedDataProvider.h&gt;
#include &lt;fribidi.h&gt;
#include &lt;vector&gt;
#include &lt;stdexcept&gt;

extern &#34;C&#34; int LLVMFuzzerInitialize(int *argc, char ***argv) {
    return 0;
}

extern &#34;C&#34; int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
    if (size &lt; sizeof(FriBidiStrIndex)) {
        return 0;
    }

    FuzzedDataProvider dataProvider(data, size);
    FriBidiStrIndex len = dataProvider.ConsumeIntegral&lt;FriBidiStrIndex&gt;();

    if (len == 0 || len &gt; size / sizeof(FriBidiChar)) {
        return 0;
    }

    std::vector&lt;uint8_t&gt; str_bytes = dataProvider.ConsumeBytes&lt;uint8_t&gt;(len * sizeof(FriBidiChar));
    if (str_bytes.size() &lt; len * sizeof(FriBidiChar)) {
        return 0;
    }
    const FriBidiChar *str = reinterpret_cast&lt;const FriBidiChar *&gt;(str_bytes.data());

    FriBidiParType pbase_dir = dataProvider.ConsumeIntegral&lt;FriBidiParType&gt;();
    std::vector&lt;FriBidiChar&gt; visual_str(len);
    std::vector&lt;FriBidiStrIndex&gt; positions_L_to_V(len);
    std::vector&lt;FriBidiStrIndex&gt; positions_V_to_L(len);
    std::vector&lt;FriBidiLevel&gt; embedding_levels(len);

    if (!fribidi_log2vis(str, len, &amp;pbase_dir, visual_str.data(), positions_L_to_V.data(), positions_V_to_L.data(), embedding_levels.data())) {
        throw std::runtime_error(&#34;fribidi_log2vis failed&#34;);
    }

    return 0;
}
</pre>


<h3>Fixer prompt #1</h3>
<pre>

Given the following C++ fuzz harness and its build error message, fix the code to make it build for fuzzing.

If there is undeclared identifier or unknown type name error, fix it by finding and including the related libraries.

Note that some code may need to be wrapped with &lt;code&gt;extern &#34;C&#34;&lt;/code&gt; as their source is C program.

MUST RETURN THE FULL CODE, INCLUDING UNCHANGED PARTS.
EXTREMELY IMPORTANT: AVOID USING &lt;code&gt;goto&lt;/code&gt;. If you have to write code using &lt;code&gt;goto&lt;/code&gt;, you MUST MUST also declare all variables BEFORE the &lt;code&gt;goto&lt;/code&gt;. Never introduce new variables after the &lt;code&gt;goto&lt;/code&gt;.

Below is the code needs to be built:
&lt;code&gt;
#include &lt;fuzzer/FuzzedDataProvider.h&gt;
#include &lt;fribidi.h&gt;

extern &#34;C&#34; int LLVMFuzzerInitialize(int *argc, char ***argv) {
    return 0;
}

extern &#34;C&#34; int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
    if (size &lt; sizeof(FriBidiChar) + sizeof(FriBidiStrIndex)) {
        return 0;
    }

    FuzzedDataProvider dataProvider(data, size);
    FriBidiStrIndex len = dataProvider.ConsumeIntegral&lt;FriBidiStrIndex&gt;();
    const FriBidiChar *str = reinterpret_cast&lt;const FriBidiChar *&gt;(dataProvider.ConsumeBytes&lt;uint8_t&gt;(len * sizeof(FriBidiChar)).data());

    FriBidiParType pbase_dir = dataProvider.ConsumeIntegral&lt;FriBidiParType&gt;();
    FriBidiChar *visual_str = new FriBidiChar[len];
    FriBidiStrIndex *positions_L_to_V = new FriBidiStrIndex[len];
    FriBidiStrIndex *positions_V_to_L = new FriBidiStrIndex[len];
    FriBidiLevel *embedding_levels = new FriBidiLevel[len];

    fribidi_log2vis(str, len, &amp;pbase_dir, visual_str, positions_L_to_V, positions_V_to_L, embedding_levels);

    delete[] visual_str;
    delete[] positions_L_to_V;
    delete[] positions_V_to_L;
    delete[] embedding_levels;

    return 0;
}
&lt;/code&gt;

The code can build successfully but has a runtime issue: Fuzzing crashed immediately at runtime (ASAN-ERROR: AddressSanitizer: ABRT on unknown address 0x00000000000d (pc 0x7fb26163d00b bp 0x7fb261b2e1a2 sp 0x7ffd3d6542b0 T0)), indicating fuzz target code for invoking the function under test is incorrect or unrobust.
&lt;error&gt;
Crash stacks:
Stack 0:
#0 0x7fb26163d00b in raise (/lib/x86_64-linux-gnu/libc.so.6+0x4300b) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)
#1 0x7fb26161c858 in abort (/lib/x86_64-linux-gnu/libc.so.6+0x22858) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)
#2 0x7fb261a458d0  (/lib/x86_64-linux-gnu/libstdc++.so.6+0x9e8d0) (BuildId: fcd5414020056f1d95855868e00f3a7d479630fd)
#3 0x7fb261a5137b  (/lib/x86_64-linux-gnu/libstdc++.so.6+0xaa37b) (BuildId: fcd5414020056f1d95855868e00f3a7d479630fd)
#4 0x7fb261a513e6 in std::terminate() (/lib/x86_64-linux-gnu/libstdc++.so.6+0xaa3e6) (BuildId: fcd5414020056f1d95855868e00f3a7d479630fd)
#5 0x7fb261a51698 in __cxa_throw (/lib/x86_64-linux-gnu/libstdc++.so.6+0xaa698) (BuildId: fcd5414020056f1d95855868e00f3a7d479630fd)
#6 0x7fb261a454e1  (/lib/x86_64-linux-gnu/libstdc++.so.6+0x9e4e1) (BuildId: fcd5414020056f1d95855868e00f3a7d479630fd)
#7 0x5588e0498c21 in LLVMFuzzerTestOneInput /work/build/../../src/fribidi/bin/fribidi-fuzzer.cpp:18:31
#8 0x5588e034d520 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
#9 0x5588e034cd45 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:516:7
#10 0x5588e034ecd2 in fuzzer::Fuzzer::ReadAndExecuteSeedCorpora(std::__Fuzzer::vector&lt;fuzzer::SizedFile, std::__Fuzzer::allocator&lt;fuzzer::SizedFile&gt;&gt;&amp;) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:829:7
#11 0x5588e034f007 in fuzzer::Fuzzer::Loop(std::__Fuzzer::vector&lt;fuzzer::SizedFile, std::__Fuzzer::allocator&lt;fuzzer::SizedFile&gt;&gt;&amp;) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:867:3
#12 0x5588e033d616 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:914:6
#13 0x5588e0369b42 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
#14 0x7fb26161e082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)
#15 0x5588e032e78d in _start (/out/fribidi-fuzzer+0x4478d)
&lt;/error&gt;

Fix code:
1. Consider possible solutions for the issues listed above.
2. Choose a solution that can maximize fuzzing result, which is utilizing the function under test and feeding it not null input.
3. Apply the solutions to the original code.
It&#39;s important to show the complete code, not only the fixed line.
&lt;solution&gt;
</pre>



<h3>Code #1</h3>

<pre>
Here&#39;s the complete fixed code:

```cpp
#include &lt;fuzzer/FuzzedDataProvider.h&gt;
#include &lt;fribidi.h&gt;
#include &lt;vector&gt;
#include &lt;stdexcept&gt;

extern &#34;C&#34; int LLVMFuzzerInitialize(int *argc, char ***argv) {
    return 0;
}

extern &#34;C&#34; int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
    if (size &lt; sizeof(FriBidiStrIndex)) {
        return 0;
    }

    FuzzedDataProvider dataProvider(data, size);
    FriBidiStrIndex len = dataProvider.ConsumeIntegral&lt;FriBidiStrIndex&gt;();

    if (len == 0 || len &gt; size / sizeof(FriBidiChar)) {
        return 0;
    }

    std::vector&lt;uint8_t&gt; str_bytes = dataProvider.ConsumeBytes&lt;uint8_t&gt;(len * sizeof(FriBidiChar));
    if (str_bytes.size() &lt; len * sizeof(FriBidiChar)) {
        return 0;
    }
    const FriBidiChar *str = reinterpret_cast&lt;const FriBidiChar *&gt;(str_bytes.data());

    FriBidiParType pbase_dir = dataProvider.ConsumeIntegral&lt;FriBidiParType&gt;();
    std::vector&lt;FriBidiChar&gt; visual_str(len);
    std::vector&lt;FriBidiStrIndex&gt; positions_L_to_V(len);
    std::vector&lt;FriBidiStrIndex&gt; positions_V_to_L(len);
    std::vector&lt;FriBidiLevel&gt; embedding_levels(len);

    if (!fribidi_log2vis(str, len, &amp;pbase_dir, visual_str.data(), positions_L_to_V.data(), positions_V_to_L.data(), embedding_levels.data())) {
        throw std::runtime_error(&#34;fribidi_log2vis failed&#34;);
    }

    return 0;
}
```

**Explanation of Fixes:**

1. **Validation of `len`:** Ensure `len` is a valid value before proceeding. Specifically, check if `len` is zero or if it exceeds the available data size divided by the size of `FriBidiChar`.

2. **Use of `std::vector`:** Replace raw pointers and manual memory management with `std::vector` to manage memory automatically and avoid potential memory issues.

3. **Check Consumed Bytes:** Ensure that the consumed bytes for `str` are sufficient for the given `len`.

4. **Error Handling:** Add error handling for the `fribidi_log2vis` function to ensure it doesn&#39;t silently fail. If it fails, throw an exception to indicate the error.

These changes ensure the fuzzing target is robust and handles edge cases correctly, preventing crashes due to invalid input sizes or memory issues.
</pre>


<h2>Logs</h2>
<pre>
Fixing /home/kaixuan/FDG_LLM/oss-fuzz-gen/results/output-fribidi-fribidi_log2vis/fixed_targets/02.c with gpt-4o, attempt 1.
Successfully built /home/kaixuan/FDG_LLM/oss-fuzz-gen/results/output-fribidi-fribidi_log2vis/fixed_targets/02.c with gpt-4o in 1 iterations of fixing.
Result for fribidi-fribidi_log2vis-02: crashes=False, coverage=0.4569757727652464 (547/1197), coverage diff=0.14472049689440994 (233/1610)

</pre>

<h2>Run logs</h2>
<pre>
INFO:__main__:Running: docker run --rm --privileged --shm-size=2g --platform linux/amd64 -e FUZZING_ENGINE=libfuzzer -e SANITIZER=address -e RUN_FUZZER_MODE=interactive -e HELPER=True -v /home/kaixuan/FDG_LLM/oss-fuzz-gen/results/output-fribidi-fribidi_log2vis/corpora/02.c:/tmp/fribidi-fuzzer_corpus -v /tmp/tmp9gg1c8dt/build/out/fribidi-fribidi_log2vis-02:/out -t gcr.io/oss-fuzz-base/base-runner run_fuzzer fribidi-fuzzer -print_final_stats=1 -max_total_time=30 -len_control=0 -timeout=30.
vm.mmap_rnd_bits = 28
rm: cannot remove &#39;/tmp/fribidi-fuzzer_corpus&#39;: Device or resource busy
Using seed corpus: fribidi-fuzzer_seed_corpus.zip
/out/fribidi-fuzzer -rss_limit_mb=2560 -timeout=25 -print_final_stats=1 -max_total_time=30 -len_control=0 -timeout=30 /tmp/fribidi-fuzzer_corpus &lt; /dev/null
INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 336674008
INFO: Loaded 1 modules   (1197 inline 8-bit counters): 1197 [0x555d1337aba0, 0x555d1337b04d),
INFO: Loaded 1 PC tables (1197 PCs): 1197 [0x555d1337b050,0x555d1337fb20),
INFO:       14 files found in /tmp/fribidi-fuzzer_corpus
INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes
INFO: seed corpus: files: 14 min: 38b max: 2362b total: 12804b rss: 30Mb
#15	INITED cov: 5 ft: 5 corp: 1/38b exec/s: 0 rss: 31Mb
#16	REDUCE cov: 5 ft: 5 corp: 1/33b lim: 4096 exec/s: 0 rss: 31Mb L: 33/33 MS: 1 EraseBytes-
#18	REDUCE cov: 5 ft: 5 corp: 1/20b lim: 4096 exec/s: 0 rss: 31Mb L: 20/20 MS: 2 ChangeBinInt-EraseBytes-
#44	REDUCE cov: 5 ft: 5 corp: 1/11b lim: 4096 exec/s: 0 rss: 32Mb L: 11/11 MS: 1 EraseBytes-
#51	REDUCE cov: 5 ft: 5 corp: 1/10b lim: 4096 exec/s: 0 rss: 32Mb L: 10/10 MS: 2 ChangeBit-EraseBytes-
#59	REDUCE cov: 5 ft: 5 corp: 1/5b lim: 4096 exec/s: 0 rss: 32Mb L: 5/5 MS: 3 ShuffleBytes-CopyPart-EraseBytes-
#86	REDUCE cov: 6 ft: 6 corp: 2/8b lim: 4096 exec/s: 0 rss: 32Mb L: 3/5 MS: 2 ChangeBinInt-EraseBytes-
#91	REDUCE cov: 6 ft: 6 corp: 2/7b lim: 4096 exec/s: 0 rss: 32Mb L: 4/4 MS: 5 EraseBytes-ChangeBit-CopyPart-ShuffleBytes-InsertByte-
#93	REDUCE cov: 6 ft: 6 corp: 2/6b lim: 4096 exec/s: 0 rss: 32Mb L: 2/4 MS: 2 ShuffleBytes-EraseBytes-
#95	REDUCE cov: 6 ft: 6 corp: 2/5b lim: 4096 exec/s: 0 rss: 32Mb L: 1/4 MS: 2 ShuffleBytes-EraseBytes-
#842	REDUCE cov: 7 ft: 7 corp: 3/9b lim: 4096 exec/s: 0 rss: 32Mb L: 4/4 MS: 2 ChangeBit-CMP- DE: &#34;\000\000\000\200&#34;-
	NEW_FUNC[1/1]: 0x555d132e7fc0 in std::__1::vector&lt;unsigned char, std::__1::allocator&lt;unsigned char&gt;&gt;::vector(unsigned long) /usr/local/bin/../include/c++/v1/vector:1191
#861	NEW    cov: 13 ft: 14 corp: 4/13b lim: 4096 exec/s: 0 rss: 32Mb L: 4/4 MS: 4 PersAutoDict-ShuffleBytes-ShuffleBytes-ChangeBinInt- DE: &#34;\000\000\000\200&#34;-
	NEW_FUNC[1/2]: 0x555d132e82b0 in std::__1::vector&lt;unsigned char, std::__1::allocator&lt;unsigned char&gt;&gt;::shrink_to_fit() /usr/local/bin/../include/c++/v1/vector:1590
	NEW_FUNC[2/2]: 0x555d132e8740 in std::__1::vector&lt;unsigned char, std::__1::allocator&lt;unsigned char&gt;&gt;::__construct_at_end(unsigned long) /usr/local/bin/../include/c++/v1/vector:1113
#902	NEW    cov: 24 ft: 26 corp: 5/20b lim: 4096 exec/s: 0 rss: 32Mb L: 7/7 MS: 1 CopyPart-
	NEW_FUNC[1/26]: 0x555d132e7350 in std::__1::vector&lt;unsigned int, std::__1::allocator&lt;unsigned int&gt;&gt;::vector(unsigned long) /usr/local/bin/../include/c++/v1/vector:1191
	NEW_FUNC[2/26]: 0x555d132e7650 in std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::vector(unsigned long) /usr/local/bin/../include/c++/v1/vector:1191
#914	NEW    cov: 261 ft: 264 corp: 6/34b lim: 4096 exec/s: 0 rss: 32Mb L: 14/14 MS: 2 CrossOver-CrossOver-
#950	NEW    cov: 261 ft: 265 corp: 7/42b lim: 4096 exec/s: 0 rss: 32Mb L: 8/14 MS: 1 InsertByte-
#991	NEW    cov: 270 ft: 274 corp: 8/154b lim: 4096 exec/s: 0 rss: 32Mb L: 112/112 MS: 1 InsertRepeatedBytes-
#1037	NEW    cov: 272 ft: 276 corp: 9/166b lim: 4096 exec/s: 0 rss: 33Mb L: 12/112 MS: 1 CrossOver-
#1054	REDUCE cov: 272 ft: 276 corp: 9/157b lim: 4096 exec/s: 0 rss: 33Mb L: 103/103 MS: 2 InsertByte-EraseBytes-
#1177	NEW    cov: 272 ft: 277 corp: 10/168b lim: 4096 exec/s: 0 rss: 33Mb L: 11/103 MS: 3 ShuffleBytes-ChangeBit-PersAutoDict- DE: &#34;\000\000\000\200&#34;-
#1226	NEW    cov: 272 ft: 279 corp: 11/177b lim: 4096 exec/s: 0 rss: 33Mb L: 9/103 MS: 4 CMP-ShuffleBytes-ChangeBit-InsertByte- DE: &#34;\377\377\177\000&#34;-
#1298	NEW    cov: 304 ft: 324 corp: 12/244b lim: 4096 exec/s: 0 rss: 33Mb L: 67/103 MS: 2 InsertRepeatedBytes-CMP- DE: &#34;\000\000\001\023&#34;-
#1331	REDUCE cov: 304 ft: 324 corp: 12/213b lim: 4096 exec/s: 0 rss: 33Mb L: 36/103 MS: 3 CrossOver-ChangeBit-EraseBytes-
#1388	REDUCE cov: 308 ft: 328 corp: 13/253b lim: 4096 exec/s: 0 rss: 33Mb L: 40/103 MS: 2 PersAutoDict-ChangeByte- DE: &#34;\377\377\177\000&#34;-
#1424	NEW    cov: 308 ft: 330 corp: 14/263b lim: 4096 exec/s: 0 rss: 33Mb L: 10/103 MS: 1 EraseBytes-
#1446	REDUCE cov: 308 ft: 330 corp: 14/252b lim: 4096 exec/s: 0 rss: 33Mb L: 25/103 MS: 2 ChangeBit-EraseBytes-
#1581	NEW    cov: 330 ft: 369 corp: 15/364b lim: 4096 exec/s: 0 rss: 33Mb L: 112/112 MS: 5 CopyPart-CrossOver-CrossOver-InsertByte-ChangeBinInt-
#1605	REDUCE cov: 330 ft: 369 corp: 15/326b lim: 4096 exec/s: 0 rss: 33Mb L: 74/103 MS: 4 CrossOver-PersAutoDict-ChangeBit-EraseBytes- DE: &#34;\000\000\000\200&#34;-
#1640	REDUCE cov: 333 ft: 376 corp: 16/342b lim: 4096 exec/s: 0 rss: 33Mb L: 16/103 MS: 5 InsertByte-PersAutoDict-ChangeBit-CopyPart-EraseBytes- DE: &#34;\377\377\177\000&#34;-
#1666	REDUCE cov: 333 ft: 376 corp: 16/337b lim: 4096 exec/s: 0 rss: 33Mb L: 20/103 MS: 1 EraseBytes-
#1711	NEW    cov: 334 ft: 377 corp: 17/360b lim: 4096 exec/s: 0 rss: 33Mb L: 23/103 MS: 5 CMP-ShuffleBytes-PersAutoDict-CopyPart-InsertByte- DE: &#34;\001\000\000\000\000\000\000\016&#34;-&#34;\377\377\177\000&#34;-
#1739	REDUCE cov: 334 ft: 377 corp: 17/359b lim: 4096 exec/s: 0 rss: 33Mb L: 13/103 MS: 3 ShuffleBytes-EraseBytes-CopyPart-
#1800	REDUCE cov: 334 ft: 377 corp: 17/358b lim: 4096 exec/s: 0 rss: 33Mb L: 22/103 MS: 1 EraseBytes-
#1807	REDUCE cov: 334 ft: 377 corp: 17/357b lim: 4096 exec/s: 0 rss: 33Mb L: 39/103 MS: 2 ShuffleBytes-EraseBytes-
#1824	REDUCE cov: 334 ft: 377 corp: 17/323b lim: 4096 exec/s: 0 rss: 33Mb L: 69/74 MS: 2 ChangeBit-EraseBytes-
	NEW_FUNC[1/1]: 0x555d132f20c0 in merge_with_prev /work/build/../../src/fribidi/lib/fribidi-bidi.c:74
#1830	REDUCE cov: 352 ft: 415 corp: 18/397b lim: 4096 exec/s: 0 rss: 33Mb L: 74/74 MS: 1 CMP- DE: &#34;\005\000\000\000\000\000\000\000&#34;-
#1857	REDUCE cov: 352 ft: 415 corp: 18/392b lim: 4096 exec/s: 0 rss: 33Mb L: 64/74 MS: 2 PersAutoDict-EraseBytes- DE: &#34;\000\000\000\200&#34;-
#1868	REDUCE cov: 353 ft: 416 corp: 19/411b lim: 4096 exec/s: 0 rss: 33Mb L: 19/74 MS: 1 EraseBytes-
#1899	REDUCE cov: 353 ft: 418 corp: 20/485b lim: 4096 exec/s: 0 rss: 33Mb L: 74/74 MS: 1 ShuffleBytes-
#1900	REDUCE cov: 353 ft: 418 corp: 20/471b lim: 4096 exec/s: 0 rss: 33Mb L: 50/74 MS: 1 EraseBytes-
#1906	NEW    cov: 357 ft: 456 corp: 21/617b lim: 4096 exec/s: 0 rss: 33Mb L: 146/146 MS: 1 InsertRepeatedBytes-
#1963	NEW    cov: 359 ft: 488 corp: 22/637b lim: 4096 exec/s: 0 rss: 33Mb L: 20/146 MS: 2 CMP-ChangeBinInt- DE: &#34;M\000\200\000&#34;-
#2006	REDUCE cov: 359 ft: 488 corp: 22/634b lim: 4096 exec/s: 0 rss: 34Mb L: 71/146 MS: 3 InsertRepeatedBytes-ChangeBit-EraseBytes-
#2013	REDUCE cov: 359 ft: 488 corp: 22/612b lim: 4096 exec/s: 0 rss: 34Mb L: 52/146 MS: 2 ShuffleBytes-EraseBytes-
#2024	NEW    cov: 360 ft: 491 corp: 23/632b lim: 4096 exec/s: 0 rss: 34Mb L: 20/146 MS: 1 ChangeBinInt-
#2080	NEW    cov: 361 ft: 492 corp: 24/641b lim: 4096 exec/s: 0 rss: 34Mb L: 9/146 MS: 1 CrossOver-
#2090	REDUCE cov: 361 ft: 492 corp: 24/639b lim: 4096 exec/s: 0 rss: 34Mb L: 48/146 MS: 5 InsertRepeatedBytes-EraseBytes-ChangeByte-EraseBytes-EraseBytes-
#2113	REDUCE cov: 361 ft: 492 corp: 24/621b lim: 4096 exec/s: 0 rss: 34Mb L: 21/146 MS: 3 InsertByte-ChangeBinInt-EraseBytes-
#2114	REDUCE cov: 361 ft: 492 corp: 24/617b lim: 4096 exec/s: 0 rss: 34Mb L: 17/146 MS: 1 EraseBytes-
#2164	NEW    cov: 390 ft: 567 corp: 25/716b lim: 4096 exec/s: 0 rss: 34Mb L: 99/146 MS: 5 InsertRepeatedBytes-EraseBytes-PersAutoDict-ChangeByte-InsertRepeatedBytes- DE: &#34;\000\000\001\023&#34;-
#2175	NEW    cov: 390 ft: 576 corp: 26/922b lim: 4096 exec/s: 0 rss: 34Mb L: 206/206 MS: 1 InsertRepeate
...truncated...
ec/s: 13078 rss: 62Mb L: 524/1452 MS: 1 EraseBytes-
#392386	REDUCE cov: 547 ft: 1975 corp: 414/141Kb lim: 4096 exec/s: 13079 rss: 62Mb L: 1336/1452 MS: 2 ShuffleBytes-EraseBytes-
#392389	REDUCE cov: 547 ft: 1975 corp: 414/141Kb lim: 4096 exec/s: 13079 rss: 62Mb L: 521/1452 MS: 3 InsertRepeatedBytes-InsertByte-EraseBytes-
#392910	REDUCE cov: 547 ft: 1975 corp: 414/141Kb lim: 4096 exec/s: 13097 rss: 62Mb L: 193/1452 MS: 1 EraseBytes-
#394804	REDUCE cov: 547 ft: 1975 corp: 414/141Kb lim: 4096 exec/s: 13160 rss: 62Mb L: 1078/1452 MS: 4 InsertByte-ChangeByte-PersAutoDict-EraseBytes- DE: &#34;\237\000\000\000\000\000\000\000&#34;-
#395542	REDUCE cov: 547 ft: 1975 corp: 414/141Kb lim: 4096 exec/s: 13184 rss: 62Mb L: 516/1452 MS: 3 ChangeBinInt-CMP-EraseBytes- DE: &#34;\376\377\017\000&#34;-
#395568	NEW    cov: 547 ft: 1978 corp: 415/142Kb lim: 4096 exec/s: 13185 rss: 62Mb L: 546/1452 MS: 1 CopyPart-
#395649	REDUCE cov: 547 ft: 1978 corp: 415/142Kb lim: 4096 exec/s: 13188 rss: 62Mb L: 88/1452 MS: 1 EraseBytes-
#396079	NEW    cov: 547 ft: 1979 corp: 416/142Kb lim: 4096 exec/s: 13202 rss: 62Mb L: 875/1452 MS: 5 ShuffleBytes-PersAutoDict-CrossOver-EraseBytes-CopyPart- DE: &#34;\001\000\000\000\000\000\000\007&#34;-
#396539	REDUCE cov: 547 ft: 1979 corp: 416/142Kb lim: 4096 exec/s: 13217 rss: 62Mb L: 525/1452 MS: 5 ChangeBit-PersAutoDict-InsertRepeatedBytes-CopyPart-EraseBytes- DE: &#34;\377\377\377\022&#34;-
#397708	REDUCE cov: 547 ft: 1980 corp: 417/143Kb lim: 4096 exec/s: 13256 rss: 62Mb L: 1140/1452 MS: 4 ChangeByte-EraseBytes-CMP-CopyPart- DE: &#34;,\000\000\000\000\000\000\000&#34;-
#397829	REDUCE cov: 547 ft: 1980 corp: 417/143Kb lim: 4096 exec/s: 13260 rss: 62Mb L: 520/1452 MS: 1 EraseBytes-
#397971	REDUCE cov: 547 ft: 1980 corp: 417/143Kb lim: 4096 exec/s: 13265 rss: 62Mb L: 518/1452 MS: 2 PersAutoDict-EraseBytes- DE: &#34;\306\000\000\000\000\000\000\000&#34;-
#399523	REDUCE cov: 547 ft: 1980 corp: 417/143Kb lim: 4096 exec/s: 13317 rss: 62Mb L: 255/1452 MS: 2 InsertByte-EraseBytes-
#399551	REDUCE cov: 547 ft: 1980 corp: 417/143Kb lim: 4096 exec/s: 13318 rss: 62Mb L: 136/1452 MS: 3 ChangeBinInt-ShuffleBytes-EraseBytes-
#399998	REDUCE cov: 547 ft: 1980 corp: 417/143Kb lim: 4096 exec/s: 13333 rss: 62Mb L: 1061/1452 MS: 2 ChangeASCIIInt-EraseBytes-
#401235	REDUCE cov: 547 ft: 1980 corp: 417/143Kb lim: 4096 exec/s: 13374 rss: 62Mb L: 83/1452 MS: 2 CrossOver-EraseBytes-
#401261	REDUCE cov: 547 ft: 1980 corp: 417/143Kb lim: 4096 exec/s: 13375 rss: 62Mb L: 167/1452 MS: 1 EraseBytes-
#401307	REDUCE cov: 547 ft: 1980 corp: 417/143Kb lim: 4096 exec/s: 13376 rss: 62Mb L: 518/1452 MS: 1 EraseBytes-
#401674	REDUCE cov: 547 ft: 1980 corp: 417/143Kb lim: 4096 exec/s: 13389 rss: 62Mb L: 542/1452 MS: 2 PersAutoDict-EraseBytes- DE: &#34;\000\000\000\000\000\000\000R&#34;-
#401834	DONE   cov: 547 ft: 1980 corp: 417/143Kb lim: 4096 exec/s: 12962 rss: 62Mb
###### Recommended dictionary. ######
&#34;\000\000\000\200&#34; # Uses: 540
&#34;\377\377\177\000&#34; # Uses: 482
&#34;\000\000\001\023&#34; # Uses: 486
&#34;\001\000\000\000\000\000\000\016&#34; # Uses: 486
&#34;\005\000\000\000\000\000\000\000&#34; # Uses: 451
&#34;M\000\200\000&#34; # Uses: 421
&#34;\001\000\000*&#34; # Uses: 479
&#34;\377\377\377\377\377\377\377\015&#34; # Uses: 461
&#34;\001\000\000\000\000\000\000w&#34; # Uses: 484
&#34;\000\000\000\000\000\000\000\007&#34; # Uses: 468
&#34;\377\377\377\005&#34; # Uses: 456
&#34;\001\000\000\000\000\000\000\023&#34; # Uses: 445
&#34;\000\000\000\010&#34; # Uses: 460
&#34;\006\000\000\000&#34; # Uses: 454
&#34;\003\000\000\000&#34; # Uses: 429
&#34;\377\377\377\000&#34; # Uses: 419
&#34;\000\002&#34; # Uses: 438
&#34;\035\000\000\000\000\000\000\000&#34; # Uses: 404
&#34;\000\000\000\000\000\000\000\010&#34; # Uses: 425
&#34;\225\000\000\000\000\000\000\000&#34; # Uses: 440
&#34;\000\011&#34; # Uses: 433
&#34;\017\000&#34; # Uses: 441
&#34;\000\000\020\000&#34; # Uses: 399
&#34;\014\000\000\000\000\000\000\000&#34; # Uses: 429
&#34;8\000\000\000\000\000\000\000&#34; # Uses: 392
&#34;\377\377&#34; # Uses: 396
&#34;\010\000\000\000&#34; # Uses: 368
&#34;\376\377\377\377&#34; # Uses: 390
&#34;!\000\010\000&#34; # Uses: 414
&#34;\012\000&#34; # Uses: 387
&#34;\377\377\377\377\377\377\377?&#34; # Uses: 373
&#34;\001\000\000\004&#34; # Uses: 347
&#34;\000\000\000\000\000\000\000~&#34; # Uses: 409
&#34;\306\000\000\000\000\000\000\000&#34; # Uses: 420
&#34;|\000&#34; # Uses: 377
&#34;\000\000\000\004&#34; # Uses: 355
&#34;\006\000&#34; # Uses: 359
&#34;\001\000\000\000\000\000\000\237&#34; # Uses: 337
&#34;\001\000\000\000\000\000\001W&#34; # Uses: 361
&#34;\001\000\000\022&#34; # Uses: 358
&#34;\020\000\000\000\000\000\000\000&#34; # Uses: 382
&#34;\377\001&#34; # Uses: 353
&#34;\000\017\377\377&#34; # Uses: 370
&#34;\013\000\000\000&#34; # Uses: 383
&#34;\005\000\000\000&#34; # Uses: 368
&#34;\001\013&#34; # Uses: 340
&#34;\377\002&#34; # Uses: 325
&#34;\000\000\000\000\000\000\000\005&#34; # Uses: 352
&#34;}\000\000\000\000\000\000\000&#34; # Uses: 350
&#34;\000\000\000\001&#34; # Uses: 323
&#34;\012\000\000\000\000\000\000\000&#34; # Uses: 317
&#34;\004\000\000\000&#34; # Uses: 339
&#34;\000\000\000\000\000\000\000 &#34; # Uses: 316
&#34;\377\377\377\022&#34; # Uses: 331
&#34;\000\000\000\000\000\000\000x&#34; # Uses: 309
&#34;\377\377\377\377\377\377\000-&#34; # Uses: 339
&#34;\377\377\377\002&#34; # Uses: 320
&#34;\237\000\000\000\000\000\000\000&#34; # Uses: 298
&#34;\003\000\000\000\000\000\000\000&#34; # Uses: 274
&#34;\000\000\000\000\000\000\000\020&#34; # Uses: 311
&#34;\000\000\000\000\000\000\000n&#34; # Uses: 320
&#34;\001\000&#34; # Uses: 284
&#34;\022\000\000\000&#34; # Uses: 291
&#34;\001\010\000 &#34; # Uses: 308
&#34;\354\001\000\000\000\000\000\000&#34; # Uses: 284
&#34;\001\000\000\005&#34; # Uses: 281
&#34;\001\000\000\000\000\000\000}&#34; # Uses: 300
&#34;-\000\000\000\000\000\000\000&#34; # Uses: 256
&#34;\001\000\000\000\000\000\000\014&#34; # Uses: 287
&#34;K\000\000\000\000\000\000\000&#34; # Uses: 286
&#34;\000\000\000\000\000\000\000\004&#34; # Uses: 267
&#34;\000\000&#34; # Uses: 248
&#34;\001\000\000\000\000\000\000\000&#34; # Uses: 257
&#34;\000\000\000\000\000\000\0009&#34; # Uses: 258
&#34;)\000\000\000\000\000\000\000&#34; # Uses: 290
&#34;#\000\000\000\000\000\000\000&#34; # Uses: 253
&#34;\331\000\000\000\000\000\000\000&#34; # Uses: 282
&#34;T\002\000\000\000\000\000\000&#34; # Uses: 254
&#34;\025\000\000\000\000\000\000\000&#34; # Uses: 241
&#34;\377\377\377\377\377\377\377i&#34; # Uses: 255
&#34;@\006\000\000&#34; # Uses: 271
&#34;\000\000\000\000\000\000\000\003&#34; # Uses: 234
&#34;L\000\000\000\000\000\000\000&#34; # Uses: 277
&#34;\001\000\000\000\000\000\000z&#34; # Uses: 260
&#34;\001\012&#34; # Uses: 246
&#34;\001\000\000\000\000\000\000\032&#34; # Uses: 219
&#34;\377\377\377\377\377\377\377\026&#34; # Uses: 220
&#34;\000\000\000\012&#34; # Uses: 236
&#34;\001\000\000\000\000\000\000\004&#34; # Uses: 256
&#34;\026\000\000\000&#34; # Uses: 245
&#34;\001\000\000\000&#34; # Uses: 227
&#34;\002\000\000\000&#34; # Uses: 232
&#34;\377\377\377\377\377\377\377\377&#34; # Uses: 210
&#34;\011\000\000\000&#34; # Uses: 215
&#34;\377\377\377\017&#34; # Uses: 214
&#34;\023\000\000\000&#34; # Uses: 237
&#34;\000\004&#34; # Uses: 206
&#34;V\000\000\000\000\000\000\000&#34; # Uses: 218
&#34;\377\377\000\021&#34; # Uses: 198
&#34;\377H&#34; # Uses: 203
&#34;\000\000\000\000&#34; # Uses: 189
&#34;\000\000\000\000\000\000\000\000&#34; # Uses: 181
&#34;\377\377\017\000&#34; # Uses: 189
&#34;\000\000\374*&#34; # Uses: 151
&#34;\376\377\017\000&#34; # Uses: 179
&#34;\000\000\000\024&#34; # Uses: 162
&#34;5\000\000\000\000\000\000\000&#34; # Uses: 154
&#34;\000\000\000\000\000\000\000\016&#34; # Uses: 152
&#34;\000\000\000\000\000\000\000[&#34; # Uses: 137
&#34;\377\013&#34; # Uses: 133
&#34;\007!&#34; # Uses: 132
&#34;\000\000\000\000\000\000\000_&#34; # Uses: 142
&#34;\023\000&#34; # Uses: 138
&#34;\000\000\000\000\000\000\000]&#34; # Uses: 113
&#34;\000\000\000\000\000\000\000\030&#34; # Uses: 112
&#34;\377\377\377\377\377\377\377\204&#34; # Uses: 117
&#34;\000\000\000\000\000\000\000R&#34; # Uses: 105
&#34;@\002\000\000\000\000\000\000&#34; # Uses: 121
&#34;\000\000\000\000\000\000\000\001&#34; # Uses: 113
&#34;\004\000\000\000\000\000\000\000&#34; # Uses: 113
&#34;\377\377\377~&#34; # Uses: 109
&#34;\001\000\000\000\000\000\000\331&#34; # Uses: 83
&#34;\000\007&#34; # Uses: 73
&#34;\207\000\000\000\000\000\000\000&#34; # Uses: 74
&#34;\377\377\377\377\377\377\000\332&#34; # Uses: 61
&#34;\007\000\000\000&#34; # Uses: 55
&#34;\025\000\000\000&#34; # Uses: 59
&#34;\001\000\006!&#34; # Uses: 54
&#34;\024\000\000\000&#34; # Uses: 40
&#34;\001\000\000\000\000\000\000\&#34;&#34; # Uses: 46
&#34;\001\000\000\000\000\000\000\007&#34; # Uses: 39
&#34;\377\000&#34; # Uses: 27
&#34;,\000\000\000\000\000\000\000&#34; # Uses: 3
###### End of recommended dictionary. ######
Done 401834 runs in 31 second(s)
stat::number_of_executed_units: 401834
stat::average_exec_per_sec:     12962
stat::new_units_added:          1760
stat::slowest_unit_time_sec:    0
stat::peak_rss_mb:              62

</pre>

</body>