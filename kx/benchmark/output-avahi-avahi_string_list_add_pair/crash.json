{
    "samples": [

    {
        "benchmark": "output-avahi-avahi_string_list_add_pair",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "14.32",
        "coverage_diff": "0.012064805239572561",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cassert>\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstring>\\n\\nextern \"C\" {\\n#include <avahi-common/strlst.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create initial AvahiStringList (can be NULL)\\n    AvahiStringList *string_list = nullptr;\\n\\n    // Generate random strings for key and value\\n    std::string key = stream.ConsumeRandomLengthString(100);\\n    std::string value = stream.ConsumeRandomLengthString(100);\\n\\n    // Call the function being tested\\n    string_list = avahi_string_list_add_pair(string_list, key.c_str(), value.c_str());\\n\\n    // Clean up the AvahiStringList\\n    avahi_string_list_free(string_list);\\n\\n    return 0;\\n}\\n\\nAvahiStringList * avahi_string_list_add_pair(AvahiStringList *, const char *, const char *);",
        "model": ""
    },

    {
        "benchmark": "output-avahi-avahi_string_list_add_pair",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "14.08",
        "coverage_diff": "0.012064805239572561",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cassert>\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstring>\\n\\nextern \"C\" {\\n#include <avahi-common/strlst.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create initial AvahiStringList pointer, can be nullptr\\n  AvahiStringList* list = nullptr;\\n\\n  // Generate key and value strings\\n  std::string key = stream.ConsumeRandomLengthString();\\n  std::string value = stream.ConsumeRandomLengthString();\\n\\n  // Ensure null-terminated strings\\n  const char* key_cstr = key.c_str();\\n  const char* value_cstr = value.c_str();\\n\\n  // Call the function being tested\\n  list = avahi_string_list_add_pair(list, key_cstr, value_cstr);\\n\\n  // Clean up the list\\n  avahi_string_list_free(list);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}