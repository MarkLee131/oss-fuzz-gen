{
    "samples": [

    {
        "benchmark": "output-libusb-libusb_get_string_descriptor_ascii",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "True",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.61",
        "coverage_diff": "0.001064773735581189",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libusb.h>\\n\\nint libusb_get_string_descriptor_ascii(libusb_device_handle *, uint8_t, unsigned char *, int);\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Generate a libusb_device_handle pointer (mocked for fuzzing purposes)\\n    libusb_device_handle *dev_handle = reinterpret_cast<libusb_device_handle*>(stream.ConsumeIntegral<uintptr_t>());\\n\\n    // Generate a uint8_t value for desc_index\\n    uint8_t desc_index = stream.ConsumeIntegral<uint8_t>();\\n\\n    // Generate a length for the data buffer\\n    int length = stream.ConsumeIntegralInRange<int>(1, 256);\\n\\n    // Create a buffer for the data\\n    std::vector<unsigned char> data_buffer(length);\\n    unsigned char *data_ptr = data_buffer.data();\\n\\n    // Call the function to fuzz\\n    libusb_get_string_descriptor_ascii(dev_handle, desc_index, data_ptr, length);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libusb-libusb_get_string_descriptor_ascii",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <libusb-1.0/libusb.h> // Corrected include path for libusb\\n#include <vector>\\n#include <cstring> // For memset\\n\\n// Declare the libusb_get_string_descriptor_ascii function as an external C function\\nextern \"C\" int libusb_get_string_descriptor_ascii(libusb_device_handle *, uint8_t, unsigned char *, int);\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Initialize libusb context\\n    libusb_context *ctx = nullptr;\\n    if (libusb_init(&ctx) != 0) {\\n        return 0; // If initialization fails, exit early\\n    }\\n\\n    // Mock a device handle\\n    libusb_device_handle *dev_handle = libusb_open_device_with_vid_pid(ctx, 0x1234, 0x5678);\\n    if (!dev_handle) {\\n        libusb_exit(ctx);\\n        return 0; // If device handle creation fails, exit early\\n    }\\n\\n    // Generate a uint8_t value for desc_index\\n    uint8_t desc_index = stream.ConsumeIntegral<uint8_t>();\\n\\n    // Generate a buffer for the data parameter\\n    int length = stream.ConsumeIntegralInRange<int>(1, 256); // Ensure length is positive\\n    std::vector<unsigned char> buffer(length);\\n    unsigned char *data_ptr = buffer.data();\\n\\n    // Call the function to fuzz\\n    int result = libusb_get_string_descriptor_ascii(dev_handle, desc_index, data_ptr, length);\\n\\n    // Clean up\\n    libusb_close(dev_handle);\\n    libusb_exit(ctx);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}