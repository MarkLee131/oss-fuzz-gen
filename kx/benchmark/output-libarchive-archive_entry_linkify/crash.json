{
    "samples": [

    {
        "benchmark": "output-libarchive-archive_entry_linkify",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <archive.h>\\n#include <archive_entry.h>\\n#include <cstdlib>\\n#include <vector>\\n#include <string>\\n\\nextern \"C\" {\\n    #include <archive_entry.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create two archive entries\\n    struct archive_entry *entry1 = archive_entry_new();\\n    struct archive_entry *entry2 = archive_entry_new();\\n\\n    // Set some random data to the entries\\n    std::string pathname1 = stream.ConsumeRandomLengthString();\\n    std::string pathname2 = stream.ConsumeRandomLengthString();\\n    archive_entry_set_pathname(entry1, pathname1.c_str());\\n    archive_entry_set_pathname(entry2, pathname2.c_str());\\n\\n    // Create a link resolver\\n    struct archive_entry_linkresolver *resolver = archive_entry_linkresolver_new();\\n\\n    // Call the required function\\n    archive_entry_linkify(resolver, &entry1, &entry2);\\n\\n    // Clean up\\n    archive_entry_linkresolver_free(resolver);\\n    archive_entry_free(entry1);\\n    archive_entry_free(entry2);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libarchive-archive_entry_linkify",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <string>\\n\\nextern \"C\" {\\n    #include <archive_entry.h>\\n    #include <archive.h>\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a link resolver\\n    struct archive_entry_linkresolver* resolver = archive_entry_linkresolver_new();\\n\\n    // Create two archive entries\\n    struct archive_entry* entry1 = archive_entry_new();\\n    struct archive_entry* entry2 = archive_entry_new();\\n\\n    // Set some properties for the entries using the fuzzed data\\n    std::string pathname1 = stream.ConsumeRandomLengthString(100);\\n    std::string pathname2 = stream.ConsumeRandomLengthString(100);\\n    archive_entry_set_pathname(entry1, pathname1.c_str());\\n    archive_entry_set_pathname(entry2, pathname2.c_str());\\n\\n    // Call the function to fuzz\\n    archive_entry_linkify(resolver, &entry1, &entry2);\\n\\n    // Clean up\\n    archive_entry_free(entry1);\\n    archive_entry_free(entry2);\\n    archive_entry_linkresolver_free(resolver);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}