{
    "samples": [

    {
        "benchmark": "output-guetzli-_zn7guetzli7processerkns_6paramsepns_12processstatserknst3__16vectorihns5_9allocatoriheeeeiipns5_12basic_",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "3.97",
        "coverage_diff": "0.012393767705382436",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <string>\\n#include \"guetzli/processor.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create and initialize Params object\\n    guetzli::Params params;\\n    // Assuming Params has some fields to initialize, otherwise skip this step\\n\\n    // Create and initialize ProcessStats object\\n    guetzli::ProcessStats stats;\\n    // Assuming ProcessStats has some fields to initialize, otherwise skip this step\\n\\n    // Extract a vector of unsigned char\\n    std::vector<unsigned char> input_vector = stream.ConsumeBytes<unsigned char>(stream.ConsumeIntegralInRange<size_t>(0, size));\\n\\n    // Extract two integers\\n    int param1 = stream.ConsumeIntegral<int>();\\n    int param2 = stream.ConsumeIntegral<int>();\\n\\n    // Extract a string\\n    std::string output_string = stream.ConsumeRandomLengthString();\\n\\n    // Call the function to fuzz\\n    guetzli::Process(params, &stats, input_vector, param1, param2, &output_string);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-guetzli-_zn7guetzli7processerkns_6paramsepns_12processstatserknst3__16vectorihns5_9allocatoriheeeeiipns5_12basic_",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "3.97",
        "coverage_diff": "0.012393767705382436",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <string>\\n#include \"guetzli/processor.h\"\\n#include \"guetzli/stats.h\"\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create Params object\\n    guetzli::Params params;\\n    // Initialize ProcessStats pointer\\n    guetzli::ProcessStats stats;\\n\\n    // Generate vector of unsigned char\\n    size_t vector_size = stream.ConsumeIntegralInRange<size_t>(0, size);\\n    std::vector<unsigned char> input_vector = stream.ConsumeBytes<unsigned char>(vector_size);\\n\\n    // Generate two integers\\n    int width = stream.ConsumeIntegral<int>();\\n    int height = stream.ConsumeIntegral<int>();\\n\\n    // Generate string pointer\\n    std::string output_string = stream.ConsumeRandomLengthString();\\n    std::string* output_string_ptr = &output_string;\\n\\n    // Call the function to fuzz\\n    guetzli::Process(params, &stats, input_vector, width, height, output_string_ptr);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}