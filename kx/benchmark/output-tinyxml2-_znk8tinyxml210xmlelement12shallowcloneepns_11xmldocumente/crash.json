{
    "samples": [

    {
        "benchmark": "output-tinyxml2-_znk8tinyxml210xmlelement12shallowcloneepns_11xmldocumente",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "6.80",
        "coverage_diff": "0.021252796420581657",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"tinyxml2.h\"\\n\\nusing namespace tinyxml2;\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a new XMLDocument\\n    XMLDocument doc;\\n\\n    // Generate a random string to use as element name\\n    std::string elementName = stream.ConsumeRandomLengthString(100);\\n\\n    // Create a new XMLElement with the random name\\n    XMLElement* element = doc.NewElement(elementName.c_str());\\n\\n    // Add some random attributes to the element\\n    int numAttributes = stream.ConsumeIntegralInRange<int>(0, 10);\\n    for (int i = 0; i < numAttributes; ++i) {\\n        std::string attrName = stream.ConsumeRandomLengthString(50);\\n        std::string attrValue = stream.ConsumeRandomLengthString(50);\\n        element->SetAttribute(attrName.c_str(), attrValue.c_str());\\n    }\\n\\n    // Call the function to be fuzzed\\n    XMLNode* clonedNode = element->ShallowClone(&doc);\\n\\n    // Clean up\\n    doc.DeleteNode(clonedNode);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-tinyxml2-_znk8tinyxml210xmlelement12shallowcloneepns_11xmldocumente",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "6.13",
        "coverage_diff": "0.025727069351230425",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include \"tinyxml2.h\"\\n\\nusing namespace tinyxml2;\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a new XMLDocument\\n    XMLDocument doc;\\n\\n    // Create a root element with some name\\n    const std::string rootName = stream.ConsumeRandomLengthString(10);\\n    XMLElement* root = doc.NewElement(rootName.c_str());\\n    doc.InsertFirstChild(root);\\n\\n    // Add some attributes to the root element\\n    int numAttributes = stream.ConsumeIntegralInRange<int>(0, 10);\\n    for (int i = 0; i < numAttributes; ++i) {\\n        const std::string attrName = stream.ConsumeRandomLengthString(10);\\n        const std::string attrValue = stream.ConsumeRandomLengthString(20);\\n        root->SetAttribute(attrName.c_str(), attrValue.c_str());\\n    }\\n\\n    // Now we call the function to fuzz\\n    XMLNode* clonedNode = root->ShallowClone(&doc);\\n\\n    // Clean up\\n    doc.DeleteNode(clonedNode);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}