{
    "samples": [

    {
        "benchmark": "output-icu-_zn6icu_7513messageformat12applypatternerkns_13unicodestringer11uparseerrorr10uerrorcode",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.83",
        "coverage_diff": "0.0028801486528336946",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <unicode/unistr.h>\\n#include <unicode/parseerr.h>\\n#include <unicode/utypes.h>\\n#include <unicode/msgfmt.h>\\n#include <unicode/strenum.h>\\n#include <unicode/ustream.h>\\n#include <unicode/locid.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Generate a random UnicodeString\\n    std::string pattern_str = stream.ConsumeRandomLengthString();\\n    icu::UnicodeString pattern = icu::UnicodeString::fromUTF8(icu::StringPiece(pattern_str));\\n\\n    // Initialize UParseError and UErrorCode\\n    UParseError parseError;\\n    UErrorCode errorCode = U_ZERO_ERROR;\\n\\n    // Create a MessageFormat object\\n    icu::Locale locale(\"en_US\");\\n    icu::MessageFormat messageFormat(\"\", locale, errorCode);\\n\\n    // Call the target function\\n    messageFormat.applyPattern(pattern, parseError, errorCode);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-icu-_zn6icu_7513messageformat12applypatternerkns_13unicodestringer11uparseerrorr10uerrorcode",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.77",
        "coverage_diff": "0.0028801486528336946",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <unicode/unistr.h>\\n#include <unicode/msgfmt.h>\\n#include <unicode/utypes.h>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider provider(data, size);\\n\\n  // Generate a random string for UnicodeString\\n  std::string random_string = provider.ConsumeRandomLengthString();\\n  icu::UnicodeString pattern = icu::UnicodeString::fromUTF8(random_string);\\n\\n  // Initialize UParseError\\n  UParseError parse_error;\\n  parse_error.line = provider.ConsumeIntegral<int32_t>();\\n  parse_error.offset = provider.ConsumeIntegral<int32_t>();\\n\\n  // Initialize UErrorCode\\n  UErrorCode error_code = U_ZERO_ERROR;\\n\\n  // Create a MessageFormat object with a default pattern\\n  icu::UnicodeString default_pattern(\"default pattern\");\\n  icu::MessageFormat message_format(default_pattern, error_code);\\n\\n  // Call the function to fuzz\\n  message_format.applyPattern(pattern, parse_error, error_code);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}