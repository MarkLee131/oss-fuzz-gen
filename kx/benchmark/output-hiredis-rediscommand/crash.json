{
    "samples": [

    {
        "benchmark": "output-hiredis-rediscommand",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <hiredis/hiredis.h>\\n#include <cstdarg>\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <vector>\\n#include <string>\\n#include <iostream>\\n\\nextern \"C\" {\\n    void *redisCommand(redisContext *, const char *, ...);\\n    void freeReplyObject(void *);\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a connection context to a Redis server (assuming localhost and default port)\\n    redisContext *context = redisConnect(\"127.0.0.1\", 6379);\\n    if (context == nullptr || context->err) {\\n        if (context) {\\n            redisFree(context);\\n        }\\n        return 0;\\n    }\\n\\n    // Generate a command string\\n    std::string command = stream.ConsumeRandomLengthString(100); // Limit length for safety\\n    const char *command_cstr = command.c_str();\\n\\n    // Call the redisCommand function\\n    void *reply = redisCommand(context, command_cstr);\\n\\n    // Free the reply object if it is not null\\n    if (reply) {\\n        freeReplyObject(reply);\\n    }\\n\\n    // Disconnect and free the context\\n    redisFree(context);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-hiredis-rediscommand",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <hiredis/hiredis.h>\\n#include <cstdarg>\\n#include <cstddef>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <vector>\\n#include <string>\\n\\nextern \"C\" void *redisCommand(redisContext *, const char *, ...);\\nextern \"C\" void freeReplyObject(void *);\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a new Redis context\\n    redisContext *c = redisConnect(\"127.0.0.1\", 6379);\\n    if (c == NULL || c->err) {\\n        if (c) {\\n            redisFree(c);\\n        }\\n        return 0;\\n    }\\n\\n    // Generate a random command string\\n    std::string command = stream.ConsumeRandomLengthString(size);\\n    const char *cmd = command.c_str();\\n\\n    // Call the function with the generated inputs\\n    void *reply = redisCommand(c, cmd);\\n\\n    // Free the reply object if it's not NULL\\n    if (reply != nullptr) {\\n        freeReplyObject(reply);\\n    }\\n\\n    // Disconnect the Redis context\\n    redisFree(c);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}