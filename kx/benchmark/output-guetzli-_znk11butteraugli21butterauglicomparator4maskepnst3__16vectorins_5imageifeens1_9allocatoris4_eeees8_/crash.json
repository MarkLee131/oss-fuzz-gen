{
    "samples": [

    {
        "benchmark": "output-guetzli-_znk11butteraugli21butterauglicomparator4maskepnst3__16vectorins_5imageifeens1_9allocatoris4_eeees8_",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <butteraugli/butteraugli.h> // Corrected the include path\\n\\nextern \"C\" {\\n#include <butteraugli/butteraugli.h>\\n}\\n\\nusing namespace butteraugli;\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Generate random dimensions for the images\\n    int xsize = stream.ConsumeIntegralInRange<int>(1, 1000);\\n    int ysize = stream.ConsumeIntegralInRange<int>(1, 1000);\\n\\n    // Generate random image data\\n    std::vector<ImageF> image1(xsize, ImageF(ysize));\\n    std::vector<ImageF> image2(xsize, ImageF(ysize));\\n\\n    for (int i = 0; i < xsize; ++i) {\\n        for (int j = 0; j < ysize; ++j) {\\n            image1[i].Row(j)[0] = stream.ConsumeFloatingPoint<float>();\\n            image2[i].Row(j)[0] = stream.ConsumeFloatingPoint<float>();\\n        }\\n    }\\n\\n    ButteraugliComparator comparator(xsize, ysize);\\n\\n    // Call the function to fuzz\\n    comparator.Mask(&image1, &image2);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-guetzli-_znk11butteraugli21butterauglicomparator4maskepnst3__16vectorins_5imageifeens1_9allocatoris4_eeees8_",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <cstdint>\\n#include <butteraugli/butteraugli.h>\\n#include <butteraugli/butteraugli_comparator.h>\\n\\nusing butteraugli::ImageF;\\nusing butteraugli::ButteraugliComparator;\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Determine the size of the image\\n  size_t xsize = stream.ConsumeIntegralInRange<size_t>(1, 1000);\\n  size_t ysize = stream.ConsumeIntegralInRange<size_t>(1, 1000);\\n\\n  // Create images with random data\\n  std::vector<ImageF> images;\\n  for (size_t i = 0; i < xsize * ysize; ++i) {\\n    images.push_back(ImageF(xsize, ysize));\\n  }\\n\\n  // Initialize the ButteraugliComparator\\n  ButteraugliComparator comparator(xsize, ysize);\\n\\n  // Call the function to fuzz\\n  std::vector<ImageF> mask(xsize * ysize, ImageF(xsize, ysize));\\n  std::vector<ImageF> mask_dc(xsize * ysize, ImageF(xsize, ysize));\\n  comparator.Mask(&mask, &mask_dc);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}