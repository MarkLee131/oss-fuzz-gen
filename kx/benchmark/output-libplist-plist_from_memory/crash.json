{
    "samples": [

    {
        "benchmark": "output-libplist-plist_from_memory",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0050477489768076395",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n\\ntypedef int plist_err_t;\\ntypedef void* plist_t;\\ntypedef int plist_format_t;\\n\\n#define PLIST_ERR_UNKNOWN -1\\n#define PLIST_ERR_INVALID_ARG -2\\n#define PLIST_ERR_PARSE -3\\n#define PLIST_ERR_SUCCESS 0\\n#define PLIST_FORMAT_NONE 0\\n#define PLIST_FORMAT_BINARY 1\\n#define PLIST_FORMAT_XML 2\\n#define PLIST_FORMAT_JSON 3\\n#define PLIST_FORMAT_OSTEP 4\\n\\nextern \"C\" plist_err_t plist_from_memory(const char *, uint32_t, plist_t *, plist_format_t *);\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    if (size == 0) return 0;\\n\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Generate a string for plist_data\\n    std::string plist_data = stream.ConsumeRandomLengthString(size);\\n    const char *plist_data_ptr = plist_data.c_str();\\n\\n    // Generate a uint32_t for length ensuring it does not exceed the actual size\\n    uint32_t length = static_cast<uint32_t>(plist_data.size());\\n\\n    // Generate pointers for plist and format\\n    plist_t plist = nullptr;\\n    plist_format_t format = PLIST_FORMAT_NONE;\\n\\n    // Call the function to fuzz\\n    plist_from_memory(plist_data_ptr, length, &plist, &format);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-libplist-plist_from_memory",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0050477489768076395",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <cstdint>\\n#include <cstdlib>\\n#include <string>\\n\\n// Assuming the necessary enums and types are defined as follows\\ntypedef int plist_err_t;\\ntypedef void* plist_t;\\ntypedef int plist_format_t;\\n\\n#define PLIST_ERR_UNKNOWN -1\\n#define PLIST_ERR_INVALID_ARG -2\\n#define PLIST_ERR_PARSE -3\\n#define PLIST_ERR_SUCCESS 0\\n#define PLIST_FORMAT_NONE 0\\n#define PLIST_FORMAT_BINARY 1\\n#define PLIST_FORMAT_XML 2\\n#define PLIST_FORMAT_JSON 3\\n#define PLIST_FORMAT_OSTEP 4\\n\\nextern \"C\" {\\n    extern plist_err_t plist_from_memory(const char *, uint32_t, plist_t *, plist_format_t *);\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Extract a string from the input data\\n    std::string plist_data = stream.ConsumeRandomLengthString(size);\\n    const char *plist_data_ptr = plist_data.c_str();\\n\\n    // Use the actual length of the string instead of consuming another uint32_t\\n    uint32_t length = static_cast<uint32_t>(plist_data.size());\\n\\n    // Allocate memory for plist and format\\n    plist_t plist = nullptr;\\n    plist_format_t format = PLIST_FORMAT_NONE;\\n\\n    // Call the function to fuzz\\n    plist_from_memory(plist_data_ptr, length, &plist, &format);\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}