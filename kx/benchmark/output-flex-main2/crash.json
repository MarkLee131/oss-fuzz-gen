{
    "samples": [

    {
        "benchmark": "output-flex-main2",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <string>\\n#include <cstdint> // For uint8_t\\n\\nextern \"C\" int main2(int, char **);\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Generate a random number of arguments\\n    int argc = stream.ConsumeIntegralInRange<int>(1, 10);\\n\\n    // Create a vector to hold the arguments\\n    std::vector<std::string> args(argc);\\n    std::vector<char*> argv(argc);\\n\\n    for (int i = 0; i < argc; ++i) {\\n        args[i] = stream.ConsumeRandomLengthString();\\n        argv[i] = const_cast<char*>(args[i].c_str());\\n    }\\n\\n    // Call the function being fuzzed\\n    main2(argc, argv.data());\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-flex-main2",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <vector>\\n#include <string>\\n#include <cstring>\\n\\nextern \"C\" int main2(int, char **);\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n    FuzzedDataProvider provider(data, size);\\n\\n    // Generate a random number of arguments\\n    int argc = provider.ConsumeIntegralInRange<int>(1, 10);\\n\\n    // Create a vector to hold the argument strings\\n    std::vector<std::string> arg_strings;\\n    for (int i = 0; i < argc; ++i) {\\n        // Generate random length strings for each argument\\n        std::string arg = provider.ConsumeRandomLengthString(100); // Added a max length to avoid overly long strings\\n        arg_strings.push_back(arg);\\n    }\\n\\n    // Convert the vector of strings to an array of C strings\\n    std::vector<char*> argv;\\n    for (auto& arg : arg_strings) {\\n        argv.push_back(const_cast<char*>(arg.c_str()));\\n    }\\n\\n    // Ensure argv is null-terminated as expected by main2\\n    argv.push_back(nullptr);\\n\\n    // Call the function being tested\\n    main2(argc, argv.data());\\n\\n    return 0;\\n}",
        "model": ""
    }

    ]
}