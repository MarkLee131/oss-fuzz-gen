{
    "samples": [

    {
        "benchmark": "output-hiredis-redisasyncread",
        "sample": "01",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <hiredis/async.h>\\n#include <hiredis/hiredis.h>\\n#include <vector>\\n#include <string>\\n#include <cstring> // for std::strlen\\n\\nextern \"C\" {\\n    void redisAsyncRead(redisAsyncContext *);\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n    FuzzedDataProvider stream(data, size);\\n\\n    // Create a dummy redisAsyncContext and redisContext\\n    redisAsyncContext ac;\\n    redisContext c;\\n\\n    // Initialize the redisContext with some dummy values\\n    c.err = stream.ConsumeIntegral<int>();\\n    std::string errstr = stream.ConsumeRandomLengthString(255); // Limit length for safety\\n    c.errstr = const_cast<char*>(errstr.c_str());\\n    c.fd = stream.ConsumeIntegral<int>();\\n    c.flags = stream.ConsumeIntegral<int>();\\n    std::string obuf = stream.ConsumeRandomLengthString(255); // Limit length for safety\\n    c.obuf = const_cast<char*>(obuf.c_str());\\n    c.reader = nullptr; // This can be set to nullptr for fuzzing purposes\\n\\n    // Assign the dummy redisContext to the redisAsyncContext\\n    ac.c = &c;\\n\\n    // Call the function to be fuzzed\\n    redisAsyncRead(&ac);\\n\\n    return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-hiredis-redisasyncread",
        "sample": "02",
        "status": "Done",
        "compiles": "False",
        "crashes": "False",
        "crash_reason": "-",
        "bug": "True",
        "coverage": "0.00",
        "coverage_diff": "0.0",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <hiredis/async.h>\\n#include <hiredis/hiredis.h>\\n#include <vector>\\n#include <cstdlib>\\n#include <cstring>\\n\\nextern \"C\" {\\n#include <hiredis/async.h>\\n#include <hiredis/hiredis.h>\\nvoid redisAsyncRead(redisAsyncContext *);\\n}\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Allocate memory for redisAsyncContext\\n  redisAsyncContext *ac = (redisAsyncContext *)malloc(sizeof(redisAsyncContext));\\n  if (!ac) {\\n    return 0;\\n  }\\n\\n  // Allocate memory for redisContext\\n  redisContext *c = (redisContext *)malloc(sizeof(redisContext));\\n  if (!c) {\\n    free(ac);\\n    return 0;\\n  }\\n\\n  // Initialize the redisContext within redisAsyncContext\\n  std::memset(ac, 0, sizeof(redisAsyncContext));\\n  std::memset(c, 0, sizeof(redisContext));\\n  ac->c = *c;\\n\\n  // Simulate some data in the buffer\\n  size_t buffer_size = stream.ConsumeIntegralInRange<size_t>(0, 1024);\\n  ac->c.reader = redisReaderCreate();\\n  if (!ac->c.reader) {\\n    free(c);\\n    free(ac);\\n    return 0;\\n  }\\n\\n  // Consume some bytes into the buffer\\n  std::vector<uint8_t> buffer = stream.ConsumeBytes<uint8_t>(buffer_size);\\n  redisReaderFeed(ac->c.reader, reinterpret_cast<const char *>(buffer.data()), buffer.size());\\n\\n  // Call the function to be tested\\n  redisAsyncRead(ac);\\n\\n  // Clean up\\n  redisReaderFree(ac->c.reader);\\n  free(c);\\n  free(ac);\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}