{
    "samples": [

    {
        "benchmark": "output-eigen-_zn5eigen6matrixidlin1elin1eli0elin1elin1eed2ev",
        "sample": "01",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "43.48",
        "coverage_diff": "0.012121212121212121",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <Eigen/Dense>\\n\\nusing Eigen::Matrix;\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n\\n  // Create a Matrix<int, Eigen::Dynamic, Eigen::Dynamic> object\\n  int rows = stream.ConsumeIntegralInRange<int>(1, 10);\\n  int cols = stream.ConsumeIntegralInRange<int>(1, 10);\\n  Matrix<int, Eigen::Dynamic, Eigen::Dynamic> int_matrix(rows, cols);\\n\\n  // Fill the matrix with some values\\n  for (int i = 0; i < rows; ++i) {\\n    for (int j = 0; j < cols; ++j) {\\n      int_matrix(i, j) = stream.ConsumeIntegral<int>();\\n    }\\n  }\\n\\n  // Create a Matrix<double, Eigen::Dynamic, Eigen::Dynamic> object\\n  Matrix<double, Eigen::Dynamic, Eigen::Dynamic>* double_matrix = \\n      new Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(rows, cols);\\n\\n  // Fill the matrix with some values\\n  for (int i = 0; i < rows; ++i) {\\n    for (int j = 0; j < cols; ++j) {\\n      (*double_matrix)(i, j) = stream.ConsumeFloatingPoint<double>();\\n    }\\n  }\\n\\n  // Perform some operations on the matrices to utilize them\\n  Matrix<int, Eigen::Dynamic, Eigen::Dynamic> int_matrix_transpose = int_matrix.transpose();\\n  Matrix<double, Eigen::Dynamic, Eigen::Dynamic> double_matrix_transpose = double_matrix->transpose();\\n\\n  // Clean up\\n  delete double_matrix;\\n\\n  return 0;\\n}",
        "model": ""
    },

    {
        "benchmark": "output-eigen-_zn5eigen6matrixidlin1elin1eli0elin1elin1eed2ev",
        "sample": "02",
        "status": "Done",
        "compiles": "True",
        "crashes": "False",
        "crash_reason": "NO_SEMANTIC_ERR",
        "bug": "True",
        "coverage": "38.24",
        "coverage_diff": "0.29348025711662074",
        "coverage_report": "#",
        "stacktrace": "/stacktrace",
        "target_binary": "/target_binary",
        "reproducer": "/artifacts",
        "run_log": "run.log",
        "source_code": "#include <fuzzer/FuzzedDataProvider.h>\\n#include <Eigen/Dense>\\n\\nextern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {\\n  FuzzedDataProvider stream(data, size);\\n  \\n  // Generate dimensions for the matrices\\n  int rows = stream.ConsumeIntegralInRange<int>(1, 100);\\n  int cols = stream.ConsumeIntegralInRange<int>(1, 100);\\n\\n  // Create a matrix of doubles\\n  Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> matrix_double(rows, cols);\\n\\n  // Create a matrix of ints\\n  Eigen::Matrix<int, Eigen::Dynamic, Eigen::Dynamic> matrix_int(rows, cols);\\n\\n  // Fill the matrices with fuzzed data\\n  for(int i = 0; i < rows; ++i) {\\n    for(int j = 0; j < cols; ++j) {\\n      matrix_double(i, j) = stream.ConsumeFloatingPoint<double>();\\n      matrix_int(i, j) = stream.ConsumeIntegral<int>();\\n    }\\n  }\\n\\n  // Perform some operations on the matrices to fuzz\\n  Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> result_double = matrix_double * matrix_double.transpose();\\n  Eigen::Matrix<int, Eigen::Dynamic, Eigen::Dynamic> result_int = matrix_int * matrix_int.transpose();\\n\\n  // No need to explicitly call the destructor or delete objects since we are using stack-allocated objects\\n\\n  return 0;\\n}",
        "model": ""
    }

    ]
}